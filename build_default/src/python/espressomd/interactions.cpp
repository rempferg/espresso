/* Generated by Cython 0.25.2 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_25_2"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_FASTCALL
  #define METH_FASTCALL 0x80
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
                                              Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__espressomd__interactions
#define __PYX_HAVE_API__espressomd__interactions
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "grid.hpp"
#include "communication.hpp"
#include <string.h>
#include <string>
#include "random.hpp"
#include "utils.hpp"
#include <stdio.h>
#include <stdlib.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "stdlib.h"
#include "RuntimeError.hpp"
#include "errorhandling.hpp"
#include <limits>
#include "interaction_data.hpp"
#include "lj.hpp"
#include "forcecap.hpp"
#include "ljgen.hpp"
#include "fene.hpp"
#include "harmonic.hpp"
#include "dihedral.hpp"
#include "angle_harmonic.hpp"
#include "rattle.hpp"
#include "angle_cosine.hpp"
#include "angle_cossquare.hpp"
#include "subt_lj.hpp"
#include "object-in-fluid/oif_global_forces.hpp"
#include "object-in-fluid/oif_local_forces.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "espressomd/interactions.pyx",
  "__init__.pxd",
  "type.pxd",
};

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":725
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":726
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":727
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":728
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":732
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":733
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":734
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":735
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":739
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":740
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":749
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":750
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":751
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":754
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":755
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":757
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":758
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":761
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction;
struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction;
struct __pyx_obj_10espressomd_12interactions_NonBondedInteractions;
struct __pyx_obj_10espressomd_12interactions_BondedInteraction;
struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct____getattribute__;
struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_1___getattribute__;
struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_2___iter__;

/* "espressomd/_system.pxd":34
 * from libcpp.string cimport string  # import std::string as string
 * from libcpp.vector cimport vector  # import std::vector as vector
 * ctypedef vector[string] string_vec             # <<<<<<<<<<<<<<
 * cdef extern from "random.hpp" namespace "Random":
 *     string mpi_random_get_stat()
 */
typedef std::vector<std::string>  __pyx_t_10espressomd_7_system_string_vec;

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":764
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":765
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":766
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "espressomd/interactions.pyx":24
 * # Non-bonded interactions
 * 
 * cdef class NonBondedInteraction(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef public object _part_types
 */
struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction {
  PyObject_HEAD
  PyObject *_part_types;
  PyObject *_params;
};


/* "espressomd/interactions.pyx":181
 * 
 * IF LENNARD_JONES == 1:
 *     cdef class LennardJonesInteraction(NonBondedInteraction):             # <<<<<<<<<<<<<<
 * 
 *         def validate_params(self):
 */
struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction {
  struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction __pyx_base;
};


/* "espressomd/interactions.pyx":425
 * 
 * 
 * cdef class NonBondedInteractions(object):             # <<<<<<<<<<<<<<
 * 
 *     """Access to non-bonded interaction parameters via [i,j], where i,j are particle
 */
struct __pyx_obj_10espressomd_12interactions_NonBondedInteractions {
  PyObject_HEAD
};


/* "espressomd/interactions.pyx":477
 * 
 * 
 * cdef class BondedInteraction(object):             # <<<<<<<<<<<<<<
 * 
 *     # This means, the instance does not yet represent a bond in the simulation
 */
struct __pyx_obj_10espressomd_12interactions_BondedInteraction {
  PyObject_HEAD
};


/* "espressomd/interactions.pyx":133
 *         return True
 * 
 *     def __getattribute__(self, name):             # <<<<<<<<<<<<<<
 *         """Every time _set_params_in_es_core is called, the parameter dict is also updated."""
 *         attr = object.__getattribute__(self, name)
 */
struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct____getattribute__ {
  PyObject_HEAD
  PyObject *__pyx_v_attr;
  struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self;
};


/* "espressomd/interactions.pyx":555
 *         return True
 * 
 *     def __getattribute__(self, name):             # <<<<<<<<<<<<<<
 *         """Every time _set_params_in_es_core is called, the parameter dict is also updated."""
 *         attr = object.__getattribute__(self, name)
 */
struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_1___getattribute__ {
  PyObject_HEAD
  PyObject *__pyx_v_attr;
  struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self;
};


/* "espressomd/interactions.pyx":1408
 * 
 *     # Support iteration over active bonded interactions
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         for i in range(n_bonded_ia):
 *             if bonded_ia_params[i].type != -1:
 */
struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_2___iter__ {
  PyObject_HEAD
  int __pyx_v_i;
  PyObject *__pyx_v_self;
  int __pyx_t_0;
  int __pyx_t_1;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* KeywordStringCheck.proto */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* py_dict_keys.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    ((likely((cfunc)->func)) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
             ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
              (PY_VERSION_HEX >= 0x030600B1 && (cfunc)->flag == METH_FASTCALL ?  (*(__Pyx_PyCFunctionFast)(cfunc)->func)(self, &PyTuple_GET_ITEM(__pyx_empty_tuple, 0), 0, NULL) :\
                __Pyx__CallUnboundCMethod0(cfunc, self))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* CallableCheck.proto */
#if CYTHON_USE_TYPE_SLOTS && PY_MAJOR_VERSION >= 3
#define __Pyx_PyCallable_Check(obj)   ((obj)->ob_type->tp_call != NULL)
#else
#define __Pyx_PyCallable_Check(obj)   PyCallable_Check(obj)
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_EqObjC(op1, op2, intval, inplace)\
    PyObject_RichCompare(op1, op2, Py_EQ)
    #endif

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__BondedInteraction(enum BondedInteraction value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static int __Pyx_Coroutine_clear(PyObject *self);
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue);
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue) PyGen_FetchStopIterationValue(pvalue)
#endif

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* VoidPtrImport.proto */
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'espressomd._system' */
static bool *__pyx_vp_10espressomd_7_system_skin_set = 0;
#define __pyx_v_10espressomd_7_system_skin_set (*__pyx_vp_10espressomd_7_system_skin_set)

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'espressomd.utils' */

/* Module declarations from 'espressomd.interactions' */
static PyTypeObject *__pyx_ptype_10espressomd_12interactions_NonBondedInteraction = 0;
static PyTypeObject *__pyx_ptype_10espressomd_12interactions_LennardJonesInteraction = 0;
static PyTypeObject *__pyx_ptype_10espressomd_12interactions_NonBondedInteractions = 0;
static PyTypeObject *__pyx_ptype_10espressomd_12interactions_BondedInteraction = 0;
static PyTypeObject *__pyx_ptype_10espressomd_12interactions___pyx_scope_struct____getattribute__ = 0;
static PyTypeObject *__pyx_ptype_10espressomd_12interactions___pyx_scope_struct_1___getattribute__ = 0;
static PyTypeObject *__pyx_ptype_10espressomd_12interactions___pyx_scope_struct_2___iter__ = 0;
#define __Pyx_MODULE_NAME "espressomd.interactions"
int __pyx_module_is_main_espressomd__interactions = 0;

/* Implementation of 'espressomd.interactions' */
static PyObject *__pyx_builtin_object;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_i[] = "i";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_V0[] = "V0";
static const char __pyx_k__2[] = "(";
static const char __pyx_k__3[] = ")";
static const char __pyx_k_kb[] = "kb";
static const char __pyx_k_ks[] = "ks";
static const char __pyx_k_kv[] = "kv";
static const char __pyx_k_r0[] = "r0";
static const char __pyx_k_A01[] = "A01";
static const char __pyx_k_A02[] = "A02";
static const char __pyx_k__34[] = "): ";
static const char __pyx_k__75[] = "";
static const char __pyx_k_add[] = "add";
static const char __pyx_k_cap[] = "cap";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_k_2[] = "k'";
static const char __pyx_k_kal[] = "kal";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_min[] = "min";
static const char __pyx_k_r_0[] = "r_0";
static const char __pyx_k_str[] = "__str__";
static const char __pyx_k_A0_g[] = "A0_g";
static const char __pyx_k_FENE[] = "FENE";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_auto[] = "auto";
static const char __pyx_k_bend[] = "bend";
static const char __pyx_k_call[] = "__call__";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_iter[] = "__iter__";
static const char __pyx_k_ka_g[] = "ka_g";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mult[] = "mult";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_phi0[] = "phi0";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_RIGID[] = "RIGID";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_kslin[] = "kslin";
static const char __pyx_k_phase[] = "phase";
static const char __pyx_k_r_cut[] = "r_cut";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_shift[] = "shift";
static const char __pyx_k_sigma[] = "sigma";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_type1[] = "_type1";
static const char __pyx_k_type2[] = "_type2";
static const char __pyx_k_utils[] = "utils";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_cutoff[] = "cutoff";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_kwargs[] = "kwargs";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_mult_2[] = "mult'";
static const char __pyx_k_name_2[] = "name";
static const char __pyx_k_object[] = "object";
static const char __pyx_k_offset[] = "offset";
static const char __pyx_k_params[] = "_params";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_SUBT_LJ[] = "SUBT_LJ";
static const char __pyx_k_Subt_Lj[] = "Subt_Lj";
static const char __pyx_k_Virtual[] = "Virtual";
static const char __pyx_k_bond_id[] = "_bond_id";
static const char __pyx_k_d_r_max[] = "d_r_max";
static const char __pyx_k_epsilon[] = "epsilon";
static const char __pyx_k_getitem[] = "__getitem__";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_setitem[] = "__setitem__";
static const char __pyx_k_type1_2[] = "type1";
static const char __pyx_k_type2_2[] = "type2";
static const char __pyx_k_DIHEDRAL[] = "DIHEDRAL";
static const char __pyx_k_Dihedral[] = "Dihedral";
static const char __pyx_k_FeneBond[] = "FeneBond";
static const char __pyx_k_HARMONIC[] = "HARMONIC";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_inactive[] = "inactive";
static const char __pyx_k_params_2[] = "params";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_RigidBond[] = "RigidBond";
static const char __pyx_k_Tabulated[] = "Tabulated";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_bond_type[] = "bond_type";
static const char __pyx_k_bonded_ia[] = "bonded_ia";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_force_cap[] = "force_cap";
static const char __pyx_k_is_active[] = "is_active";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_tabulated[] = "tabulated";
static const char __pyx_k_type_name[] = "type_name";
static const char __pyx_k_BOND_ANGLE[] = "BOND_ANGLE";
static const char __pyx_k_OVERLAPPED[] = "OVERLAPPED";
static const char __pyx_k_Overlapped[] = "Overlapped";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_bond_class[] = "bond_class";
static const char __pyx_k_get_params[] = "get_params";
static const char __pyx_k_set_params[] = "set_params";
static const char __pyx_k_valid_keys[] = "valid_keys";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_sync_params[] = "sync_params";
static const char __pyx_k_type_number[] = "type_number";
static const char __pyx_k_Angle_Cosine[] = "Angle_Cosine";
static const char __pyx_k_BOND_VIRTUAL[] = "BOND_VIRTUAL";
static const char __pyx_k_Endangledist[] = "Endangledist";
static const char __pyx_k_HarmonicBond[] = "HarmonicBond";
static const char __pyx_k_LennardJones[] = "LennardJones";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_getattribute[] = "__getattribute__";
static const char __pyx_k_get_force_cap[] = "get_force_cap";
static const char __pyx_k_lennard_jones[] = "lennard_jones";
static const char __pyx_k_required_keys[] = "required_keys";
static const char __pyx_k_set_force_cap[] = "set_force_cap";
static const char __pyx_k_Angle_Harmonic[] = "Angle_Harmonic";
static const char __pyx_k_default_params[] = "default_params";
static const char __pyx_k_only_supported[] = "only == supported";
static const char __pyx_k_Angle_Cossquare[] = "Angle_Cossquare";
static const char __pyx_k_FeneBond___init[] = "FeneBond.__init__";
static const char __pyx_k_bonded_instance[] = "bonded_instance";
static const char __pyx_k_validate_params[] = "validate_params";
static const char __pyx_k_OIF_LOCAL_FORCES[] = "OIF_LOCAL_FORCES";
static const char __pyx_k_Oif_Local_Forces[] = "Oif_Local_Forces";
static const char __pyx_k_BOND_ENDANGLEDIST[] = "BOND_ENDANGLEDIST";
static const char __pyx_k_OIF_GLOBAL_FORCES[] = "OIF_GLOBAL_FORCES";
static const char __pyx_k_Oif_Global_Forces[] = "Oif_Global_Forces";
static const char __pyx_k_Subt_Lj_type_name[] = "Subt_Lj.type_name";
static const char __pyx_k_user_interactions[] = "user_interactions";
static const char __pyx_k_BondedInteractions[] = "BondedInteractions";
static const char __pyx_k_Dihedral_type_name[] = "Dihedral.type_name";
static const char __pyx_k_FeneBond_type_name[] = "FeneBond.type_name";
static const char __pyx_k_Subt_Lj_valid_keys[] = "Subt_Lj.valid_keys";
static const char __pyx_k_is_not_yet_defined[] = " is not yet defined.";
static const char __pyx_k_set_default_params[] = "set_default_params";
static const char __pyx_k_Dihedral_valid_keys[] = "Dihedral.valid_keys";
static const char __pyx_k_FeneBond_valid_keys[] = "FeneBond.valid_keys";
static const char __pyx_k_HarmonicBond___init[] = "HarmonicBond.__init__";
static const char __pyx_k_Subt_Lj_type_number[] = "Subt_Lj.type_number";
static const char __pyx_k_Tabulated_type_name[] = "Tabulated.type_name";
static const char __pyx_k_Dihedral_type_number[] = "Dihedral.type_number";
static const char __pyx_k_FeneBond_type_number[] = "FeneBond.type_number";
static const char __pyx_k_HarmonicDumbbellBond[] = "HarmonicDumbbellBond";
static const char __pyx_k_Tabulated_valid_keys[] = "Tabulated.valid_keys";
static const char __pyx_k_Subt_Lj_required_keys[] = "Subt_Lj.required_keys";
static const char __pyx_k_Tabulated_type_number[] = "Tabulated.type_number";
static const char __pyx_k_generic_lennard_jones[] = "generic_lennard_jones";
static const char __pyx_k_set_params_in_es_core[] = "_set_params_in_es_core";
static const char __pyx_k_BondedInteractions_add[] = "BondedInteractions.add";
static const char __pyx_k_Could_not_set_forcecap[] = "Could not set forcecap";
static const char __pyx_k_Dihedral_required_keys[] = "Dihedral.required_keys";
static const char __pyx_k_FeneBond_required_keys[] = "FeneBond.required_keys";
static const char __pyx_k_HarmonicBond_type_name[] = "HarmonicBond.type_name";
static const char __pyx_k_HarmonicBond_valid_keys[] = "HarmonicBond.valid_keys";
static const char __pyx_k_Tabulated_required_keys[] = "Tabulated.required_keys";
static const char __pyx_k_espressomd_interactions[] = "espressomd.interactions";
static const char __pyx_k_get_params_from_es_core[] = "_get_params_from_es_core";
static const char __pyx_k_HarmonicBond_type_number[] = "HarmonicBond.type_number";
static const char __pyx_k_BondedInteractions___iter[] = "BondedInteractions.__iter__";
static const char __pyx_k_bond_in_the_Espresso_core[] = " bond in the Espresso core.";
static const char __pyx_k_HarmonicBond_required_keys[] = "HarmonicBond.required_keys";
static const char __pyx_k_NonBondedInteractionHandle[] = "NonBondedInteractionHandle";
static const char __pyx_k_Oif_Local_Forces_type_name[] = "Oif_Local_Forces.type_name";
static const char __pyx_k_Subt_Lj_set_default_params[] = "Subt_Lj.set_default_params";
static const char __pyx_k_bonded_interaction_classes[] = "bonded_interaction_classes";
static const char __pyx_k_BondedInteractionNotDefined[] = "BondedInteractionNotDefined";
static const char __pyx_k_Dihedral_set_default_params[] = "Dihedral.set_default_params";
static const char __pyx_k_FeneBond_set_default_params[] = "FeneBond.set_default_params";
static const char __pyx_k_HarmonicDumbbellBond___init[] = "HarmonicDumbbellBond.__init__";
static const char __pyx_k_Oif_Global_Forces_type_name[] = "Oif_Global_Forces.type_name";
static const char __pyx_k_Oif_Local_Forces_valid_keys[] = "Oif_Local_Forces.valid_keys";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_BondedInteractions___getitem[] = "BondedInteractions.__getitem__";
static const char __pyx_k_BondedInteractions___setitem[] = "BondedInteractions.__setitem__";
static const char __pyx_k_Oif_Global_Forces_valid_keys[] = "Oif_Global_Forces.valid_keys";
static const char __pyx_k_Oif_Local_Forces_type_number[] = "Oif_Local_Forces.type_number";
static const char __pyx_k_Tabulated_set_default_params[] = "Tabulated.set_default_params";
static const char __pyx_k_BondedInteractions___getstate[] = "BondedInteractions.__getstate__";
static const char __pyx_k_BondedInteractions___setstate[] = "BondedInteractions.__setstate__";
static const char __pyx_k_Lennard_Jones_eps_has_to_be_0[] = "Lennard-Jones eps has to be >=0";
static const char __pyx_k_Oif_Global_Forces_type_number[] = "Oif_Global_Forces.type_number";
static const char __pyx_k_HarmonicDumbbellBond_type_name[] = "HarmonicDumbbellBond.type_name";
static const char __pyx_k_Oif_Local_Forces_required_keys[] = "Oif_Local_Forces.required_keys";
static const char __pyx_k_Subt_Lj__set_params_in_es_core[] = "Subt_Lj._set_params_in_es_core";
static const char __pyx_k_getattribute___locals_sync_par[] = "__getattribute__.<locals>.sync_params";
static const char __pyx_k_BondedInteractionNotDefined_set[] = "BondedInteractionNotDefined.set_default_params";
static const char __pyx_k_Dihedral__set_params_in_es_core[] = "Dihedral._set_params_in_es_core";
static const char __pyx_k_FeneBond__set_params_in_es_core[] = "FeneBond._set_params_in_es_core";
static const char __pyx_k_HarmonicBond_set_default_params[] = "HarmonicBond.set_default_params";
static const char __pyx_k_HarmonicDumbbellBond_valid_keys[] = "HarmonicDumbbellBond.valid_keys";
static const char __pyx_k_Index_to_BondedInteractions_has[] = "Index to BondedInteractions[] has to ba an integer referring to a bond id";
static const char __pyx_k_Lennard_Jones_sigma_has_to_be_0[] = "Lennard-Jones sigma has to be >=0";
static const char __pyx_k_Oif_Global_Forces_required_keys[] = "Oif_Global_Forces.required_keys";
static const char __pyx_k_Oif_Local_Forces__set_params_in[] = "Oif_Local_Forces._set_params_in_es_core";
static const char __pyx_k_Subclasses_of_BondedInteraction[] = "Subclasses of BondedInteraction must define the _get_params_from_es_core() method.";
static const char __pyx_k_The_bonded_interaction_with_the[] = "The bonded interaction with the id ";
static const char __pyx_k_Users_bindgens2_Documents_espre[] = "/Users/bindgens2/Documents/espresso_dev/espresso/src/python/espressomd/interactions.pyx";
static const char __pyx_k_not_compiled_into_Espresso_core[] = " not compiled into Espresso core";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_s_has_to_be_defined_in_myconfig[] = "%s has to be defined in myconfig.hpp.";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_At_least_the_following_keys_have[] = "At least the following keys have to be given as keyword arguments: ";
static const char __pyx_k_BondedInteractionNotDefined___in[] = "BondedInteractionNotDefined.__init__";
static const char __pyx_k_BondedInteractionNotDefined__get[] = "BondedInteractionNotDefined._get_params_from_es_core";
static const char __pyx_k_BondedInteractionNotDefined__set[] = "BondedInteractionNotDefined._set_params_in_es_core";
static const char __pyx_k_BondedInteractionNotDefined_requ[] = "BondedInteractionNotDefined.required_keys";
static const char __pyx_k_BondedInteractionNotDefined_type[] = "BondedInteractionNotDefined.type_number";
static const char __pyx_k_BondedInteractionNotDefined_vali[] = "BondedInteractionNotDefined.valid_keys";
static const char __pyx_k_Could_not_set_Lennard_Jones_para[] = "Could not set Lennard Jones parameters";
static const char __pyx_k_Dihedral__get_params_from_es_cor[] = "Dihedral._get_params_from_es_core";
static const char __pyx_k_FeneBond__get_params_from_es_cor[] = "FeneBond._get_params_from_es_core";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_HarmonicBond__get_params_from_es[] = "HarmonicBond._get_params_from_es_core";
static const char __pyx_k_HarmonicBond__set_params_in_es_c[] = "HarmonicBond._set_params_in_es_core";
static const char __pyx_k_HarmonicDumbbellBond_ROTATION_ha[] = "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.";
static const char __pyx_k_HarmonicDumbbellBond__get_params[] = "HarmonicDumbbellBond._get_params_from_es_core";
static const char __pyx_k_HarmonicDumbbellBond__set_params[] = "HarmonicDumbbellBond._set_params_in_es_core";
static const char __pyx_k_HarmonicDumbbellBond_required_ke[] = "HarmonicDumbbellBond.required_keys";
static const char __pyx_k_HarmonicDumbbellBond_set_default[] = "HarmonicDumbbellBond.set_default_params";
static const char __pyx_k_HarmonicDumbbellBond_type_number[] = "HarmonicDumbbellBond.type_number";
static const char __pyx_k_Index_to_BondedInteractions_hast[] = "Index to BondedInteractions[] hast to be an integer referring to a bond id";
static const char __pyx_k_Lennard_Jones_cutoff_has_to_be_0[] = "Lennard-Jones cutoff has to be >=0";
static const char __pyx_k_NonBondedInteractionHandle___ini[] = "NonBondedInteractionHandle.__init__";
static const char __pyx_k_NonBondedInteractions_expects_tw[] = "NonBondedInteractions[] expects two particle types as indices.";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_Oif_Global_Forces__get_params_fr[] = "Oif_Global_Forces._get_params_from_es_core";
static const char __pyx_k_Oif_Global_Forces__set_params_in[] = "Oif_Global_Forces._set_params_in_es_core";
static const char __pyx_k_Oif_Global_Forces_set_default_pa[] = "Oif_Global_Forces.set_default_params";
static const char __pyx_k_Oif_Local_Forces__get_params_fro[] = "Oif_Local_Forces._get_params_from_es_core";
static const char __pyx_k_Oif_Local_Forces_set_default_par[] = "Oif_Local_Forces.set_default_params";
static const char __pyx_k_Only_subclasses_of_BondedInterac[] = "Only subclasses of BondedInteraction can be assigned.";
static const char __pyx_k_Only_the_following_keys_are_supp[] = "Only the following keys are supported: ";
static const char __pyx_k_Provides_access_to_all_Non_bonde[] = "Provides access to all Non-bonded interactions between\n    two particle types.";
static const char __pyx_k_Represents_the_bonded_interactio[] = "Represents the bonded interactions. Individual interactions can be accessed using\n    NonBondedInteractions[i], where i is the bond id. Will return a bonded interaction \n    from bonded_interaction_classes";
static const char __pyx_k_Subclasses_of_NonBondedInteracti[] = "Subclasses of NonBondedInteraction must define the _get_params_from_es_core() method.";
static const char __pyx_k_Subt_Lj__get_params_from_es_core[] = "Subt_Lj._get_params_from_es_core";
static const char __pyx_k_TABULATED_has_to_be_defined_in_m[] = "TABULATED has to be defined in myconfig.hpp.";
static const char __pyx_k_Tabulated__get_params_from_es_co[] = "Tabulated._get_params_from_es_core";
static const char __pyx_k_Tabulated__set_params_in_es_core[] = "Tabulated._set_params_in_es_core";
static const char __pyx_k_The_bond_with_this_id_is_not_def[] = "The bond with this id is not defined as a ";
static const char __pyx_k_The_constructor_has_to_be_called[] = "The constructor has to be called either with two particle type ids (as interger), or with a set of keyword arguments describing a new interaction";
static const char __pyx_k_The_particle_types_have_to_be_of[] = "The particle types have to be of type integer.";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_Subclasses_of_BondedInteraction_2[] = "Subclasses of BondedInteraction must define the _set_params_in_es_core() method.";
static const char __pyx_k_Subclasses_of_BondedInteraction_3[] = "Subclasses of BondedInteraction must define the set_default_params() method.";
static const char __pyx_k_Subclasses_of_BondedInteraction_4[] = "Subclasses of BondedInteraction must define the type_number() method.";
static const char __pyx_k_Subclasses_of_BondedInteraction_5[] = "Subclasses of BondedInteraction must define the type_name() method.";
static const char __pyx_k_Subclasses_of_BondedInteraction_6[] = "Subclasses of BondedInteraction must define the valid_keys() method.";
static const char __pyx_k_Subclasses_of_BondedInteraction_7[] = "Subclasses of BondedInteraction must define the required_keys() method.";
static const char __pyx_k_BondedInteractionNotDefined_type_2[] = "BondedInteractionNotDefined.type_name";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static const char __pyx_k_Subclasses_of_NonBondedInteracti_2[] = "Subclasses of NonBondedInteraction must define the _set_params_in_es_core() method.";
static const char __pyx_k_Subclasses_of_NonBondedInteracti_3[] = "Subclasses of NonBondedInteraction must define the default_params() method.";
static const char __pyx_k_Subclasses_of_NonBondedInteracti_4[] = "Subclasses of NonBondedInteraction must define the is_active() method.";
static const char __pyx_k_Subclasses_of_NonBondedInteracti_5[] = "Subclasses of NonBondedInteraction must define the type_name() method.";
static const char __pyx_k_Subclasses_of_NonBondedInteracti_6[] = "Subclasses of NonBondedInteraction must define the valid_keys() method.";
static const char __pyx_k_Subclasses_of_NonBondedInteracti_7[] = "Subclasses of NonBondedInteraction must define the required_keys() method.";
static const char __pyx_k_The_constructor_has_to_be_called_2[] = "The constructor has to be called either with a bond id (as interger), or with a set of keyword arguments describing a new interaction";
static PyObject *__pyx_n_s_A01;
static PyObject *__pyx_n_s_A02;
static PyObject *__pyx_n_s_A0_g;
static PyObject *__pyx_n_s_Angle_Cosine;
static PyObject *__pyx_n_s_Angle_Cossquare;
static PyObject *__pyx_n_s_Angle_Harmonic;
static PyObject *__pyx_kp_s_At_least_the_following_keys_have;
static PyObject *__pyx_n_s_BOND_ANGLE;
static PyObject *__pyx_n_s_BOND_ENDANGLEDIST;
static PyObject *__pyx_n_s_BOND_VIRTUAL;
static PyObject *__pyx_n_s_BondedInteractionNotDefined;
static PyObject *__pyx_n_s_BondedInteractionNotDefined___in;
static PyObject *__pyx_n_s_BondedInteractionNotDefined__get;
static PyObject *__pyx_n_s_BondedInteractionNotDefined__set;
static PyObject *__pyx_n_s_BondedInteractionNotDefined_requ;
static PyObject *__pyx_n_s_BondedInteractionNotDefined_set;
static PyObject *__pyx_n_s_BondedInteractionNotDefined_type;
static PyObject *__pyx_n_s_BondedInteractionNotDefined_type_2;
static PyObject *__pyx_n_s_BondedInteractionNotDefined_vali;
static PyObject *__pyx_n_s_BondedInteractions;
static PyObject *__pyx_n_s_BondedInteractions___getitem;
static PyObject *__pyx_n_s_BondedInteractions___getstate;
static PyObject *__pyx_n_s_BondedInteractions___iter;
static PyObject *__pyx_n_s_BondedInteractions___setitem;
static PyObject *__pyx_n_s_BondedInteractions___setstate;
static PyObject *__pyx_n_s_BondedInteractions_add;
static PyObject *__pyx_kp_s_Could_not_set_Lennard_Jones_para;
static PyObject *__pyx_kp_s_Could_not_set_forcecap;
static PyObject *__pyx_n_s_DIHEDRAL;
static PyObject *__pyx_n_s_Dihedral;
static PyObject *__pyx_n_s_Dihedral__get_params_from_es_cor;
static PyObject *__pyx_n_s_Dihedral__set_params_in_es_core;
static PyObject *__pyx_n_s_Dihedral_required_keys;
static PyObject *__pyx_n_s_Dihedral_set_default_params;
static PyObject *__pyx_n_s_Dihedral_type_name;
static PyObject *__pyx_n_s_Dihedral_type_number;
static PyObject *__pyx_n_s_Dihedral_valid_keys;
static PyObject *__pyx_n_s_Endangledist;
static PyObject *__pyx_n_s_FENE;
static PyObject *__pyx_n_s_FeneBond;
static PyObject *__pyx_n_s_FeneBond___init;
static PyObject *__pyx_n_s_FeneBond__get_params_from_es_cor;
static PyObject *__pyx_n_s_FeneBond__set_params_in_es_core;
static PyObject *__pyx_n_s_FeneBond_required_keys;
static PyObject *__pyx_n_s_FeneBond_set_default_params;
static PyObject *__pyx_n_s_FeneBond_type_name;
static PyObject *__pyx_n_s_FeneBond_type_number;
static PyObject *__pyx_n_s_FeneBond_valid_keys;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_HARMONIC;
static PyObject *__pyx_n_s_HarmonicBond;
static PyObject *__pyx_n_s_HarmonicBond___init;
static PyObject *__pyx_n_s_HarmonicBond__get_params_from_es;
static PyObject *__pyx_n_s_HarmonicBond__set_params_in_es_c;
static PyObject *__pyx_n_s_HarmonicBond_required_keys;
static PyObject *__pyx_n_s_HarmonicBond_set_default_params;
static PyObject *__pyx_n_s_HarmonicBond_type_name;
static PyObject *__pyx_n_s_HarmonicBond_type_number;
static PyObject *__pyx_n_s_HarmonicBond_valid_keys;
static PyObject *__pyx_n_s_HarmonicDumbbellBond;
static PyObject *__pyx_kp_s_HarmonicDumbbellBond_ROTATION_ha;
static PyObject *__pyx_n_s_HarmonicDumbbellBond___init;
static PyObject *__pyx_n_s_HarmonicDumbbellBond__get_params;
static PyObject *__pyx_n_s_HarmonicDumbbellBond__set_params;
static PyObject *__pyx_n_s_HarmonicDumbbellBond_required_ke;
static PyObject *__pyx_n_s_HarmonicDumbbellBond_set_default;
static PyObject *__pyx_n_s_HarmonicDumbbellBond_type_name;
static PyObject *__pyx_n_s_HarmonicDumbbellBond_type_number;
static PyObject *__pyx_n_s_HarmonicDumbbellBond_valid_keys;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_Index_to_BondedInteractions_has;
static PyObject *__pyx_kp_s_Index_to_BondedInteractions_hast;
static PyObject *__pyx_n_s_LennardJones;
static PyObject *__pyx_kp_s_Lennard_Jones_cutoff_has_to_be_0;
static PyObject *__pyx_kp_s_Lennard_Jones_eps_has_to_be_0;
static PyObject *__pyx_kp_s_Lennard_Jones_sigma_has_to_be_0;
static PyObject *__pyx_n_s_NonBondedInteractionHandle;
static PyObject *__pyx_n_s_NonBondedInteractionHandle___ini;
static PyObject *__pyx_kp_s_NonBondedInteractions_expects_tw;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_OIF_GLOBAL_FORCES;
static PyObject *__pyx_n_s_OIF_LOCAL_FORCES;
static PyObject *__pyx_n_s_OVERLAPPED;
static PyObject *__pyx_n_s_Oif_Global_Forces;
static PyObject *__pyx_n_s_Oif_Global_Forces__get_params_fr;
static PyObject *__pyx_n_s_Oif_Global_Forces__set_params_in;
static PyObject *__pyx_n_s_Oif_Global_Forces_required_keys;
static PyObject *__pyx_n_s_Oif_Global_Forces_set_default_pa;
static PyObject *__pyx_n_s_Oif_Global_Forces_type_name;
static PyObject *__pyx_n_s_Oif_Global_Forces_type_number;
static PyObject *__pyx_n_s_Oif_Global_Forces_valid_keys;
static PyObject *__pyx_n_s_Oif_Local_Forces;
static PyObject *__pyx_n_s_Oif_Local_Forces__get_params_fro;
static PyObject *__pyx_n_s_Oif_Local_Forces__set_params_in;
static PyObject *__pyx_n_s_Oif_Local_Forces_required_keys;
static PyObject *__pyx_n_s_Oif_Local_Forces_set_default_par;
static PyObject *__pyx_n_s_Oif_Local_Forces_type_name;
static PyObject *__pyx_n_s_Oif_Local_Forces_type_number;
static PyObject *__pyx_n_s_Oif_Local_Forces_valid_keys;
static PyObject *__pyx_kp_s_Only_subclasses_of_BondedInterac;
static PyObject *__pyx_kp_s_Only_the_following_keys_are_supp;
static PyObject *__pyx_n_s_Overlapped;
static PyObject *__pyx_kp_s_Provides_access_to_all_Non_bonde;
static PyObject *__pyx_n_s_RIGID;
static PyObject *__pyx_kp_s_Represents_the_bonded_interactio;
static PyObject *__pyx_n_s_RigidBond;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_SUBT_LJ;
static PyObject *__pyx_kp_s_Subclasses_of_BondedInteraction;
static PyObject *__pyx_kp_s_Subclasses_of_BondedInteraction_2;
static PyObject *__pyx_kp_s_Subclasses_of_BondedInteraction_3;
static PyObject *__pyx_kp_s_Subclasses_of_BondedInteraction_4;
static PyObject *__pyx_kp_s_Subclasses_of_BondedInteraction_5;
static PyObject *__pyx_kp_s_Subclasses_of_BondedInteraction_6;
static PyObject *__pyx_kp_s_Subclasses_of_BondedInteraction_7;
static PyObject *__pyx_kp_s_Subclasses_of_NonBondedInteracti;
static PyObject *__pyx_kp_s_Subclasses_of_NonBondedInteracti_2;
static PyObject *__pyx_kp_s_Subclasses_of_NonBondedInteracti_3;
static PyObject *__pyx_kp_s_Subclasses_of_NonBondedInteracti_4;
static PyObject *__pyx_kp_s_Subclasses_of_NonBondedInteracti_5;
static PyObject *__pyx_kp_s_Subclasses_of_NonBondedInteracti_6;
static PyObject *__pyx_kp_s_Subclasses_of_NonBondedInteracti_7;
static PyObject *__pyx_n_s_Subt_Lj;
static PyObject *__pyx_n_s_Subt_Lj__get_params_from_es_core;
static PyObject *__pyx_n_s_Subt_Lj__set_params_in_es_core;
static PyObject *__pyx_n_s_Subt_Lj_required_keys;
static PyObject *__pyx_n_s_Subt_Lj_set_default_params;
static PyObject *__pyx_n_s_Subt_Lj_type_name;
static PyObject *__pyx_n_s_Subt_Lj_type_number;
static PyObject *__pyx_n_s_Subt_Lj_valid_keys;
static PyObject *__pyx_kp_s_TABULATED_has_to_be_defined_in_m;
static PyObject *__pyx_n_s_Tabulated;
static PyObject *__pyx_n_s_Tabulated__get_params_from_es_co;
static PyObject *__pyx_n_s_Tabulated__set_params_in_es_core;
static PyObject *__pyx_n_s_Tabulated_required_keys;
static PyObject *__pyx_n_s_Tabulated_set_default_params;
static PyObject *__pyx_n_s_Tabulated_type_name;
static PyObject *__pyx_n_s_Tabulated_type_number;
static PyObject *__pyx_n_s_Tabulated_valid_keys;
static PyObject *__pyx_kp_s_The_bond_with_this_id_is_not_def;
static PyObject *__pyx_kp_s_The_bonded_interaction_with_the;
static PyObject *__pyx_kp_s_The_constructor_has_to_be_called;
static PyObject *__pyx_kp_s_The_constructor_has_to_be_called_2;
static PyObject *__pyx_kp_s_The_particle_types_have_to_be_of;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Users_bindgens2_Documents_espre;
static PyObject *__pyx_n_s_V0;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_Virtual;
static PyObject *__pyx_kp_s__2;
static PyObject *__pyx_kp_s__3;
static PyObject *__pyx_kp_s__34;
static PyObject *__pyx_n_s__75;
static PyObject *__pyx_n_s_add;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_auto;
static PyObject *__pyx_n_s_bend;
static PyObject *__pyx_n_s_bond_class;
static PyObject *__pyx_n_s_bond_id;
static PyObject *__pyx_kp_s_bond_in_the_Espresso_core;
static PyObject *__pyx_n_s_bond_type;
static PyObject *__pyx_n_s_bonded_ia;
static PyObject *__pyx_n_s_bonded_instance;
static PyObject *__pyx_n_s_bonded_interaction_classes;
static PyObject *__pyx_n_s_call;
static PyObject *__pyx_n_s_cap;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_cutoff;
static PyObject *__pyx_n_s_d_r_max;
static PyObject *__pyx_n_s_default_params;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_epsilon;
static PyObject *__pyx_n_s_espressomd_interactions;
static PyObject *__pyx_n_s_force_cap;
static PyObject *__pyx_n_s_generic_lennard_jones;
static PyObject *__pyx_n_s_get_force_cap;
static PyObject *__pyx_n_s_get_params;
static PyObject *__pyx_n_s_get_params_from_es_core;
static PyObject *__pyx_n_s_getattribute;
static PyObject *__pyx_n_s_getattribute___locals_sync_par;
static PyObject *__pyx_n_s_getitem;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_inactive;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_is_active;
static PyObject *__pyx_kp_s_is_not_yet_defined;
static PyObject *__pyx_n_s_iter;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_kp_s_k_2;
static PyObject *__pyx_n_s_ka_g;
static PyObject *__pyx_n_s_kal;
static PyObject *__pyx_n_s_kb;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_s_ks;
static PyObject *__pyx_n_s_kslin;
static PyObject *__pyx_n_s_kv;
static PyObject *__pyx_n_s_kwargs;
static PyObject *__pyx_n_s_lennard_jones;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_min;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_mult;
static PyObject *__pyx_kp_s_mult_2;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_kp_s_not_compiled_into_Espresso_core;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_object;
static PyObject *__pyx_n_s_offset;
static PyObject *__pyx_kp_s_only_supported;
static PyObject *__pyx_n_s_params;
static PyObject *__pyx_n_s_params_2;
static PyObject *__pyx_n_s_phase;
static PyObject *__pyx_n_s_phi0;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_r0;
static PyObject *__pyx_n_s_r_0;
static PyObject *__pyx_n_s_r_cut;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_required_keys;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_kp_s_s_has_to_be_defined_in_myconfig;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_set_default_params;
static PyObject *__pyx_n_s_set_force_cap;
static PyObject *__pyx_n_s_set_params;
static PyObject *__pyx_n_s_set_params_in_es_core;
static PyObject *__pyx_n_s_setitem;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_shift;
static PyObject *__pyx_n_s_sigma;
static PyObject *__pyx_n_s_str;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_s_sync_params;
static PyObject *__pyx_n_s_tabulated;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_type1;
static PyObject *__pyx_n_s_type1_2;
static PyObject *__pyx_n_s_type2;
static PyObject *__pyx_n_s_type2_2;
static PyObject *__pyx_n_s_type_name;
static PyObject *__pyx_n_s_type_number;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_user_interactions;
static PyObject *__pyx_n_s_utils;
static PyObject *__pyx_n_s_valid_keys;
static PyObject *__pyx_n_s_validate_params;
static PyObject *__pyx_n_s_value;
static int __pyx_pf_10espressomd_12interactions_20NonBondedInteraction___init__(struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_2is_valid(struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_4get_params(struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_6__str__(struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_8set_params(struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self, PyObject *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_10validate_params(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_16__getattribute___sync_params(PyObject *__pyx_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_12__getattribute__(struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_14_get_params_from_es_core(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_16_set_params_in_es_core(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_18default_params(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_20is_active(struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_22type_name(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_24valid_keys(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_26required_keys(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_11_part_types___get__(struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self); /* proto */
static int __pyx_pf_10espressomd_12interactions_20NonBondedInteraction_11_part_types_2__set__(struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_10espressomd_12interactions_20NonBondedInteraction_11_part_types_4__del__(struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_23LennardJonesInteraction_validate_params(struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_23LennardJonesInteraction_2_get_params_from_es_core(struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_23LennardJonesInteraction_4is_active(struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_23LennardJonesInteraction_6set_params(struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_23LennardJonesInteraction_8_set_params_in_es_core(struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_23LennardJonesInteraction_10default_params(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_23LennardJonesInteraction_12type_name(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_23LennardJonesInteraction_14valid_keys(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_23LennardJonesInteraction_16required_keys(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_26NonBondedInteractionHandle___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v__type1, PyObject *__pyx_v__type2); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_21NonBondedInteractions___getitem__(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_NonBondedInteractions *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_21NonBondedInteractions_2set_force_cap(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_NonBondedInteractions *__pyx_v_self, PyObject *__pyx_v_cap); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_21NonBondedInteractions_4get_force_cap(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_NonBondedInteractions *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_21NonBondedInteractions_6__getstate__(struct __pyx_obj_10espressomd_12interactions_NonBondedInteractions *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_21NonBondedInteractions_8__setstate__(struct __pyx_obj_10espressomd_12interactions_NonBondedInteractions *__pyx_v_self, PyObject *__pyx_v_odict); /* proto */
static int __pyx_pf_10espressomd_12interactions_17BondedInteraction___init__(struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_2is_valid(struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_6params___get__(struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self); /* proto */
static int __pyx_pf_10espressomd_12interactions_17BondedInteraction_6params_2__set__(struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self, PyObject *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_4validate_params(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_16__getattribute___sync_params(PyObject *__pyx_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_6__getattribute__(struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_8_get_params_from_es_core(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_10_set_params_in_es_core(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_12__str__(struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_14set_default_params(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_16type_number(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_18type_name(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_20valid_keys(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_22required_keys(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_24__repr__(struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_26__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_27BondedInteractionNotDefined___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_27BondedInteractionNotDefined_2type_number(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_27BondedInteractionNotDefined_4type_name(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_27BondedInteractionNotDefined_6valid_keys(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_27BondedInteractionNotDefined_8required_keys(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_27BondedInteractionNotDefined_10set_default_params(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_27BondedInteractionNotDefined_12_get_params_from_es_core(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_27BondedInteractionNotDefined_14_set_params_in_es_core(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_8FeneBond___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_8FeneBond_2type_number(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_8FeneBond_4type_name(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_8FeneBond_6valid_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_8FeneBond_8required_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_8FeneBond_10set_default_params(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_8FeneBond_12_get_params_from_es_core(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_8FeneBond_14_set_params_in_es_core(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_12HarmonicBond___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_12HarmonicBond_2type_number(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_12HarmonicBond_4type_name(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_12HarmonicBond_6valid_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_12HarmonicBond_8required_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_12HarmonicBond_10set_default_params(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_12HarmonicBond_12_get_params_from_es_core(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_12HarmonicBond_14_set_params_in_es_core(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_20HarmonicDumbbellBond___init__(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_20HarmonicDumbbellBond_2type_number(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_20HarmonicDumbbellBond_4type_name(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_20HarmonicDumbbellBond_6valid_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_20HarmonicDumbbellBond_8required_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_20HarmonicDumbbellBond_10set_default_params(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_20HarmonicDumbbellBond_12_get_params_from_es_core(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_20HarmonicDumbbellBond_14_set_params_in_es_core(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_8Dihedral_type_number(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_8Dihedral_2type_name(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_8Dihedral_4valid_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_8Dihedral_6required_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_8Dihedral_8set_default_params(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_8Dihedral_10_get_params_from_es_core(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_8Dihedral_12_set_params_in_es_core(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_9Tabulated_type_number(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_9Tabulated_2type_name(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_9Tabulated_4valid_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_9Tabulated_6required_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_9Tabulated_8set_default_params(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_9Tabulated_10_get_params_from_es_core(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_9Tabulated_12_set_params_in_es_core(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_7Subt_Lj_type_number(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_7Subt_Lj_2type_name(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_7Subt_Lj_4valid_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_7Subt_Lj_6required_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_7Subt_Lj_8set_default_params(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_7Subt_Lj_10_get_params_from_es_core(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_7Subt_Lj_12_set_params_in_es_core(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_17Oif_Global_Forces_type_number(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_17Oif_Global_Forces_2type_name(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_17Oif_Global_Forces_4valid_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_17Oif_Global_Forces_6required_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_17Oif_Global_Forces_8set_default_params(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_17Oif_Global_Forces_10_get_params_from_es_core(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_17Oif_Global_Forces_12_set_params_in_es_core(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_16Oif_Local_Forces_type_number(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_16Oif_Local_Forces_2type_name(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_16Oif_Local_Forces_4valid_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_16Oif_Local_Forces_6required_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_16Oif_Local_Forces_8set_default_params(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_16Oif_Local_Forces_10_get_params_from_es_core(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_16Oif_Local_Forces_12_set_params_in_es_core(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_18BondedInteractions___getitem__(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_18BondedInteractions_2__setitem__(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_18BondedInteractions_4__iter__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_18BondedInteractions_7add(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_bonded_ia); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_18BondedInteractions_9__getstate__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_12interactions_18BondedInteractions_11__setstate__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_params); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_10espressomd_12interactions_NonBondedInteraction(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10espressomd_12interactions_LennardJonesInteraction(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10espressomd_12interactions_NonBondedInteractions(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10espressomd_12interactions_BondedInteraction(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10espressomd_12interactions___pyx_scope_struct____getattribute__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10espressomd_12interactions___pyx_scope_struct_1___getattribute__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10espressomd_12interactions___pyx_scope_struct_2___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_keys = {0, &__pyx_n_s_keys, 0, 0, 0};
static PyObject *__pyx_float_0_;
static PyObject *__pyx_float_1_;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_6;
static PyObject *__pyx_int_12;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_codeobj__5;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_tuple__110;
static PyObject *__pyx_tuple__112;
static PyObject *__pyx_tuple__114;
static PyObject *__pyx_tuple__116;
static PyObject *__pyx_tuple__118;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_tuple__124;
static PyObject *__pyx_tuple__126;
static PyObject *__pyx_tuple__128;
static PyObject *__pyx_tuple__130;
static PyObject *__pyx_tuple__132;
static PyObject *__pyx_tuple__134;
static PyObject *__pyx_tuple__136;
static PyObject *__pyx_tuple__138;
static PyObject *__pyx_tuple__140;
static PyObject *__pyx_tuple__142;
static PyObject *__pyx_tuple__144;
static PyObject *__pyx_tuple__146;
static PyObject *__pyx_tuple__148;
static PyObject *__pyx_tuple__150;
static PyObject *__pyx_tuple__152;
static PyObject *__pyx_tuple__154;
static PyObject *__pyx_tuple__156;
static PyObject *__pyx_tuple__158;
static PyObject *__pyx_tuple__160;
static PyObject *__pyx_tuple__162;
static PyObject *__pyx_tuple__164;
static PyObject *__pyx_tuple__166;
static PyObject *__pyx_tuple__168;
static PyObject *__pyx_tuple__170;
static PyObject *__pyx_tuple__172;
static PyObject *__pyx_tuple__174;
static PyObject *__pyx_tuple__176;
static PyObject *__pyx_tuple__178;
static PyObject *__pyx_tuple__180;
static PyObject *__pyx_tuple__182;
static PyObject *__pyx_tuple__184;
static PyObject *__pyx_tuple__186;
static PyObject *__pyx_tuple__188;
static PyObject *__pyx_tuple__190;
static PyObject *__pyx_tuple__192;
static PyObject *__pyx_tuple__194;
static PyObject *__pyx_tuple__196;
static PyObject *__pyx_tuple__198;
static PyObject *__pyx_tuple__200;
static PyObject *__pyx_tuple__202;
static PyObject *__pyx_tuple__204;
static PyObject *__pyx_tuple__206;
static PyObject *__pyx_tuple__208;
static PyObject *__pyx_tuple__210;
static PyObject *__pyx_tuple__212;
static PyObject *__pyx_tuple__214;
static PyObject *__pyx_tuple__216;
static PyObject *__pyx_tuple__218;
static PyObject *__pyx_tuple__220;
static PyObject *__pyx_tuple__222;
static PyObject *__pyx_codeobj__26;
static PyObject *__pyx_codeobj__77;
static PyObject *__pyx_codeobj__79;
static PyObject *__pyx_codeobj__81;
static PyObject *__pyx_codeobj__83;
static PyObject *__pyx_codeobj__85;
static PyObject *__pyx_codeobj__87;
static PyObject *__pyx_codeobj__89;
static PyObject *__pyx_codeobj__91;
static PyObject *__pyx_codeobj__93;
static PyObject *__pyx_codeobj__95;
static PyObject *__pyx_codeobj__97;
static PyObject *__pyx_codeobj__99;
static PyObject *__pyx_codeobj__101;
static PyObject *__pyx_codeobj__103;
static PyObject *__pyx_codeobj__105;
static PyObject *__pyx_codeobj__107;
static PyObject *__pyx_codeobj__109;
static PyObject *__pyx_codeobj__111;
static PyObject *__pyx_codeobj__113;
static PyObject *__pyx_codeobj__115;
static PyObject *__pyx_codeobj__117;
static PyObject *__pyx_codeobj__119;
static PyObject *__pyx_codeobj__121;
static PyObject *__pyx_codeobj__123;
static PyObject *__pyx_codeobj__125;
static PyObject *__pyx_codeobj__127;
static PyObject *__pyx_codeobj__129;
static PyObject *__pyx_codeobj__131;
static PyObject *__pyx_codeobj__133;
static PyObject *__pyx_codeobj__135;
static PyObject *__pyx_codeobj__137;
static PyObject *__pyx_codeobj__139;
static PyObject *__pyx_codeobj__141;
static PyObject *__pyx_codeobj__143;
static PyObject *__pyx_codeobj__145;
static PyObject *__pyx_codeobj__147;
static PyObject *__pyx_codeobj__149;
static PyObject *__pyx_codeobj__151;
static PyObject *__pyx_codeobj__153;
static PyObject *__pyx_codeobj__155;
static PyObject *__pyx_codeobj__157;
static PyObject *__pyx_codeobj__159;
static PyObject *__pyx_codeobj__161;
static PyObject *__pyx_codeobj__163;
static PyObject *__pyx_codeobj__165;
static PyObject *__pyx_codeobj__167;
static PyObject *__pyx_codeobj__169;
static PyObject *__pyx_codeobj__171;
static PyObject *__pyx_codeobj__173;
static PyObject *__pyx_codeobj__175;
static PyObject *__pyx_codeobj__177;
static PyObject *__pyx_codeobj__179;
static PyObject *__pyx_codeobj__181;
static PyObject *__pyx_codeobj__183;
static PyObject *__pyx_codeobj__185;
static PyObject *__pyx_codeobj__187;
static PyObject *__pyx_codeobj__189;
static PyObject *__pyx_codeobj__191;
static PyObject *__pyx_codeobj__193;
static PyObject *__pyx_codeobj__195;
static PyObject *__pyx_codeobj__197;
static PyObject *__pyx_codeobj__199;
static PyObject *__pyx_codeobj__201;
static PyObject *__pyx_codeobj__203;
static PyObject *__pyx_codeobj__205;
static PyObject *__pyx_codeobj__207;
static PyObject *__pyx_codeobj__209;
static PyObject *__pyx_codeobj__211;
static PyObject *__pyx_codeobj__213;
static PyObject *__pyx_codeobj__215;
static PyObject *__pyx_codeobj__217;
static PyObject *__pyx_codeobj__219;
static PyObject *__pyx_codeobj__221;
static PyObject *__pyx_codeobj__223;

/* "espressomd/interactions.pyx":33
 *     user_interactions = {}
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         """Represents an instance of a non-bonded interaction, such as lennard jones
 *         Either called with two particle type id, in which case, the interaction
 */

/* Python wrapper */
static int __pyx_pw_10espressomd_12interactions_20NonBondedInteraction_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10espressomd_12interactions_20NonBondedInteraction___init__[] = "Represents an instance of a non-bonded interaction, such as lennard jones\n        Either called with two particle type id, in which case, the interaction\n        will represent the bonded interaction as it is defined in Espresso core\n        Or called with keyword arguments describing a new interaction.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_10espressomd_12interactions_20NonBondedInteraction___init__;
#endif
static int __pyx_pw_10espressomd_12interactions_20NonBondedInteraction_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_10espressomd_12interactions_20NonBondedInteraction___init__(((struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10espressomd_12interactions_20NonBondedInteraction___init__(struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v_k = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "espressomd/interactions.pyx":40
 * 
 *         # Interaction id as argument
 *         if len(args) == 2 and isinstance(args[0], int) and isinstance(args[1], int):             # <<<<<<<<<<<<<<
 *             self._part_types = args
 * 
 */
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 == 2) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyInt_Check(__pyx_t_4); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = (__pyx_t_3 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyInt_Check(__pyx_t_4); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__pyx_t_5 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "espressomd/interactions.pyx":41
 *         # Interaction id as argument
 *         if len(args) == 2 and isinstance(args[0], int) and isinstance(args[1], int):
 *             self._part_types = args             # <<<<<<<<<<<<<<
 * 
 *             # Load the parameters currently set in the Espresso core
 */
    __Pyx_INCREF(__pyx_v_args);
    __Pyx_GIVEREF(__pyx_v_args);
    __Pyx_GOTREF(__pyx_v_self->_part_types);
    __Pyx_DECREF(__pyx_v_self->_part_types);
    __pyx_v_self->_part_types = __pyx_v_args;

    /* "espressomd/interactions.pyx":44
 * 
 *             # Load the parameters currently set in the Espresso core
 *             self._params = self._get_params_from_es_core()             # <<<<<<<<<<<<<<
 * 
 *         # Or have we been called with keyword args describing the interaction
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_params_from_es_core); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 44, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_7) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 44, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 44, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_self->_params);
    __Pyx_DECREF(__pyx_v_self->_params);
    __pyx_v_self->_params = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "espressomd/interactions.pyx":40
 * 
 *         # Interaction id as argument
 *         if len(args) == 2 and isinstance(args[0], int) and isinstance(args[1], int):             # <<<<<<<<<<<<<<
 *             self._part_types = args
 * 
 */
    goto __pyx_L3;
  }

  /* "espressomd/interactions.pyx":47
 * 
 *         # Or have we been called with keyword args describing the interaction
 *         elif len(args) == 0:             # <<<<<<<<<<<<<<
 *             # Initialize default values
 *             self._params = self.default_params()
 */
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 47, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_t_2 == 0) != 0);
  if (__pyx_t_1) {

    /* "espressomd/interactions.pyx":49
 *         elif len(args) == 0:
 *             # Initialize default values
 *             self._params = self.default_params()             # <<<<<<<<<<<<<<
 *             self._part_types = [-1, -1]
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_default_params); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_7) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 49, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 49, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_self->_params);
    __Pyx_DECREF(__pyx_v_self->_params);
    __pyx_v_self->_params = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "espressomd/interactions.pyx":50
 *             # Initialize default values
 *             self._params = self.default_params()
 *             self._part_types = [-1, -1]             # <<<<<<<<<<<<<<
 * 
 *             # Check if all required keys are given
 */
    __pyx_t_4 = PyList_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_int_neg_1);
    __Pyx_GIVEREF(__pyx_int_neg_1);
    PyList_SET_ITEM(__pyx_t_4, 0, __pyx_int_neg_1);
    __Pyx_INCREF(__pyx_int_neg_1);
    __Pyx_GIVEREF(__pyx_int_neg_1);
    PyList_SET_ITEM(__pyx_t_4, 1, __pyx_int_neg_1);
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_self->_part_types);
    __Pyx_DECREF(__pyx_v_self->_part_types);
    __pyx_v_self->_part_types = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "espressomd/interactions.pyx":53
 * 
 *             # Check if all required keys are given
 *             for k in self.required_keys():             # <<<<<<<<<<<<<<
 *                 if k not in kwargs:
 *                     raise ValueError(
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_required_keys); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_7) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 53, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 53, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_6 = __pyx_t_4; __Pyx_INCREF(__pyx_t_6); __pyx_t_2 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_2 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 53, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 53, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_6))) {
          if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 53, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 53, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 53, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 53, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_8(__pyx_t_6);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 53, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "espressomd/interactions.pyx":54
 *             # Check if all required keys are given
 *             for k in self.required_keys():
 *                 if k not in kwargs:             # <<<<<<<<<<<<<<
 *                     raise ValueError(
 *                         "At least the following keys have to be given as keyword arguments: " + self.required_keys().__str__())
 */
      __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_k, __pyx_v_kwargs, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 54, __pyx_L1_error)
      __pyx_t_3 = (__pyx_t_1 != 0);
      if (__pyx_t_3) {

        /* "espressomd/interactions.pyx":56
 *                 if k not in kwargs:
 *                     raise ValueError(
 *                         "At least the following keys have to be given as keyword arguments: " + self.required_keys().__str__())             # <<<<<<<<<<<<<<
 * 
 *             self._params.update(kwargs)
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_required_keys); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 56, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        if (__pyx_t_10) {
          __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 56, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else {
          __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 56, __pyx_L1_error)
        }
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_str); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 56, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        if (__pyx_t_7) {
          __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 56, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else {
          __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 56, __pyx_L1_error)
        }
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = PyNumber_Add(__pyx_kp_s_At_least_the_following_keys_have, __pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 56, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "espressomd/interactions.pyx":55
 *             for k in self.required_keys():
 *                 if k not in kwargs:
 *                     raise ValueError(             # <<<<<<<<<<<<<<
 *                         "At least the following keys have to be given as keyword arguments: " + self.required_keys().__str__())
 * 
 */
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 55, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_9);
        __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 55, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_9, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __PYX_ERR(0, 55, __pyx_L1_error)

        /* "espressomd/interactions.pyx":54
 *             # Check if all required keys are given
 *             for k in self.required_keys():
 *                 if k not in kwargs:             # <<<<<<<<<<<<<<
 *                     raise ValueError(
 *                         "At least the following keys have to be given as keyword arguments: " + self.required_keys().__str__())
 */
      }

      /* "espressomd/interactions.pyx":53
 * 
 *             # Check if all required keys are given
 *             for k in self.required_keys():             # <<<<<<<<<<<<<<
 *                 if k not in kwargs:
 *                     raise ValueError(
 */
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "espressomd/interactions.pyx":58
 *                         "At least the following keys have to be given as keyword arguments: " + self.required_keys().__str__())
 * 
 *             self._params.update(kwargs)             # <<<<<<<<<<<<<<
 * 
 *             # Validation of parameters
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_params, __pyx_n_s_update); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_kwargs); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 58, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_kwargs};
        __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 58, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_6);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_kwargs};
        __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 58, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_6);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 58, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_kwargs);
        __Pyx_GIVEREF(__pyx_v_kwargs);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_kwargs);
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 58, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "espressomd/interactions.pyx":61
 * 
 *             # Validation of parameters
 *             self.validate_params()             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_validate_params); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (__pyx_t_7) {
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 61, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 61, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "espressomd/interactions.pyx":47
 * 
 *         # Or have we been called with keyword args describing the interaction
 *         elif len(args) == 0:             # <<<<<<<<<<<<<<
 *             # Initialize default values
 *             self._params = self.default_params()
 */
    goto __pyx_L3;
  }

  /* "espressomd/interactions.pyx":64
 * 
 *         else:
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 "The constructor has to be called either with two particle type ids (as interger), or with a set of keyword arguments describing a new interaction")
 * 
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple_, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 64, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "espressomd/interactions.pyx":33
 *     user_interactions = {}
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         """Represents an instance of a non-bonded interaction, such as lennard jones
 *         Either called with two particle type id, in which case, the interaction
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("espressomd.interactions.NonBondedInteraction.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":67
 *                 "The constructor has to be called either with two particle type ids (as interger), or with a set of keyword arguments describing a new interaction")
 * 
 *     def is_valid(self):             # <<<<<<<<<<<<<<
 *         """Check, if the data stored in the instance still matches what is in Espresso"""
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_3is_valid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_20NonBondedInteraction_2is_valid[] = "NonBondedInteraction.is_valid(self)\nCheck, if the data stored in the instance still matches what is in Espresso";
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_3is_valid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_valid (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_20NonBondedInteraction_2is_valid(((struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_2is_valid(struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self) {
  PyObject *__pyx_v_temp_params = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("is_valid", 0);

  /* "espressomd/interactions.pyx":72
 *         # check, if the bond parameters saved in the class still match those
 *         # saved in Espresso
 *         temp_params = self._get_params_from_es_core()             # <<<<<<<<<<<<<<
 *         if self._params != temp_params:
 *             return False
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_params_from_es_core); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_temp_params = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":73
 *         # saved in Espresso
 *         temp_params = self._get_params_from_es_core()
 *         if self._params != temp_params:             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_self->_params, __pyx_v_temp_params, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "espressomd/interactions.pyx":74
 *         temp_params = self._get_params_from_es_core()
 *         if self._params != temp_params:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *         # If we're still here, the instance is valid
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "espressomd/interactions.pyx":73
 *         # saved in Espresso
 *         temp_params = self._get_params_from_es_core()
 *         if self._params != temp_params:             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
  }

  /* "espressomd/interactions.pyx":77
 * 
 *         # If we're still here, the instance is valid
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     def get_params(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_True);
  __pyx_r = Py_True;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":67
 *                 "The constructor has to be called either with two particle type ids (as interger), or with a set of keyword arguments describing a new interaction")
 * 
 *     def is_valid(self):             # <<<<<<<<<<<<<<
 *         """Check, if the data stored in the instance still matches what is in Espresso"""
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("espressomd.interactions.NonBondedInteraction.is_valid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_temp_params);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":79
 *         return True
 * 
 *     def get_params(self):             # <<<<<<<<<<<<<<
 *         """Get interaction parameters"""
 *         # If this instance refers to an actual interaction defined in the es core, load
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_5get_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_20NonBondedInteraction_4get_params[] = "NonBondedInteraction.get_params(self)\nGet interaction parameters";
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_5get_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_params (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_20NonBondedInteraction_4get_params(((struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_4get_params(struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("get_params", 0);

  /* "espressomd/interactions.pyx":83
 *         # If this instance refers to an actual interaction defined in the es core, load
 *         # current parameters from there
 *         if self._part_types[0] >= 0 and self._part_types[1] >= 0:             # <<<<<<<<<<<<<<
 *             self._params = self._get_params_from_es_core()
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_self->_part_types, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_int_0, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_self->_part_types, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_int_0, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "espressomd/interactions.pyx":84
 *         # current parameters from there
 *         if self._part_types[0] >= 0 and self._part_types[1] >= 0:
 *             self._params = self._get_params_from_es_core()             # <<<<<<<<<<<<<<
 * 
 *         return self._params
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_params_from_es_core); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->_params);
    __Pyx_DECREF(__pyx_v_self->_params);
    __pyx_v_self->_params = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "espressomd/interactions.pyx":83
 *         # If this instance refers to an actual interaction defined in the es core, load
 *         # current parameters from there
 *         if self._part_types[0] >= 0 and self._part_types[1] >= 0:             # <<<<<<<<<<<<<<
 *             self._params = self._get_params_from_es_core()
 * 
 */
  }

  /* "espressomd/interactions.pyx":86
 *             self._params = self._get_params_from_es_core()
 * 
 *         return self._params             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_params);
  __pyx_r = __pyx_v_self->_params;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":79
 *         return True
 * 
 *     def get_params(self):             # <<<<<<<<<<<<<<
 *         """Get interaction parameters"""
 *         # If this instance refers to an actual interaction defined in the es core, load
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("espressomd.interactions.NonBondedInteraction.get_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":88
 *         return self._params
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self.__class__.__name__ + "(" + str(self.get_params()) + ")"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_7__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_7__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_20NonBondedInteraction_6__str__(((struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_6__str__(struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "espressomd/interactions.pyx":89
 * 
 *     def __str__(self):
 *         return self.__class__.__name__ + "(" + str(self.get_params()) + ")"             # <<<<<<<<<<<<<<
 * 
 *     def set_params(self, **p):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_s__2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_params); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 89, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":88
 *         return self._params
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self.__class__.__name__ + "(" + str(self.get_params()) + ")"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("espressomd.interactions.NonBondedInteraction.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":91
 *         return self.__class__.__name__ + "(" + str(self.get_params()) + ")"
 * 
 *     def set_params(self, **p):             # <<<<<<<<<<<<<<
 *         """Update parameters. Only given """
 *         # Check, if any key was passed, which is not known
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_9set_params(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10espressomd_12interactions_20NonBondedInteraction_8set_params[] = "NonBondedInteraction.set_params(self, **p)\nUpdate parameters. Only given ";
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_9set_params(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_p = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_params (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("set_params", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_params", 1))) return NULL;
  __pyx_v_p = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_p)) return NULL;
  __Pyx_GOTREF(__pyx_v_p);
  __pyx_r = __pyx_pf_10espressomd_12interactions_20NonBondedInteraction_8set_params(((struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *)__pyx_v_self), __pyx_v_p);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_8set_params(struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self, PyObject *__pyx_v_p) {
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_new_params = NULL;
  PyObject *__pyx_v_p_key = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("set_params", 0);

  /* "espressomd/interactions.pyx":94
 *         """Update parameters. Only given """
 *         # Check, if any key was passed, which is not known
 *         for k in p.keys():             # <<<<<<<<<<<<<<
 *             if k not in self.valid_keys():
 *                 raise ValueError(
 */
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_v_p); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 94, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 94, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 94, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 94, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 94, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 94, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "espressomd/interactions.pyx":95
 *         # Check, if any key was passed, which is not known
 *         for k in p.keys():
 *             if k not in self.valid_keys():             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     "Only the following keys are supported: " + self.valid_keys().__str__())
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_valid_keys); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_v_k, __pyx_t_1, Py_NE)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = (__pyx_t_7 != 0);
    if (__pyx_t_8) {

      /* "espressomd/interactions.pyx":97
 *             if k not in self.valid_keys():
 *                 raise ValueError(
 *                     "Only the following keys are supported: " + self.valid_keys().__str__())             # <<<<<<<<<<<<<<
 * 
 *         # When an interaction is newly activated, all required keys must be
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_valid_keys); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 97, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      if (__pyx_t_9) {
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 97, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 97, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_str); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 97, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      if (__pyx_t_5) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else {
        __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_Add(__pyx_kp_s_Only_the_following_keys_are_supp, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 97, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "espressomd/interactions.pyx":96
 *         for k in p.keys():
 *             if k not in self.valid_keys():
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     "Only the following keys are supported: " + self.valid_keys().__str__())
 * 
 */
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 96, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 96, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(0, 96, __pyx_L1_error)

      /* "espressomd/interactions.pyx":95
 *         # Check, if any key was passed, which is not known
 *         for k in p.keys():
 *             if k not in self.valid_keys():             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     "Only the following keys are supported: " + self.valid_keys().__str__())
 */
    }

    /* "espressomd/interactions.pyx":94
 *         """Update parameters. Only given """
 *         # Check, if any key was passed, which is not known
 *         for k in p.keys():             # <<<<<<<<<<<<<<
 *             if k not in self.valid_keys():
 *                 raise ValueError(
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":101
 *         # When an interaction is newly activated, all required keys must be
 *         # given
 *         if not self.is_active():             # <<<<<<<<<<<<<<
 *             for k in self.required_keys():
 *                 if k not in p:
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_active); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 101, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 101, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = ((!__pyx_t_8) != 0);
  if (__pyx_t_7) {

    /* "espressomd/interactions.pyx":102
 *         # given
 *         if not self.is_active():
 *             for k in self.required_keys():             # <<<<<<<<<<<<<<
 *                 if k not in p:
 *                     raise ValueError(
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_required_keys); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_1) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_6 = __pyx_t_2; __Pyx_INCREF(__pyx_t_6); __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 102, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_6))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 102, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_6, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 102, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_6, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_4(__pyx_t_6);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 102, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "espressomd/interactions.pyx":103
 *         if not self.is_active():
 *             for k in self.required_keys():
 *                 if k not in p:             # <<<<<<<<<<<<<<
 *                     raise ValueError(
 *                         "At least the following keys have to be given as keyword arguments: " + self.required_keys().__str__())
 */
      __pyx_t_7 = (__Pyx_PyDict_ContainsTF(__pyx_v_k, __pyx_v_p, Py_NE)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 103, __pyx_L1_error)
      __pyx_t_8 = (__pyx_t_7 != 0);
      if (__pyx_t_8) {

        /* "espressomd/interactions.pyx":105
 *                 if k not in p:
 *                     raise ValueError(
 *                         "At least the following keys have to be given as keyword arguments: " + self.required_keys().__str__())             # <<<<<<<<<<<<<<
 * 
 *         # If this instance refers to an interaction defined in the espresso core,
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_required_keys); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 105, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        if (__pyx_t_9) {
          __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        } else {
          __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
        }
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_str); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 105, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        if (__pyx_t_1) {
          __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        } else {
          __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
        }
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyNumber_Add(__pyx_kp_s_At_least_the_following_keys_have, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 105, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "espressomd/interactions.pyx":104
 *             for k in self.required_keys():
 *                 if k not in p:
 *                     raise ValueError(             # <<<<<<<<<<<<<<
 *                         "At least the following keys have to be given as keyword arguments: " + self.required_keys().__str__())
 * 
 */
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 104, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_Raise(__pyx_t_5, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __PYX_ERR(0, 104, __pyx_L1_error)

        /* "espressomd/interactions.pyx":103
 *         if not self.is_active():
 *             for k in self.required_keys():
 *                 if k not in p:             # <<<<<<<<<<<<<<
 *                     raise ValueError(
 *                         "At least the following keys have to be given as keyword arguments: " + self.required_keys().__str__())
 */
      }

      /* "espressomd/interactions.pyx":102
 *         # given
 *         if not self.is_active():
 *             for k in self.required_keys():             # <<<<<<<<<<<<<<
 *                 if k not in p:
 *                     raise ValueError(
 */
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "espressomd/interactions.pyx":101
 *         # When an interaction is newly activated, all required keys must be
 *         # given
 *         if not self.is_active():             # <<<<<<<<<<<<<<
 *             for k in self.required_keys():
 *                 if k not in p:
 */
  }

  /* "espressomd/interactions.pyx":110
 *         # load the parameters from there
 * 
 *         if self._part_types[0] >= 0 and self._part_types[1] >= 0:             # <<<<<<<<<<<<<<
 *             self._params = self._get_params_from_es_core()
 * 
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_self->_part_types, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_6, __pyx_int_0, Py_GE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_7) {
  } else {
    __pyx_t_8 = __pyx_t_7;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_self->_part_types, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_5, __pyx_int_0, Py_GE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_8 = __pyx_t_7;
  __pyx_L11_bool_binop_done:;
  if (__pyx_t_8) {

    /* "espressomd/interactions.pyx":111
 * 
 *         if self._part_types[0] >= 0 and self._part_types[1] >= 0:
 *             self._params = self._get_params_from_es_core()             # <<<<<<<<<<<<<<
 * 
 *         # Put in values given by the user
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_params_from_es_core); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_2) {
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 111, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 111, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->_params);
    __Pyx_DECREF(__pyx_v_self->_params);
    __pyx_v_self->_params = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "espressomd/interactions.pyx":110
 *         # load the parameters from there
 * 
 *         if self._part_types[0] >= 0 and self._part_types[1] >= 0:             # <<<<<<<<<<<<<<
 *             self._params = self._get_params_from_es_core()
 * 
 */
  }

  /* "espressomd/interactions.pyx":114
 * 
 *         # Put in values given by the user
 *         self._params.update(p)             # <<<<<<<<<<<<<<
 * 
 *         if self._part_types[0] >= 0 and self._part_types[1] >= 0:
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_params, __pyx_n_s_update); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_p};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 114, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_p};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 114, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 114, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_INCREF(__pyx_v_p);
      __Pyx_GIVEREF(__pyx_v_p);
      PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_v_p);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 114, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "espressomd/interactions.pyx":116
 *         self._params.update(p)
 * 
 *         if self._part_types[0] >= 0 and self._part_types[1] >= 0:             # <<<<<<<<<<<<<<
 *             self._set_params_in_es_core()
 * 
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_self->_part_types, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_6, __pyx_int_0, Py_GE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_7) {
  } else {
    __pyx_t_8 = __pyx_t_7;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_self->_part_types, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_5, __pyx_int_0, Py_GE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_8 = __pyx_t_7;
  __pyx_L14_bool_binop_done:;
  if (__pyx_t_8) {

    /* "espressomd/interactions.pyx":117
 * 
 *         if self._part_types[0] >= 0 and self._part_types[1] >= 0:
 *             self._set_params_in_es_core()             # <<<<<<<<<<<<<<
 * 
 *         # update interaction dict when user sets interaction
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_params_in_es_core); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_1) {
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 117, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "espressomd/interactions.pyx":116
 *         self._params.update(p)
 * 
 *         if self._part_types[0] >= 0 and self._part_types[1] >= 0:             # <<<<<<<<<<<<<<
 *             self._set_params_in_es_core()
 * 
 */
  }

  /* "espressomd/interactions.pyx":120
 * 
 *         # update interaction dict when user sets interaction
 *         if self._part_types[0] not in self.user_interactions:             # <<<<<<<<<<<<<<
 *             self.user_interactions[self._part_types[0]] = {}
 *         self.user_interactions[self._part_types[0]][self._part_types[1]] = {}
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_self->_part_types, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_user_interactions); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = (__Pyx_PySequence_ContainsTF(__pyx_t_6, __pyx_t_5, Py_NE)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = (__pyx_t_8 != 0);
  if (__pyx_t_7) {

    /* "espressomd/interactions.pyx":121
 *         # update interaction dict when user sets interaction
 *         if self._part_types[0] not in self.user_interactions:
 *             self.user_interactions[self._part_types[0]] = {}             # <<<<<<<<<<<<<<
 *         self.user_interactions[self._part_types[0]][self._part_types[1]] = {}
 *         new_params = self.get_params()
 */
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_user_interactions); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->_part_types, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyObject_SetItem(__pyx_t_6, __pyx_t_1, __pyx_t_5) < 0)) __PYX_ERR(0, 121, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "espressomd/interactions.pyx":120
 * 
 *         # update interaction dict when user sets interaction
 *         if self._part_types[0] not in self.user_interactions:             # <<<<<<<<<<<<<<
 *             self.user_interactions[self._part_types[0]] = {}
 *         self.user_interactions[self._part_types[0]][self._part_types[1]] = {}
 */
  }

  /* "espressomd/interactions.pyx":122
 *         if self._part_types[0] not in self.user_interactions:
 *             self.user_interactions[self._part_types[0]] = {}
 *         self.user_interactions[self._part_types[0]][self._part_types[1]] = {}             # <<<<<<<<<<<<<<
 *         new_params = self.get_params()
 *         for p_key in new_params:
 */
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_user_interactions); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_self->_part_types, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_self->_part_types, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (unlikely(PyObject_SetItem(__pyx_t_2, __pyx_t_6, __pyx_t_5) < 0)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":123
 *             self.user_interactions[self._part_types[0]] = {}
 *         self.user_interactions[self._part_types[0]][self._part_types[1]] = {}
 *         new_params = self.get_params()             # <<<<<<<<<<<<<<
 *         for p_key in new_params:
 *             self.user_interactions[self._part_types[0]][
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_params); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 123, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 123, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_new_params = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":124
 *         self.user_interactions[self._part_types[0]][self._part_types[1]] = {}
 *         new_params = self.get_params()
 *         for p_key in new_params:             # <<<<<<<<<<<<<<
 *             self.user_interactions[self._part_types[0]][
 *                 self._part_types[1]][p_key] = new_params[p_key]
 */
  if (likely(PyList_CheckExact(__pyx_v_new_params)) || PyTuple_CheckExact(__pyx_v_new_params)) {
    __pyx_t_5 = __pyx_v_new_params; __Pyx_INCREF(__pyx_t_5); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_new_params); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 124, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_3); __Pyx_INCREF(__pyx_t_6); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 124, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 124, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_3); __Pyx_INCREF(__pyx_t_6); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 124, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 124, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_4(__pyx_t_5);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 124, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF_SET(__pyx_v_p_key, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "espressomd/interactions.pyx":126
 *         for p_key in new_params:
 *             self.user_interactions[self._part_types[0]][
 *                 self._part_types[1]][p_key] = new_params[p_key]             # <<<<<<<<<<<<<<
 *         self.user_interactions[self._part_types[0]][
 *             self._part_types[1]]['type_name'] = self.type_name()
 */
    __pyx_t_6 = PyObject_GetItem(__pyx_v_new_params, __pyx_v_p_key); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);

    /* "espressomd/interactions.pyx":125
 *         new_params = self.get_params()
 *         for p_key in new_params:
 *             self.user_interactions[self._part_types[0]][             # <<<<<<<<<<<<<<
 *                 self._part_types[1]][p_key] = new_params[p_key]
 *         self.user_interactions[self._part_types[0]][
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_user_interactions); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->_part_types, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = PyObject_GetItem(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "espressomd/interactions.pyx":126
 *         for p_key in new_params:
 *             self.user_interactions[self._part_types[0]][
 *                 self._part_types[1]][p_key] = new_params[p_key]             # <<<<<<<<<<<<<<
 *         self.user_interactions[self._part_types[0]][
 *             self._part_types[1]]['type_name'] = self.type_name()
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->_part_types, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "espressomd/interactions.pyx":125
 *         new_params = self.get_params()
 *         for p_key in new_params:
 *             self.user_interactions[self._part_types[0]][             # <<<<<<<<<<<<<<
 *                 self._part_types[1]][p_key] = new_params[p_key]
 *         self.user_interactions[self._part_types[0]][
 */
    __pyx_t_2 = PyObject_GetItem(__pyx_t_9, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "espressomd/interactions.pyx":126
 *         for p_key in new_params:
 *             self.user_interactions[self._part_types[0]][
 *                 self._part_types[1]][p_key] = new_params[p_key]             # <<<<<<<<<<<<<<
 *         self.user_interactions[self._part_types[0]][
 *             self._part_types[1]]['type_name'] = self.type_name()
 */
    if (unlikely(PyObject_SetItem(__pyx_t_2, __pyx_v_p_key, __pyx_t_6) < 0)) __PYX_ERR(0, 126, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "espressomd/interactions.pyx":124
 *         self.user_interactions[self._part_types[0]][self._part_types[1]] = {}
 *         new_params = self.get_params()
 *         for p_key in new_params:             # <<<<<<<<<<<<<<
 *             self.user_interactions[self._part_types[0]][
 *                 self._part_types[1]][p_key] = new_params[p_key]
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":128
 *                 self._part_types[1]][p_key] = new_params[p_key]
 *         self.user_interactions[self._part_types[0]][
 *             self._part_types[1]]['type_name'] = self.type_name()             # <<<<<<<<<<<<<<
 * 
 *     def validate_params(self):
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_type_name); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 128, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "espressomd/interactions.pyx":127
 *             self.user_interactions[self._part_types[0]][
 *                 self._part_types[1]][p_key] = new_params[p_key]
 *         self.user_interactions[self._part_types[0]][             # <<<<<<<<<<<<<<
 *             self._part_types[1]]['type_name'] = self.type_name()
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_user_interactions); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_self->_part_types, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":128
 *                 self._part_types[1]][p_key] = new_params[p_key]
 *         self.user_interactions[self._part_types[0]][
 *             self._part_types[1]]['type_name'] = self.type_name()             # <<<<<<<<<<<<<<
 * 
 *     def validate_params(self):
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_self->_part_types, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "espressomd/interactions.pyx":127
 *             self.user_interactions[self._part_types[0]][
 *                 self._part_types[1]][p_key] = new_params[p_key]
 *         self.user_interactions[self._part_types[0]][             # <<<<<<<<<<<<<<
 *             self._part_types[1]]['type_name'] = self.type_name()
 * 
 */
  __pyx_t_6 = PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(PyObject_SetItem(__pyx_t_6, __pyx_n_s_type_name, __pyx_t_5) < 0)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":91
 *         return self.__class__.__name__ + "(" + str(self.get_params()) + ")"
 * 
 *     def set_params(self, **p):             # <<<<<<<<<<<<<<
 *         """Update parameters. Only given """
 *         # Check, if any key was passed, which is not known
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("espressomd.interactions.NonBondedInteraction.set_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_new_params);
  __Pyx_XDECREF(__pyx_v_p_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":130
 *             self._part_types[1]]['type_name'] = self.type_name()
 * 
 *     def validate_params(self):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_11validate_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_20NonBondedInteraction_10validate_params[] = "NonBondedInteraction.validate_params(self)";
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_11validate_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("validate_params (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_20NonBondedInteraction_10validate_params(((struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_10validate_params(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("validate_params", 0);

  /* "espressomd/interactions.pyx":131
 * 
 *     def validate_params(self):
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     def __getattribute__(self, name):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_True);
  __pyx_r = Py_True;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":130
 *             self._part_types[1]]['type_name'] = self.type_name()
 * 
 *     def validate_params(self):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":133
 *         return True
 * 
 *     def __getattribute__(self, name):             # <<<<<<<<<<<<<<
 *         """Every time _set_params_in_es_core is called, the parameter dict is also updated."""
 *         attr = object.__getattribute__(self, name)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_13__getattribute__(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_10espressomd_12interactions_20NonBondedInteraction_12__getattribute__[] = "NonBondedInteraction.__getattribute__(self, name)\nEvery time _set_params_in_es_core is called, the parameter dict is also updated.";
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_13__getattribute__(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattribute__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_20NonBondedInteraction_12__getattribute__(((struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *)__pyx_v_self), ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":137
 *         attr = object.__getattribute__(self, name)
 *         if hasattr(attr, '__call__') and attr.__name__ == "_set_params_in_es_core":
 *             def sync_params(*args, **kwargs):             # <<<<<<<<<<<<<<
 *                 result = attr(*args, **kwargs)
 *                 self._params.update(self._get_params_from_es_core())
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_16__getattribute___1sync_params(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_10espressomd_12interactions_20NonBondedInteraction_16__getattribute___1sync_params = {"sync_params", (PyCFunction)__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_16__getattribute___1sync_params, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_16__getattribute___1sync_params(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sync_params (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "sync_params", 1))) return NULL;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return NULL;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_10espressomd_12interactions_20NonBondedInteraction_16__getattribute___sync_params(__pyx_self, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_16__getattribute___sync_params(PyObject *__pyx_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct____getattribute__ *__pyx_cur_scope;
  struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct____getattribute__ *__pyx_outer_scope;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("sync_params", 0);
  __pyx_outer_scope = (struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct____getattribute__ *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "espressomd/interactions.pyx":138
 *         if hasattr(attr, '__call__') and attr.__name__ == "_set_params_in_es_core":
 *             def sync_params(*args, **kwargs):
 *                 result = attr(*args, **kwargs)             # <<<<<<<<<<<<<<
 *                 self._params.update(self._get_params_from_es_core())
 *                 return result
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_attr)) { __Pyx_RaiseClosureNameError("attr"); __PYX_ERR(0, 138, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_v_attr, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":139
 *             def sync_params(*args, **kwargs):
 *                 result = attr(*args, **kwargs)
 *                 self._params.update(self._get_params_from_es_core())             # <<<<<<<<<<<<<<
 *                 return result
 *             return sync_params
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 139, __pyx_L1_error) }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_params, __pyx_n_s_update); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(!__pyx_cur_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 139, __pyx_L1_error) }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_get_params_from_es_core); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 139, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 139, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 139, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":140
 *                 result = attr(*args, **kwargs)
 *                 self._params.update(self._get_params_from_es_core())
 *                 return result             # <<<<<<<<<<<<<<
 *             return sync_params
 *         else:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":137
 *         attr = object.__getattribute__(self, name)
 *         if hasattr(attr, '__call__') and attr.__name__ == "_set_params_in_es_core":
 *             def sync_params(*args, **kwargs):             # <<<<<<<<<<<<<<
 *                 result = attr(*args, **kwargs)
 *                 self._params.update(self._get_params_from_es_core())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("espressomd.interactions.NonBondedInteraction.__getattribute__.sync_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":133
 *         return True
 * 
 *     def __getattribute__(self, name):             # <<<<<<<<<<<<<<
 *         """Every time _set_params_in_es_core is called, the parameter dict is also updated."""
 *         attr = object.__getattribute__(self, name)
 */

static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_12__getattribute__(struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self, PyObject *__pyx_v_name) {
  struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct____getattribute__ *__pyx_cur_scope;
  PyObject *__pyx_v_sync_params = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("__getattribute__", 0);
  __pyx_cur_scope = (struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct____getattribute__ *)__pyx_tp_new_10espressomd_12interactions___pyx_scope_struct____getattribute__(__pyx_ptype_10espressomd_12interactions___pyx_scope_struct____getattribute__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct____getattribute__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 133, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "espressomd/interactions.pyx":135
 *     def __getattribute__(self, name):
 *         """Every time _set_params_in_es_core is called, the parameter dict is also updated."""
 *         attr = object.__getattribute__(self, name)             # <<<<<<<<<<<<<<
 *         if hasattr(attr, '__call__') and attr.__name__ == "_set_params_in_es_core":
 *             def sync_params(*args, **kwargs):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_builtin_object, __pyx_n_s_getattribute); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, ((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_v_name};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, ((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_v_name};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, ((PyObject *)__pyx_cur_scope->__pyx_v_self));
    __Pyx_INCREF(__pyx_v_name);
    __Pyx_GIVEREF(__pyx_v_name);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_name);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_attr = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":136
 *         """Every time _set_params_in_es_core is called, the parameter dict is also updated."""
 *         attr = object.__getattribute__(self, name)
 *         if hasattr(attr, '__call__') and attr.__name__ == "_set_params_in_es_core":             # <<<<<<<<<<<<<<
 *             def sync_params(*args, **kwargs):
 *                 result = attr(*args, **kwargs)
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_attr;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_7 = PyObject_HasAttr(__pyx_t_1, __pyx_n_s_call); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {
  } else {
    __pyx_t_6 = __pyx_t_8;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_attr, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_set_params_in_es_core, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __pyx_t_8;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_6) {

    /* "espressomd/interactions.pyx":137
 *         attr = object.__getattribute__(self, name)
 *         if hasattr(attr, '__call__') and attr.__name__ == "_set_params_in_es_core":
 *             def sync_params(*args, **kwargs):             # <<<<<<<<<<<<<<
 *                 result = attr(*args, **kwargs)
 *                 self._params.update(self._get_params_from_es_core())
 */
    __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_20NonBondedInteraction_16__getattribute___1sync_params, 0, __pyx_n_s_getattribute___locals_sync_par, ((PyObject*)__pyx_cur_scope), __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_sync_params = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "espressomd/interactions.pyx":141
 *                 self._params.update(self._get_params_from_es_core())
 *                 return result
 *             return sync_params             # <<<<<<<<<<<<<<
 *         else:
 *             return attr
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_sync_params);
    __pyx_r = __pyx_v_sync_params;
    goto __pyx_L0;

    /* "espressomd/interactions.pyx":136
 *         """Every time _set_params_in_es_core is called, the parameter dict is also updated."""
 *         attr = object.__getattribute__(self, name)
 *         if hasattr(attr, '__call__') and attr.__name__ == "_set_params_in_es_core":             # <<<<<<<<<<<<<<
 *             def sync_params(*args, **kwargs):
 *                 result = attr(*args, **kwargs)
 */
  }

  /* "espressomd/interactions.pyx":143
 *             return sync_params
 *         else:
 *             return attr             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_attr);
    __pyx_r = __pyx_cur_scope->__pyx_v_attr;
    goto __pyx_L0;
  }

  /* "espressomd/interactions.pyx":133
 *         return True
 * 
 *     def __getattribute__(self, name):             # <<<<<<<<<<<<<<
 *         """Every time _set_params_in_es_core is called, the parameter dict is also updated."""
 *         attr = object.__getattribute__(self, name)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("espressomd.interactions.NonBondedInteraction.__getattribute__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sync_params);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":146
 * 
 * 
 *     def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             "Subclasses of NonBondedInteraction must define the _get_params_from_es_core() method.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_15_get_params_from_es_core(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_20NonBondedInteraction_14_get_params_from_es_core[] = "NonBondedInteraction._get_params_from_es_core(self)";
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_15_get_params_from_es_core(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_params_from_es_core (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_20NonBondedInteraction_14_get_params_from_es_core(((struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_14_get_params_from_es_core(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_get_params_from_es_core", 0);

  /* "espressomd/interactions.pyx":147
 * 
 *     def _get_params_from_es_core(self):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             "Subclasses of NonBondedInteraction must define the _get_params_from_es_core() method.")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 147, __pyx_L1_error)

  /* "espressomd/interactions.pyx":146
 * 
 * 
 *     def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             "Subclasses of NonBondedInteraction must define the _get_params_from_es_core() method.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.NonBondedInteraction._get_params_from_es_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":150
 *             "Subclasses of NonBondedInteraction must define the _get_params_from_es_core() method.")
 * 
 *     def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             "Subclasses of NonBondedInteraction must define the _set_params_in_es_core() method.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_17_set_params_in_es_core(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_20NonBondedInteraction_16_set_params_in_es_core[] = "NonBondedInteraction._set_params_in_es_core(self)";
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_17_set_params_in_es_core(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_params_in_es_core (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_20NonBondedInteraction_16_set_params_in_es_core(((struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_16_set_params_in_es_core(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_set_params_in_es_core", 0);

  /* "espressomd/interactions.pyx":151
 * 
 *     def _set_params_in_es_core(self):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             "Subclasses of NonBondedInteraction must define the _set_params_in_es_core() method.")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 151, __pyx_L1_error)

  /* "espressomd/interactions.pyx":150
 *             "Subclasses of NonBondedInteraction must define the _get_params_from_es_core() method.")
 * 
 *     def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             "Subclasses of NonBondedInteraction must define the _set_params_in_es_core() method.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.NonBondedInteraction._set_params_in_es_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":154
 *             "Subclasses of NonBondedInteraction must define the _set_params_in_es_core() method.")
 * 
 *     def default_params(self):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             "Subclasses of NonBondedInteraction must define the default_params() method.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_19default_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_20NonBondedInteraction_18default_params[] = "NonBondedInteraction.default_params(self)";
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_19default_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("default_params (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_20NonBondedInteraction_18default_params(((struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_18default_params(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("default_params", 0);

  /* "espressomd/interactions.pyx":155
 * 
 *     def default_params(self):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             "Subclasses of NonBondedInteraction must define the default_params() method.")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 155, __pyx_L1_error)

  /* "espressomd/interactions.pyx":154
 *             "Subclasses of NonBondedInteraction must define the _set_params_in_es_core() method.")
 * 
 *     def default_params(self):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             "Subclasses of NonBondedInteraction must define the default_params() method.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.NonBondedInteraction.default_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":158
 *             "Subclasses of NonBondedInteraction must define the default_params() method.")
 * 
 *     def is_active(self):             # <<<<<<<<<<<<<<
 *         # If this instance refers to an actual interaction defined in the es core, load
 *         # current parameters from there
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_21is_active(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_20NonBondedInteraction_20is_active[] = "NonBondedInteraction.is_active(self)";
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_21is_active(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_active (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_20NonBondedInteraction_20is_active(((struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_20is_active(struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("is_active", 0);

  /* "espressomd/interactions.pyx":161
 *         # If this instance refers to an actual interaction defined in the es core, load
 *         # current parameters from there
 *         if self._part_types[0] >= 0 and self._part_types[1] >= 0:             # <<<<<<<<<<<<<<
 *             self._params = self._get_params_from_es_core()
 *         raise Exception(
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_self->_part_types, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_int_0, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_self->_part_types, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_int_0, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "espressomd/interactions.pyx":162
 *         # current parameters from there
 *         if self._part_types[0] >= 0 and self._part_types[1] >= 0:
 *             self._params = self._get_params_from_es_core()             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             "Subclasses of NonBondedInteraction must define the is_active() method.")
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_params_from_es_core); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->_params);
    __Pyx_DECREF(__pyx_v_self->_params);
    __pyx_v_self->_params = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "espressomd/interactions.pyx":161
 *         # If this instance refers to an actual interaction defined in the es core, load
 *         # current parameters from there
 *         if self._part_types[0] >= 0 and self._part_types[1] >= 0:             # <<<<<<<<<<<<<<
 *             self._params = self._get_params_from_es_core()
 *         raise Exception(
 */
  }

  /* "espressomd/interactions.pyx":163
 *         if self._part_types[0] >= 0 and self._part_types[1] >= 0:
 *             self._params = self._get_params_from_es_core()
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             "Subclasses of NonBondedInteraction must define the is_active() method.")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(0, 163, __pyx_L1_error)

  /* "espressomd/interactions.pyx":158
 *             "Subclasses of NonBondedInteraction must define the default_params() method.")
 * 
 *     def is_active(self):             # <<<<<<<<<<<<<<
 *         # If this instance refers to an actual interaction defined in the es core, load
 *         # current parameters from there
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("espressomd.interactions.NonBondedInteraction.is_active", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":166
 *             "Subclasses of NonBondedInteraction must define the is_active() method.")
 * 
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             "Subclasses of NonBondedInteraction must define the type_name() method.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_23type_name(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_20NonBondedInteraction_22type_name[] = "NonBondedInteraction.type_name(self)";
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_23type_name(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_name (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_20NonBondedInteraction_22type_name(((struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_22type_name(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("type_name", 0);

  /* "espressomd/interactions.pyx":167
 * 
 *     def type_name(self):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             "Subclasses of NonBondedInteraction must define the type_name() method.")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 167, __pyx_L1_error)

  /* "espressomd/interactions.pyx":166
 *             "Subclasses of NonBondedInteraction must define the is_active() method.")
 * 
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             "Subclasses of NonBondedInteraction must define the type_name() method.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.NonBondedInteraction.type_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":170
 *             "Subclasses of NonBondedInteraction must define the type_name() method.")
 * 
 *     def valid_keys(self):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             "Subclasses of NonBondedInteraction must define the valid_keys() method.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_25valid_keys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_20NonBondedInteraction_24valid_keys[] = "NonBondedInteraction.valid_keys(self)";
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_25valid_keys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("valid_keys (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_20NonBondedInteraction_24valid_keys(((struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_24valid_keys(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("valid_keys", 0);

  /* "espressomd/interactions.pyx":171
 * 
 *     def valid_keys(self):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             "Subclasses of NonBondedInteraction must define the valid_keys() method.")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 171, __pyx_L1_error)

  /* "espressomd/interactions.pyx":170
 *             "Subclasses of NonBondedInteraction must define the type_name() method.")
 * 
 *     def valid_keys(self):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             "Subclasses of NonBondedInteraction must define the valid_keys() method.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.NonBondedInteraction.valid_keys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":174
 *             "Subclasses of NonBondedInteraction must define the valid_keys() method.")
 * 
 *     def required_keys(self):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             "Subclasses of NonBondedInteraction must define the required_keys() method.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_27required_keys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_20NonBondedInteraction_26required_keys[] = "NonBondedInteraction.required_keys(self)";
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_27required_keys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("required_keys (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_20NonBondedInteraction_26required_keys(((struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_26required_keys(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("required_keys", 0);

  /* "espressomd/interactions.pyx":175
 * 
 *     def required_keys(self):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             "Subclasses of NonBondedInteraction must define the required_keys() method.")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 175, __pyx_L1_error)

  /* "espressomd/interactions.pyx":174
 *             "Subclasses of NonBondedInteraction must define the valid_keys() method.")
 * 
 *     def required_keys(self):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             "Subclasses of NonBondedInteraction must define the required_keys() method.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.NonBondedInteraction.required_keys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":26
 * cdef class NonBondedInteraction(object):
 * 
 *     cdef public object _part_types             # <<<<<<<<<<<<<<
 *     cdef object _params
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_11_part_types_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_11_part_types_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_20NonBondedInteraction_11_part_types___get__(((struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_20NonBondedInteraction_11_part_types___get__(struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_part_types);
  __pyx_r = __pyx_v_self->_part_types;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10espressomd_12interactions_20NonBondedInteraction_11_part_types_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10espressomd_12interactions_20NonBondedInteraction_11_part_types_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_20NonBondedInteraction_11_part_types_2__set__(((struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10espressomd_12interactions_20NonBondedInteraction_11_part_types_2__set__(struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_part_types);
  __Pyx_DECREF(__pyx_v_self->_part_types);
  __pyx_v_self->_part_types = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10espressomd_12interactions_20NonBondedInteraction_11_part_types_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_10espressomd_12interactions_20NonBondedInteraction_11_part_types_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_20NonBondedInteraction_11_part_types_4__del__(((struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10espressomd_12interactions_20NonBondedInteraction_11_part_types_4__del__(struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_part_types);
  __Pyx_DECREF(__pyx_v_self->_part_types);
  __pyx_v_self->_part_types = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":183
 *     cdef class LennardJonesInteraction(NonBondedInteraction):
 * 
 *         def validate_params(self):             # <<<<<<<<<<<<<<
 *             if self._params["epsilon"] < 0:
 *                 raise ValueError("Lennard-Jones eps has to be >=0")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_23LennardJonesInteraction_1validate_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_23LennardJonesInteraction_validate_params[] = "LennardJonesInteraction.validate_params(self)";
static PyObject *__pyx_pw_10espressomd_12interactions_23LennardJonesInteraction_1validate_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("validate_params (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_23LennardJonesInteraction_validate_params(((struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_23LennardJonesInteraction_validate_params(struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("validate_params", 0);

  /* "espressomd/interactions.pyx":184
 * 
 *         def validate_params(self):
 *             if self._params["epsilon"] < 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Lennard-Jones eps has to be >=0")
 *             if self._params["sigma"] < 0:
 */
  __pyx_t_1 = PyObject_GetItem(__pyx_v_self->__pyx_base._params, __pyx_n_s_epsilon); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "espressomd/interactions.pyx":185
 *         def validate_params(self):
 *             if self._params["epsilon"] < 0:
 *                 raise ValueError("Lennard-Jones eps has to be >=0")             # <<<<<<<<<<<<<<
 *             if self._params["sigma"] < 0:
 *                 raise ValueError("Lennard-Jones sigma has to be >=0")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 185, __pyx_L1_error)

    /* "espressomd/interactions.pyx":184
 * 
 *         def validate_params(self):
 *             if self._params["epsilon"] < 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Lennard-Jones eps has to be >=0")
 *             if self._params["sigma"] < 0:
 */
  }

  /* "espressomd/interactions.pyx":186
 *             if self._params["epsilon"] < 0:
 *                 raise ValueError("Lennard-Jones eps has to be >=0")
 *             if self._params["sigma"] < 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Lennard-Jones sigma has to be >=0")
 *             if self._params["cutoff"] < 0:
 */
  __pyx_t_2 = PyObject_GetItem(__pyx_v_self->__pyx_base._params, __pyx_n_s_sigma); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "espressomd/interactions.pyx":187
 *                 raise ValueError("Lennard-Jones eps has to be >=0")
 *             if self._params["sigma"] < 0:
 *                 raise ValueError("Lennard-Jones sigma has to be >=0")             # <<<<<<<<<<<<<<
 *             if self._params["cutoff"] < 0:
 *                 raise ValueError("Lennard-Jones cutoff has to be >=0")
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 187, __pyx_L1_error)

    /* "espressomd/interactions.pyx":186
 *             if self._params["epsilon"] < 0:
 *                 raise ValueError("Lennard-Jones eps has to be >=0")
 *             if self._params["sigma"] < 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Lennard-Jones sigma has to be >=0")
 *             if self._params["cutoff"] < 0:
 */
  }

  /* "espressomd/interactions.pyx":188
 *             if self._params["sigma"] < 0:
 *                 raise ValueError("Lennard-Jones sigma has to be >=0")
 *             if self._params["cutoff"] < 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Lennard-Jones cutoff has to be >=0")
 *             return True
 */
  __pyx_t_1 = PyObject_GetItem(__pyx_v_self->__pyx_base._params, __pyx_n_s_cutoff); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "espressomd/interactions.pyx":189
 *                 raise ValueError("Lennard-Jones sigma has to be >=0")
 *             if self._params["cutoff"] < 0:
 *                 raise ValueError("Lennard-Jones cutoff has to be >=0")             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 189, __pyx_L1_error)

    /* "espressomd/interactions.pyx":188
 *             if self._params["sigma"] < 0:
 *                 raise ValueError("Lennard-Jones sigma has to be >=0")
 *             if self._params["cutoff"] < 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Lennard-Jones cutoff has to be >=0")
 *             return True
 */
  }

  /* "espressomd/interactions.pyx":190
 *             if self._params["cutoff"] < 0:
 *                 raise ValueError("Lennard-Jones cutoff has to be >=0")
 *             return True             # <<<<<<<<<<<<<<
 * 
 *         def _get_params_from_es_core(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_True);
  __pyx_r = Py_True;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":183
 *     cdef class LennardJonesInteraction(NonBondedInteraction):
 * 
 *         def validate_params(self):             # <<<<<<<<<<<<<<
 *             if self._params["epsilon"] < 0:
 *                 raise ValueError("Lennard-Jones eps has to be >=0")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("espressomd.interactions.LennardJonesInteraction.validate_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":192
 *             return True
 * 
 *         def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *             cdef ia_parameters * ia_params
 *             ia_params = get_ia_param_safe(self._part_types[0], self._part_types[1])
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_23LennardJonesInteraction_3_get_params_from_es_core(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_23LennardJonesInteraction_2_get_params_from_es_core[] = "LennardJonesInteraction._get_params_from_es_core(self)";
static PyObject *__pyx_pw_10espressomd_12interactions_23LennardJonesInteraction_3_get_params_from_es_core(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_params_from_es_core (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_23LennardJonesInteraction_2_get_params_from_es_core(((struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_23LennardJonesInteraction_2_get_params_from_es_core(struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction *__pyx_v_self) {
  IA_parameters *__pyx_v_ia_params;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("_get_params_from_es_core", 0);

  /* "espressomd/interactions.pyx":194
 *         def _get_params_from_es_core(self):
 *             cdef ia_parameters * ia_params
 *             ia_params = get_ia_param_safe(self._part_types[0], self._part_types[1])             # <<<<<<<<<<<<<<
 *             return {
 *                 "epsilon": ia_params.LJ_eps,
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->__pyx_base._part_types, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->__pyx_base._part_types, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_ia_params = get_ia_param_safe(__pyx_t_2, __pyx_t_3);

  /* "espressomd/interactions.pyx":195
 *             cdef ia_parameters * ia_params
 *             ia_params = get_ia_param_safe(self._part_types[0], self._part_types[1])
 *             return {             # <<<<<<<<<<<<<<
 *                 "epsilon": ia_params.LJ_eps,
 *                 "sigma": ia_params.LJ_sig,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "espressomd/interactions.pyx":196
 *             ia_params = get_ia_param_safe(self._part_types[0], self._part_types[1])
 *             return {
 *                 "epsilon": ia_params.LJ_eps,             # <<<<<<<<<<<<<<
 *                 "sigma": ia_params.LJ_sig,
 *                 "cutoff": ia_params.LJ_cut,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_ia_params->LJ_eps); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_epsilon, __pyx_t_4) < 0) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "espressomd/interactions.pyx":197
 *             return {
 *                 "epsilon": ia_params.LJ_eps,
 *                 "sigma": ia_params.LJ_sig,             # <<<<<<<<<<<<<<
 *                 "cutoff": ia_params.LJ_cut,
 *                 "shift": ia_params.LJ_shift,
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_ia_params->LJ_sig); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_sigma, __pyx_t_4) < 0) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "espressomd/interactions.pyx":198
 *                 "epsilon": ia_params.LJ_eps,
 *                 "sigma": ia_params.LJ_sig,
 *                 "cutoff": ia_params.LJ_cut,             # <<<<<<<<<<<<<<
 *                 "shift": ia_params.LJ_shift,
 *                 "offset": ia_params.LJ_offset,
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_ia_params->LJ_cut); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_cutoff, __pyx_t_4) < 0) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "espressomd/interactions.pyx":199
 *                 "sigma": ia_params.LJ_sig,
 *                 "cutoff": ia_params.LJ_cut,
 *                 "shift": ia_params.LJ_shift,             # <<<<<<<<<<<<<<
 *                 "offset": ia_params.LJ_offset,
 *                 "cap": ia_params.LJ_capradius,
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_ia_params->LJ_shift); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shift, __pyx_t_4) < 0) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "espressomd/interactions.pyx":200
 *                 "cutoff": ia_params.LJ_cut,
 *                 "shift": ia_params.LJ_shift,
 *                 "offset": ia_params.LJ_offset,             # <<<<<<<<<<<<<<
 *                 "cap": ia_params.LJ_capradius,
 *                 "min": ia_params.LJ_min}
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_ia_params->LJ_offset); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_offset, __pyx_t_4) < 0) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "espressomd/interactions.pyx":201
 *                 "shift": ia_params.LJ_shift,
 *                 "offset": ia_params.LJ_offset,
 *                 "cap": ia_params.LJ_capradius,             # <<<<<<<<<<<<<<
 *                 "min": ia_params.LJ_min}
 * 
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_ia_params->LJ_capradius); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_cap, __pyx_t_4) < 0) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "espressomd/interactions.pyx":202
 *                 "offset": ia_params.LJ_offset,
 *                 "cap": ia_params.LJ_capradius,
 *                 "min": ia_params.LJ_min}             # <<<<<<<<<<<<<<
 * 
 *         def is_active(self):
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_ia_params->LJ_min); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_min, __pyx_t_4) < 0) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":192
 *             return True
 * 
 *         def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *             cdef ia_parameters * ia_params
 *             ia_params = get_ia_param_safe(self._part_types[0], self._part_types[1])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("espressomd.interactions.LennardJonesInteraction._get_params_from_es_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":204
 *                 "min": ia_params.LJ_min}
 * 
 *         def is_active(self):             # <<<<<<<<<<<<<<
 *             return (self._params["epsilon"] > 0)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_23LennardJonesInteraction_5is_active(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_23LennardJonesInteraction_4is_active[] = "LennardJonesInteraction.is_active(self)";
static PyObject *__pyx_pw_10espressomd_12interactions_23LennardJonesInteraction_5is_active(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_active (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_23LennardJonesInteraction_4is_active(((struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_23LennardJonesInteraction_4is_active(struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("is_active", 0);

  /* "espressomd/interactions.pyx":205
 * 
 *         def is_active(self):
 *             return (self._params["epsilon"] > 0)             # <<<<<<<<<<<<<<
 * 
 *         def set_params(self, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetItem(__pyx_v_self->__pyx_base._params, __pyx_n_s_epsilon); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":204
 *                 "min": ia_params.LJ_min}
 * 
 *         def is_active(self):             # <<<<<<<<<<<<<<
 *             return (self._params["epsilon"] > 0)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("espressomd.interactions.LennardJonesInteraction.is_active", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":207
 *             return (self._params["epsilon"] > 0)
 * 
 *         def set_params(self, **kwargs):             # <<<<<<<<<<<<<<
 *             """ Set parameters for the Lennard-Jones interaction.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_23LennardJonesInteraction_7set_params(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10espressomd_12interactions_23LennardJonesInteraction_6set_params[] = "LennardJonesInteraction.set_params(self, **kwargs)\n Set parameters for the Lennard-Jones interaction.\n\n            Parameters\n            ----------\n\n            epsilon : float\n                      The magnitude of the interaction.\n            sigma : float\n                    Determines the interaction length scale.\n            cutoff : float\n                     Cutoff distance of the interaction.\n            shift : float, string\n                    Constant shift of the potential. (4*epsilon*shift).\n            offset : float, optional\n                     Offset distance of the interaction.\n            cap : float, optional\n                  If individual force caps are used, determines the distance\n                  at which the force is capped.\n            min : float, optional\n                  Restricts the interaction to a minimal distance.\n            ";
static PyObject *__pyx_pw_10espressomd_12interactions_23LennardJonesInteraction_7set_params(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_params (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("set_params", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_params", 1))) return NULL;
  if (__pyx_kwds) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return NULL;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __pyx_r = __pyx_pf_10espressomd_12interactions_23LennardJonesInteraction_6set_params(((struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_23LennardJonesInteraction_6set_params(struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("set_params", 0);

  /* "espressomd/interactions.pyx":229
 *                   Restricts the interaction to a minimal distance.
 *             """
 *             super(LennardJonesInteraction, self).set_params(**kwargs)             # <<<<<<<<<<<<<<
 * 
 *         def _set_params_in_es_core(self):
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_10espressomd_12interactions_LennardJonesInteraction));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_10espressomd_12interactions_LennardJonesInteraction));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_ptype_10espressomd_12interactions_LennardJonesInteraction));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_set_params); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_v_kwargs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":207
 *             return (self._params["epsilon"] > 0)
 * 
 *         def set_params(self, **kwargs):             # <<<<<<<<<<<<<<
 *             """ Set parameters for the Lennard-Jones interaction.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("espressomd.interactions.LennardJonesInteraction.set_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":231
 *             super(LennardJonesInteraction, self).set_params(**kwargs)
 * 
 *         def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *             # Handle the case of shift="auto"
 *             if self._params["shift"] == "auto":
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_23LennardJonesInteraction_9_set_params_in_es_core(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_23LennardJonesInteraction_8_set_params_in_es_core[] = "LennardJonesInteraction._set_params_in_es_core(self)";
static PyObject *__pyx_pw_10espressomd_12interactions_23LennardJonesInteraction_9_set_params_in_es_core(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_params_in_es_core (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_23LennardJonesInteraction_8_set_params_in_es_core(((struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_23LennardJonesInteraction_8_set_params_in_es_core(struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  double __pyx_t_8;
  double __pyx_t_9;
  double __pyx_t_10;
  double __pyx_t_11;
  double __pyx_t_12;
  double __pyx_t_13;
  double __pyx_t_14;
  __Pyx_RefNannySetupContext("_set_params_in_es_core", 0);

  /* "espressomd/interactions.pyx":233
 *         def _set_params_in_es_core(self):
 *             # Handle the case of shift="auto"
 *             if self._params["shift"] == "auto":             # <<<<<<<<<<<<<<
 *                 # Calc shift
 *                 self._params["shift"] = -((self._params["sigma"] / self._params["cutoff"])**12 - (
 */
  __pyx_t_1 = PyObject_GetItem(__pyx_v_self->__pyx_base._params, __pyx_n_s_shift); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_auto, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "espressomd/interactions.pyx":235
 *             if self._params["shift"] == "auto":
 *                 # Calc shift
 *                 self._params["shift"] = -((self._params["sigma"] / self._params["cutoff"])**12 - (             # <<<<<<<<<<<<<<
 *                     self._params["sigma"] / self._params["cutoff"])**6)
 * 
 */
    __pyx_t_1 = PyObject_GetItem(__pyx_v_self->__pyx_base._params, __pyx_n_s_sigma); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_GetItem(__pyx_v_self->__pyx_base._params, __pyx_n_s_cutoff); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Power(__pyx_t_4, __pyx_int_12, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "espressomd/interactions.pyx":236
 *                 # Calc shift
 *                 self._params["shift"] = -((self._params["sigma"] / self._params["cutoff"])**12 - (
 *                     self._params["sigma"] / self._params["cutoff"])**6)             # <<<<<<<<<<<<<<
 * 
 *             if lennard_jones_set_params(self._part_types[0], self._part_types[1],
 */
    __pyx_t_4 = PyObject_GetItem(__pyx_v_self->__pyx_base._params, __pyx_n_s_sigma); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyObject_GetItem(__pyx_v_self->__pyx_base._params, __pyx_n_s_cutoff); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Power(__pyx_t_5, __pyx_int_6, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "espressomd/interactions.pyx":235
 *             if self._params["shift"] == "auto":
 *                 # Calc shift
 *                 self._params["shift"] = -((self._params["sigma"] / self._params["cutoff"])**12 - (             # <<<<<<<<<<<<<<
 *                     self._params["sigma"] / self._params["cutoff"])**6)
 * 
 */
    __pyx_t_5 = PyNumber_Subtract(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Negative(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_self->__pyx_base._params, __pyx_n_s_shift, __pyx_t_1) < 0)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "espressomd/interactions.pyx":233
 *         def _set_params_in_es_core(self):
 *             # Handle the case of shift="auto"
 *             if self._params["shift"] == "auto":             # <<<<<<<<<<<<<<
 *                 # Calc shift
 *                 self._params["shift"] = -((self._params["sigma"] / self._params["cutoff"])**12 - (
 */
  }

  /* "espressomd/interactions.pyx":238
 *                     self._params["sigma"] / self._params["cutoff"])**6)
 * 
 *             if lennard_jones_set_params(self._part_types[0], self._part_types[1],             # <<<<<<<<<<<<<<
 *                                         self._params["epsilon"],
 *                                         self._params["sigma"],
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->__pyx_base._part_types, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->__pyx_base._part_types, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":239
 * 
 *             if lennard_jones_set_params(self._part_types[0], self._part_types[1],
 *                                         self._params["epsilon"],             # <<<<<<<<<<<<<<
 *                                         self._params["sigma"],
 *                                         self._params["cutoff"],
 */
  __pyx_t_1 = PyObject_GetItem(__pyx_v_self->__pyx_base._params, __pyx_n_s_epsilon); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":240
 *             if lennard_jones_set_params(self._part_types[0], self._part_types[1],
 *                                         self._params["epsilon"],
 *                                         self._params["sigma"],             # <<<<<<<<<<<<<<
 *                                         self._params["cutoff"],
 *                                         self._params["shift"],
 */
  __pyx_t_1 = PyObject_GetItem(__pyx_v_self->__pyx_base._params, __pyx_n_s_sigma); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":241
 *                                         self._params["epsilon"],
 *                                         self._params["sigma"],
 *                                         self._params["cutoff"],             # <<<<<<<<<<<<<<
 *                                         self._params["shift"],
 *                                         self._params["offset"],
 */
  __pyx_t_1 = PyObject_GetItem(__pyx_v_self->__pyx_base._params, __pyx_n_s_cutoff); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":242
 *                                         self._params["sigma"],
 *                                         self._params["cutoff"],
 *                                         self._params["shift"],             # <<<<<<<<<<<<<<
 *                                         self._params["offset"],
 *                                         self._params["cap"],
 */
  __pyx_t_1 = PyObject_GetItem(__pyx_v_self->__pyx_base._params, __pyx_n_s_shift); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":243
 *                                         self._params["cutoff"],
 *                                         self._params["shift"],
 *                                         self._params["offset"],             # <<<<<<<<<<<<<<
 *                                         self._params["cap"],
 *                                         self._params["min"]):
 */
  __pyx_t_1 = PyObject_GetItem(__pyx_v_self->__pyx_base._params, __pyx_n_s_offset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":244
 *                                         self._params["shift"],
 *                                         self._params["offset"],
 *                                         self._params["cap"],             # <<<<<<<<<<<<<<
 *                                         self._params["min"]):
 *                 raise Exception("Could not set Lennard Jones parameters")
 */
  __pyx_t_1 = PyObject_GetItem(__pyx_v_self->__pyx_base._params, __pyx_n_s_cap); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":245
 *                                         self._params["offset"],
 *                                         self._params["cap"],
 *                                         self._params["min"]):             # <<<<<<<<<<<<<<
 *                 raise Exception("Could not set Lennard Jones parameters")
 * 
 */
  __pyx_t_1 = PyObject_GetItem(__pyx_v_self->__pyx_base._params, __pyx_n_s_min); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":238
 *                     self._params["sigma"] / self._params["cutoff"])**6)
 * 
 *             if lennard_jones_set_params(self._part_types[0], self._part_types[1],             # <<<<<<<<<<<<<<
 *                                         self._params["epsilon"],
 *                                         self._params["sigma"],
 */
  __pyx_t_2 = (lennard_jones_set_params(__pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14) != 0);
  if (__pyx_t_2) {

    /* "espressomd/interactions.pyx":246
 *                                         self._params["cap"],
 *                                         self._params["min"]):
 *                 raise Exception("Could not set Lennard Jones parameters")             # <<<<<<<<<<<<<<
 * 
 *         def default_params(self):
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 246, __pyx_L1_error)

    /* "espressomd/interactions.pyx":238
 *                     self._params["sigma"] / self._params["cutoff"])**6)
 * 
 *             if lennard_jones_set_params(self._part_types[0], self._part_types[1],             # <<<<<<<<<<<<<<
 *                                         self._params["epsilon"],
 *                                         self._params["sigma"],
 */
  }

  /* "espressomd/interactions.pyx":231
 *             super(LennardJonesInteraction, self).set_params(**kwargs)
 * 
 *         def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *             # Handle the case of shift="auto"
 *             if self._params["shift"] == "auto":
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("espressomd.interactions.LennardJonesInteraction._set_params_in_es_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":248
 *                 raise Exception("Could not set Lennard Jones parameters")
 * 
 *         def default_params(self):             # <<<<<<<<<<<<<<
 *             return {
 *                 "epsilon": 0.,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_23LennardJonesInteraction_11default_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_23LennardJonesInteraction_10default_params[] = "LennardJonesInteraction.default_params(self)";
static PyObject *__pyx_pw_10espressomd_12interactions_23LennardJonesInteraction_11default_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("default_params (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_23LennardJonesInteraction_10default_params(((struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_23LennardJonesInteraction_10default_params(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("default_params", 0);

  /* "espressomd/interactions.pyx":249
 * 
 *         def default_params(self):
 *             return {             # <<<<<<<<<<<<<<
 *                 "epsilon": 0.,
 *                 "sigma": 0.,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "espressomd/interactions.pyx":250
 *         def default_params(self):
 *             return {
 *                 "epsilon": 0.,             # <<<<<<<<<<<<<<
 *                 "sigma": 0.,
 *                 "cutoff": 0.,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_epsilon, __pyx_float_0_) < 0) __PYX_ERR(0, 250, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_sigma, __pyx_float_0_) < 0) __PYX_ERR(0, 250, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_cutoff, __pyx_float_0_) < 0) __PYX_ERR(0, 250, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shift, __pyx_float_0_) < 0) __PYX_ERR(0, 250, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_offset, __pyx_float_0_) < 0) __PYX_ERR(0, 250, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_cap, __pyx_float_0_) < 0) __PYX_ERR(0, 250, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_min, __pyx_float_0_) < 0) __PYX_ERR(0, 250, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":248
 *                 raise Exception("Could not set Lennard Jones parameters")
 * 
 *         def default_params(self):             # <<<<<<<<<<<<<<
 *             return {
 *                 "epsilon": 0.,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.LennardJonesInteraction.default_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":258
 *                 "min": 0.}
 * 
 *         def type_name(self):             # <<<<<<<<<<<<<<
 *             return "LennardJones"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_23LennardJonesInteraction_13type_name(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_23LennardJonesInteraction_12type_name[] = "LennardJonesInteraction.type_name(self)";
static PyObject *__pyx_pw_10espressomd_12interactions_23LennardJonesInteraction_13type_name(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_name (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_23LennardJonesInteraction_12type_name(((struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_23LennardJonesInteraction_12type_name(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_name", 0);

  /* "espressomd/interactions.pyx":259
 * 
 *         def type_name(self):
 *             return "LennardJones"             # <<<<<<<<<<<<<<
 * 
 *         def valid_keys(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_n_s_LennardJones);
  __pyx_r = __pyx_n_s_LennardJones;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":258
 *                 "min": 0.}
 * 
 *         def type_name(self):             # <<<<<<<<<<<<<<
 *             return "LennardJones"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":261
 *             return "LennardJones"
 * 
 *         def valid_keys(self):             # <<<<<<<<<<<<<<
 *             return "epsilon", "sigma", "cutoff", "shift", "offset", "cap", "min"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_23LennardJonesInteraction_15valid_keys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_23LennardJonesInteraction_14valid_keys[] = "LennardJonesInteraction.valid_keys(self)";
static PyObject *__pyx_pw_10espressomd_12interactions_23LennardJonesInteraction_15valid_keys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("valid_keys (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_23LennardJonesInteraction_14valid_keys(((struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_23LennardJonesInteraction_14valid_keys(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("valid_keys", 0);

  /* "espressomd/interactions.pyx":262
 * 
 *         def valid_keys(self):
 *             return "epsilon", "sigma", "cutoff", "shift", "offset", "cap", "min"             # <<<<<<<<<<<<<<
 * 
 *         def required_keys(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_tuple__17);
  __pyx_r = __pyx_tuple__17;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":261
 *             return "LennardJones"
 * 
 *         def valid_keys(self):             # <<<<<<<<<<<<<<
 *             return "epsilon", "sigma", "cutoff", "shift", "offset", "cap", "min"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":264
 *             return "epsilon", "sigma", "cutoff", "shift", "offset", "cap", "min"
 * 
 *         def required_keys(self):             # <<<<<<<<<<<<<<
 *             return "epsilon", "sigma", "cutoff", "shift"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_23LennardJonesInteraction_17required_keys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_23LennardJonesInteraction_16required_keys[] = "LennardJonesInteraction.required_keys(self)";
static PyObject *__pyx_pw_10espressomd_12interactions_23LennardJonesInteraction_17required_keys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("required_keys (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_23LennardJonesInteraction_16required_keys(((struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_23LennardJonesInteraction_16required_keys(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("required_keys", 0);

  /* "espressomd/interactions.pyx":265
 * 
 *         def required_keys(self):
 *             return "epsilon", "sigma", "cutoff", "shift"             # <<<<<<<<<<<<<<
 * 
 * # Generic Lennard Jones
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_tuple__18);
  __pyx_r = __pyx_tuple__18;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":264
 *             return "epsilon", "sigma", "cutoff", "shift", "offset", "cap", "min"
 * 
 *         def required_keys(self):             # <<<<<<<<<<<<<<
 *             return "epsilon", "sigma", "cutoff", "shift"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":408
 *     tabulated = None
 * 
 *     def __init__(self, _type1, _type2):             # <<<<<<<<<<<<<<
 *         """Takes two particle types as argument"""
 *         if not (isinstance(_type1, int) and isinstance(_type2, int)):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_26NonBondedInteractionHandle_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10espressomd_12interactions_26NonBondedInteractionHandle___init__[] = "NonBondedInteractionHandle.__init__(self, _type1, _type2)\nTakes two particle types as argument";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_26NonBondedInteractionHandle_1__init__ = {"__init__", (PyCFunction)__pyx_pw_10espressomd_12interactions_26NonBondedInteractionHandle_1__init__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10espressomd_12interactions_26NonBondedInteractionHandle___init__};
static PyObject *__pyx_pw_10espressomd_12interactions_26NonBondedInteractionHandle_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v__type1 = 0;
  PyObject *__pyx_v__type2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_type1,&__pyx_n_s_type2,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_type1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(0, 408, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_type2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); __PYX_ERR(0, 408, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 408, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v__type1 = values[1];
    __pyx_v__type2 = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 408, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("espressomd.interactions.NonBondedInteractionHandle.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10espressomd_12interactions_26NonBondedInteractionHandle___init__(__pyx_self, __pyx_v_self, __pyx_v__type1, __pyx_v__type2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_26NonBondedInteractionHandle___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v__type1, PyObject *__pyx_v__type2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "espressomd/interactions.pyx":410
 *     def __init__(self, _type1, _type2):
 *         """Takes two particle types as argument"""
 *         if not (isinstance(_type1, int) and isinstance(_type2, int)):             # <<<<<<<<<<<<<<
 *             raise TypeError("The particle types have to be of type integer.")
 *         self.type1 = _type1
 */
  __pyx_t_2 = PyInt_Check(__pyx_v__type1); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyInt_Check(__pyx_v__type2); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "espressomd/interactions.pyx":411
 *         """Takes two particle types as argument"""
 *         if not (isinstance(_type1, int) and isinstance(_type2, int)):
 *             raise TypeError("The particle types have to be of type integer.")             # <<<<<<<<<<<<<<
 *         self.type1 = _type1
 *         self.type2 = _type2
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 411, __pyx_L1_error)

    /* "espressomd/interactions.pyx":410
 *     def __init__(self, _type1, _type2):
 *         """Takes two particle types as argument"""
 *         if not (isinstance(_type1, int) and isinstance(_type2, int)):             # <<<<<<<<<<<<<<
 *             raise TypeError("The particle types have to be of type integer.")
 *         self.type1 = _type1
 */
  }

  /* "espressomd/interactions.pyx":412
 *         if not (isinstance(_type1, int) and isinstance(_type2, int)):
 *             raise TypeError("The particle types have to be of type integer.")
 *         self.type1 = _type1             # <<<<<<<<<<<<<<
 *         self.type2 = _type2
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_type1_2, __pyx_v__type1) < 0) __PYX_ERR(0, 412, __pyx_L1_error)

  /* "espressomd/interactions.pyx":413
 *             raise TypeError("The particle types have to be of type integer.")
 *         self.type1 = _type1
 *         self.type2 = _type2             # <<<<<<<<<<<<<<
 * 
 *         # Here, add one line for each nonbonded ia
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_type2_2, __pyx_v__type2) < 0) __PYX_ERR(0, 413, __pyx_L1_error)

  /* "espressomd/interactions.pyx":417
 *         # Here, add one line for each nonbonded ia
 *         IF LENNARD_JONES:
 *             self.lennard_jones = LennardJonesInteraction(_type1, _type2)             # <<<<<<<<<<<<<<
 *         IF LENNARD_JONES_GENERIC:
 *             self.generic_lennard_jones = GenericLennardJonesInteraction(
 */
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v__type1);
  __Pyx_GIVEREF(__pyx_v__type1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v__type1);
  __Pyx_INCREF(__pyx_v__type2);
  __Pyx_GIVEREF(__pyx_v__type2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v__type2);
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_10espressomd_12interactions_LennardJonesInteraction), __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_lennard_jones, __pyx_t_5) < 0) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":408
 *     tabulated = None
 * 
 *     def __init__(self, _type1, _type2):             # <<<<<<<<<<<<<<
 *         """Takes two particle types as argument"""
 *         if not (isinstance(_type1, int) and isinstance(_type2, int)):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("espressomd.interactions.NonBondedInteractionHandle.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":432
 *     """
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         if not isinstance(key, tuple):
 *             raise ValueError(
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_21NonBondedInteractions_1__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_10espressomd_12interactions_21NonBondedInteractions_1__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_21NonBondedInteractions___getitem__(((struct __pyx_obj_10espressomd_12interactions_NonBondedInteractions *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_21NonBondedInteractions___getitem__(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_NonBondedInteractions *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "espressomd/interactions.pyx":433
 * 
 *     def __getitem__(self, key):
 *         if not isinstance(key, tuple):             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "NonBondedInteractions[] expects two particle types as indices.")
 */
  __pyx_t_1 = PyTuple_Check(__pyx_v_key); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "espressomd/interactions.pyx":434
 *     def __getitem__(self, key):
 *         if not isinstance(key, tuple):
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 "NonBondedInteractions[] expects two particle types as indices.")
 *         if len(key) != 2 or (not isinstance(key[0], int)) or (not isinstance(key[1], int)):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 434, __pyx_L1_error)

    /* "espressomd/interactions.pyx":433
 * 
 *     def __getitem__(self, key):
 *         if not isinstance(key, tuple):             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "NonBondedInteractions[] expects two particle types as indices.")
 */
  }

  /* "espressomd/interactions.pyx":436
 *             raise ValueError(
 *                 "NonBondedInteractions[] expects two particle types as indices.")
 *         if len(key) != 2 or (not isinstance(key[0], int)) or (not isinstance(key[1], int)):             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "NonBondedInteractions[] expects two particle types as indices.")
 */
  __pyx_t_4 = PyObject_Length(__pyx_v_key); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 436, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_t_4 != 2) != 0);
  if (!__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_key, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyInt_Check(__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = ((!(__pyx_t_1 != 0)) != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_key, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyInt_Check(__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = ((!(__pyx_t_5 != 0)) != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "espressomd/interactions.pyx":437
 *                 "NonBondedInteractions[] expects two particle types as indices.")
 *         if len(key) != 2 or (not isinstance(key[0], int)) or (not isinstance(key[1], int)):
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 "NonBondedInteractions[] expects two particle types as indices.")
 *         return NonBondedInteractionHandle(key[0], key[1])
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 437, __pyx_L1_error)

    /* "espressomd/interactions.pyx":436
 *             raise ValueError(
 *                 "NonBondedInteractions[] expects two particle types as indices.")
 *         if len(key) != 2 or (not isinstance(key[0], int)) or (not isinstance(key[1], int)):             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "NonBondedInteractions[] expects two particle types as indices.")
 */
  }

  /* "espressomd/interactions.pyx":439
 *             raise ValueError(
 *                 "NonBondedInteractions[] expects two particle types as indices.")
 *         return NonBondedInteractionHandle(key[0], key[1])             # <<<<<<<<<<<<<<
 * 
 *     def set_force_cap(self, cap):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_NonBondedInteractionHandle); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_key, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_key, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, __pyx_t_8};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, __pyx_t_8};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_11 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_t_8);
    __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_11, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":432
 *     """
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         if not isinstance(key, tuple):
 *             raise ValueError(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("espressomd.interactions.NonBondedInteractions.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":441
 *         return NonBondedInteractionHandle(key[0], key[1])
 * 
 *     def set_force_cap(self, cap):             # <<<<<<<<<<<<<<
 *         if forcecap_set_params(cap):
 *             raise Exception("Could not set forcecap")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_21NonBondedInteractions_3set_force_cap(PyObject *__pyx_v_self, PyObject *__pyx_v_cap); /*proto*/
static char __pyx_doc_10espressomd_12interactions_21NonBondedInteractions_2set_force_cap[] = "NonBondedInteractions.set_force_cap(self, cap)";
static PyObject *__pyx_pw_10espressomd_12interactions_21NonBondedInteractions_3set_force_cap(PyObject *__pyx_v_self, PyObject *__pyx_v_cap) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_force_cap (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_21NonBondedInteractions_2set_force_cap(((struct __pyx_obj_10espressomd_12interactions_NonBondedInteractions *)__pyx_v_self), ((PyObject *)__pyx_v_cap));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_21NonBondedInteractions_2set_force_cap(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_NonBondedInteractions *__pyx_v_self, PyObject *__pyx_v_cap) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("set_force_cap", 0);

  /* "espressomd/interactions.pyx":442
 * 
 *     def set_force_cap(self, cap):
 *         if forcecap_set_params(cap):             # <<<<<<<<<<<<<<
 *             raise Exception("Could not set forcecap")
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_cap); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 442, __pyx_L1_error)
  __pyx_t_2 = (forcecap_set_params(__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "espressomd/interactions.pyx":443
 *     def set_force_cap(self, cap):
 *         if forcecap_set_params(cap):
 *             raise Exception("Could not set forcecap")             # <<<<<<<<<<<<<<
 * 
 *     def get_force_cap(self):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 443, __pyx_L1_error)

    /* "espressomd/interactions.pyx":442
 * 
 *     def set_force_cap(self, cap):
 *         if forcecap_set_params(cap):             # <<<<<<<<<<<<<<
 *             raise Exception("Could not set forcecap")
 * 
 */
  }

  /* "espressomd/interactions.pyx":441
 *         return NonBondedInteractionHandle(key[0], key[1])
 * 
 *     def set_force_cap(self, cap):             # <<<<<<<<<<<<<<
 *         if forcecap_set_params(cap):
 *             raise Exception("Could not set forcecap")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("espressomd.interactions.NonBondedInteractions.set_force_cap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":445
 *             raise Exception("Could not set forcecap")
 * 
 *     def get_force_cap(self):             # <<<<<<<<<<<<<<
 *         return force_cap
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_21NonBondedInteractions_5get_force_cap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_21NonBondedInteractions_4get_force_cap[] = "NonBondedInteractions.get_force_cap(self)";
static PyObject *__pyx_pw_10espressomd_12interactions_21NonBondedInteractions_5get_force_cap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_force_cap (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_21NonBondedInteractions_4get_force_cap(((struct __pyx_obj_10espressomd_12interactions_NonBondedInteractions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_21NonBondedInteractions_4get_force_cap(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_NonBondedInteractions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_force_cap", 0);

  /* "espressomd/interactions.pyx":446
 * 
 *     def get_force_cap(self):
 *         return force_cap             # <<<<<<<<<<<<<<
 * 
 *     def __getstate__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(force_cap); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":445
 *             raise Exception("Could not set forcecap")
 * 
 *     def get_force_cap(self):             # <<<<<<<<<<<<<<
 *         return force_cap
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.NonBondedInteractions.get_force_cap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":448
 *         return force_cap
 * 
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         # contains info about ALL nonbonded interactions
 *         odict = NonBondedInteractionHandle(-1, -
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_21NonBondedInteractions_7__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_21NonBondedInteractions_6__getstate__[] = "NonBondedInteractions.__getstate__(self)";
static PyObject *__pyx_pw_10espressomd_12interactions_21NonBondedInteractions_7__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getstate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_21NonBondedInteractions_6__getstate__(((struct __pyx_obj_10espressomd_12interactions_NonBondedInteractions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_21NonBondedInteractions_6__getstate__(struct __pyx_obj_10espressomd_12interactions_NonBondedInteractions *__pyx_v_self) {
  PyObject *__pyx_v_odict = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__getstate__", 0);

  /* "espressomd/interactions.pyx":450
 *     def __getstate__(self):
 *         # contains info about ALL nonbonded interactions
 *         odict = NonBondedInteractionHandle(-1, -             # <<<<<<<<<<<<<<
 *                                            1).lennard_jones.user_interactions
 *         odict['force_cap'] = self.get_force_cap()
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_NonBondedInteractionHandle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":451
 *         # contains info about ALL nonbonded interactions
 *         odict = NonBondedInteractionHandle(-1, -
 *                                            1).lennard_jones.user_interactions             # <<<<<<<<<<<<<<
 *         odict['force_cap'] = self.get_force_cap()
 *         return odict
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_lennard_jones); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_user_interactions); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_odict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":452
 *         odict = NonBondedInteractionHandle(-1, -
 *                                            1).lennard_jones.user_interactions
 *         odict['force_cap'] = self.get_force_cap()             # <<<<<<<<<<<<<<
 *         return odict
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_force_cap); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 452, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 452, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(PyObject_SetItem(__pyx_v_odict, __pyx_n_s_force_cap, __pyx_t_2) < 0)) __PYX_ERR(0, 452, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":453
 *                                            1).lennard_jones.user_interactions
 *         odict['force_cap'] = self.get_force_cap()
 *         return odict             # <<<<<<<<<<<<<<
 * 
 *     def __setstate__(self, odict):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_odict);
  __pyx_r = __pyx_v_odict;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":448
 *         return force_cap
 * 
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         # contains info about ALL nonbonded interactions
 *         odict = NonBondedInteractionHandle(-1, -
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("espressomd.interactions.NonBondedInteractions.__getstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_odict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":455
 *         return odict
 * 
 *     def __setstate__(self, odict):             # <<<<<<<<<<<<<<
 *         self.set_force_cap(odict['force_cap'])
 *         del odict['force_cap']
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_21NonBondedInteractions_9__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_odict); /*proto*/
static char __pyx_doc_10espressomd_12interactions_21NonBondedInteractions_8__setstate__[] = "NonBondedInteractions.__setstate__(self, odict)";
static PyObject *__pyx_pw_10espressomd_12interactions_21NonBondedInteractions_9__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_odict) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_21NonBondedInteractions_8__setstate__(((struct __pyx_obj_10espressomd_12interactions_NonBondedInteractions *)__pyx_v_self), ((PyObject *)__pyx_v_odict));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_21NonBondedInteractions_8__setstate__(struct __pyx_obj_10espressomd_12interactions_NonBondedInteractions *__pyx_v_self, PyObject *__pyx_v_odict) {
  PyObject *__pyx_v__type1 = NULL;
  PyObject *__pyx_v__type2 = NULL;
  PyObject *__pyx_v_attrs = NULL;
  PyObject *__pyx_v_a = NULL;
  PyObject *__pyx_v_attr_ref = NULL;
  PyObject *__pyx_v_type_name_ref = NULL;
  PyObject *__pyx_v_inter_instance = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  __Pyx_RefNannySetupContext("__setstate__", 0);

  /* "espressomd/interactions.pyx":456
 * 
 *     def __setstate__(self, odict):
 *         self.set_force_cap(odict['force_cap'])             # <<<<<<<<<<<<<<
 *         del odict['force_cap']
 *         for _type1 in odict:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_force_cap); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_v_odict, __pyx_n_s_force_cap); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 456, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 456, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 456, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 456, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 456, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":457
 *     def __setstate__(self, odict):
 *         self.set_force_cap(odict['force_cap'])
 *         del odict['force_cap']             # <<<<<<<<<<<<<<
 *         for _type1 in odict:
 *             for _type2 in odict[_type1]:
 */
  if (unlikely(PyObject_DelItem(__pyx_v_odict, __pyx_n_s_force_cap) < 0)) __PYX_ERR(0, 457, __pyx_L1_error)

  /* "espressomd/interactions.pyx":458
 *         self.set_force_cap(odict['force_cap'])
 *         del odict['force_cap']
 *         for _type1 in odict:             # <<<<<<<<<<<<<<
 *             for _type2 in odict[_type1]:
 *                 attrs = dir(NonBondedInteractionHandle(_type1, _type2))
 */
  if (likely(PyList_CheckExact(__pyx_v_odict)) || PyTuple_CheckExact(__pyx_v_odict)) {
    __pyx_t_1 = __pyx_v_odict; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_odict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 458, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 458, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 458, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 458, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 458, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_7(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 458, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v__type1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "espressomd/interactions.pyx":459
 *         del odict['force_cap']
 *         for _type1 in odict:
 *             for _type2 in odict[_type1]:             # <<<<<<<<<<<<<<
 *                 attrs = dir(NonBondedInteractionHandle(_type1, _type2))
 *                 for a in attrs:
 */
    __pyx_t_2 = PyObject_GetItem(__pyx_v_odict, __pyx_v__type1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_5 = __pyx_t_2; __Pyx_INCREF(__pyx_t_5); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 459, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_9 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 459, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 459, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 459, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 459, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 459, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_9(__pyx_t_5);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 459, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v__type2, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "espressomd/interactions.pyx":460
 *         for _type1 in odict:
 *             for _type2 in odict[_type1]:
 *                 attrs = dir(NonBondedInteractionHandle(_type1, _type2))             # <<<<<<<<<<<<<<
 *                 for a in attrs:
 *                     attr_ref = getattr(
 */
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_NonBondedInteractionHandle); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 460, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_10 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v__type1, __pyx_v__type2};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 460, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v__type1, __pyx_v__type2};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 460, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_11 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 460, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (__pyx_t_4) {
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_4); __pyx_t_4 = NULL;
        }
        __Pyx_INCREF(__pyx_v__type1);
        __Pyx_GIVEREF(__pyx_v__type1);
        PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_v__type1);
        __Pyx_INCREF(__pyx_v__type2);
        __Pyx_GIVEREF(__pyx_v__type2);
        PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_v__type2);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 460, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_Dir(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 460, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_attrs, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "espressomd/interactions.pyx":461
 *             for _type2 in odict[_type1]:
 *                 attrs = dir(NonBondedInteractionHandle(_type1, _type2))
 *                 for a in attrs:             # <<<<<<<<<<<<<<
 *                     attr_ref = getattr(
 *                         NonBondedInteractionHandle(_type1, _type2), a)
 */
      if (likely(PyList_CheckExact(__pyx_v_attrs)) || PyTuple_CheckExact(__pyx_v_attrs)) {
        __pyx_t_3 = __pyx_v_attrs; __Pyx_INCREF(__pyx_t_3); __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
      } else {
        __pyx_t_12 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_attrs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 461, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_13 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 461, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_13)) {
          if (likely(PyList_CheckExact(__pyx_t_3))) {
            if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_12); __Pyx_INCREF(__pyx_t_2); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 461, __pyx_L1_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 461, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          } else {
            if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_12); __Pyx_INCREF(__pyx_t_2); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 461, __pyx_L1_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 461, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          }
        } else {
          __pyx_t_2 = __pyx_t_13(__pyx_t_3);
          if (unlikely(!__pyx_t_2)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 461, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_2);
        }
        __Pyx_XDECREF_SET(__pyx_v_a, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "espressomd/interactions.pyx":463
 *                 for a in attrs:
 *                     attr_ref = getattr(
 *                         NonBondedInteractionHandle(_type1, _type2), a)             # <<<<<<<<<<<<<<
 *                     type_name_ref = getattr(attr_ref, "type_name", None)
 *                     if callable(type_name_ref) and type_name_ref() == odict[_type1][_type2]['type_name']:
 */
        __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_NonBondedInteractionHandle); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 463, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_4 = NULL;
        __pyx_t_10 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_10 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_11)) {
          PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v__type1, __pyx_v__type2};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 463, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
          PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v__type1, __pyx_v__type2};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 463, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_14 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 463, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          if (__pyx_t_4) {
            __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_4); __pyx_t_4 = NULL;
          }
          __Pyx_INCREF(__pyx_v__type1);
          __Pyx_GIVEREF(__pyx_v__type1);
          PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_10, __pyx_v__type1);
          __Pyx_INCREF(__pyx_v__type2);
          __Pyx_GIVEREF(__pyx_v__type2);
          PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_10, __pyx_v__type2);
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_14, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 463, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "espressomd/interactions.pyx":462
 *                 attrs = dir(NonBondedInteractionHandle(_type1, _type2))
 *                 for a in attrs:
 *                     attr_ref = getattr(             # <<<<<<<<<<<<<<
 *                         NonBondedInteractionHandle(_type1, _type2), a)
 *                     type_name_ref = getattr(attr_ref, "type_name", None)
 */
        __pyx_t_11 = __Pyx_GetAttr(__pyx_t_2, __pyx_v_a); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 462, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF_SET(__pyx_v_attr_ref, __pyx_t_11);
        __pyx_t_11 = 0;

        /* "espressomd/interactions.pyx":464
 *                     attr_ref = getattr(
 *                         NonBondedInteractionHandle(_type1, _type2), a)
 *                     type_name_ref = getattr(attr_ref, "type_name", None)             # <<<<<<<<<<<<<<
 *                     if callable(type_name_ref) and type_name_ref() == odict[_type1][_type2]['type_name']:
 *                         # found nonbonded inter, e.g.
 */
        __pyx_t_11 = __Pyx_GetAttr3(__pyx_v_attr_ref, __pyx_n_s_type_name, Py_None); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 464, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_XDECREF_SET(__pyx_v_type_name_ref, __pyx_t_11);
        __pyx_t_11 = 0;

        /* "espressomd/interactions.pyx":465
 *                         NonBondedInteractionHandle(_type1, _type2), a)
 *                     type_name_ref = getattr(attr_ref, "type_name", None)
 *                     if callable(type_name_ref) and type_name_ref() == odict[_type1][_type2]['type_name']:             # <<<<<<<<<<<<<<
 *                         # found nonbonded inter, e.g.
 *                         # LennardJonesInteraction(_type1, _type2)
 */
        __pyx_t_16 = __Pyx_PyCallable_Check(__pyx_v_type_name_ref); if (unlikely(__pyx_t_16 == -1)) __PYX_ERR(0, 465, __pyx_L1_error)
        __pyx_t_17 = (__pyx_t_16 != 0);
        if (__pyx_t_17) {
        } else {
          __pyx_t_15 = __pyx_t_17;
          goto __pyx_L10_bool_binop_done;
        }
        __Pyx_INCREF(__pyx_v_type_name_ref);
        __pyx_t_2 = __pyx_v_type_name_ref; __pyx_t_14 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_14)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_14);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        if (__pyx_t_14) {
          __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_14); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 465, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        } else {
          __pyx_t_11 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 465, __pyx_L1_error)
        }
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyObject_GetItem(__pyx_v_odict, __pyx_v__type1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 465, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_14 = PyObject_GetItem(__pyx_t_2, __pyx_v__type2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 465, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyObject_GetItem(__pyx_t_14, __pyx_n_s_type_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 465, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_14 = PyObject_RichCompare(__pyx_t_11, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_14); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 465, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely(__pyx_t_17 < 0)) __PYX_ERR(0, 465, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_15 = __pyx_t_17;
        __pyx_L10_bool_binop_done:;
        if (__pyx_t_15) {

          /* "espressomd/interactions.pyx":468
 *                         # found nonbonded inter, e.g.
 *                         # LennardJonesInteraction(_type1, _type2)
 *                         inter_instance = attr_ref             # <<<<<<<<<<<<<<
 *                         break
 *                     else:
 */
          __Pyx_INCREF(__pyx_v_attr_ref);
          __Pyx_XDECREF_SET(__pyx_v_inter_instance, __pyx_v_attr_ref);

          /* "espressomd/interactions.pyx":469
 *                         # LennardJonesInteraction(_type1, _type2)
 *                         inter_instance = attr_ref
 *                         break             # <<<<<<<<<<<<<<
 *                     else:
 *                         continue
 */
          goto __pyx_L8_break;

          /* "espressomd/interactions.pyx":465
 *                         NonBondedInteractionHandle(_type1, _type2), a)
 *                     type_name_ref = getattr(attr_ref, "type_name", None)
 *                     if callable(type_name_ref) and type_name_ref() == odict[_type1][_type2]['type_name']:             # <<<<<<<<<<<<<<
 *                         # found nonbonded inter, e.g.
 *                         # LennardJonesInteraction(_type1, _type2)
 */
        }

        /* "espressomd/interactions.pyx":471
 *                         break
 *                     else:
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                 del odict[_type1][_type2]['type_name']
 */
        /*else*/ {
          goto __pyx_L7_continue;
        }

        /* "espressomd/interactions.pyx":461
 *             for _type2 in odict[_type1]:
 *                 attrs = dir(NonBondedInteractionHandle(_type1, _type2))
 *                 for a in attrs:             # <<<<<<<<<<<<<<
 *                     attr_ref = getattr(
 *                         NonBondedInteractionHandle(_type1, _type2), a)
 */
        __pyx_L7_continue:;
      }
      __pyx_L8_break:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "espressomd/interactions.pyx":473
 *                         continue
 * 
 *                 del odict[_type1][_type2]['type_name']             # <<<<<<<<<<<<<<
 *                 inter_instance.set_params(**odict[_type1][_type2])
 * 
 */
      __pyx_t_3 = PyObject_GetItem(__pyx_v_odict, __pyx_v__type1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 473, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_14 = PyObject_GetItem(__pyx_t_3, __pyx_v__type2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 473, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(PyObject_DelItem(__pyx_t_14, __pyx_n_s_type_name) < 0)) __PYX_ERR(0, 473, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

      /* "espressomd/interactions.pyx":474
 * 
 *                 del odict[_type1][_type2]['type_name']
 *                 inter_instance.set_params(**odict[_type1][_type2])             # <<<<<<<<<<<<<<
 * 
 * 
 */
      if (unlikely(!__pyx_v_inter_instance)) { __Pyx_RaiseUnboundLocalError("inter_instance"); __PYX_ERR(0, 474, __pyx_L1_error) }
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_inter_instance, __pyx_n_s_set_params); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 474, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_2 = PyObject_GetItem(__pyx_v_odict, __pyx_v__type1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 474, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_11 = PyObject_GetItem(__pyx_t_2, __pyx_v__type2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 474, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(__pyx_t_11 == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
        __PYX_ERR(0, 474, __pyx_L1_error)
      }
      if (likely(PyDict_CheckExact(__pyx_t_11))) {
        __pyx_t_3 = PyDict_Copy(__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 474, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      } else {
        __pyx_t_3 = PyObject_CallFunctionObjArgs((PyObject*)&PyDict_Type, __pyx_t_11, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 474, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 474, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "espressomd/interactions.pyx":459
 *         del odict['force_cap']
 *         for _type1 in odict:
 *             for _type2 in odict[_type1]:             # <<<<<<<<<<<<<<
 *                 attrs = dir(NonBondedInteractionHandle(_type1, _type2))
 *                 for a in attrs:
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "espressomd/interactions.pyx":458
 *         self.set_force_cap(odict['force_cap'])
 *         del odict['force_cap']
 *         for _type1 in odict:             # <<<<<<<<<<<<<<
 *             for _type2 in odict[_type1]:
 *                 attrs = dir(NonBondedInteractionHandle(_type1, _type2))
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":455
 *         return odict
 * 
 *     def __setstate__(self, odict):             # <<<<<<<<<<<<<<
 *         self.set_force_cap(odict['force_cap'])
 *         del odict['force_cap']
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("espressomd.interactions.NonBondedInteractions.__setstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__type1);
  __Pyx_XDECREF(__pyx_v__type2);
  __Pyx_XDECREF(__pyx_v_attrs);
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_attr_ref);
  __Pyx_XDECREF(__pyx_v_type_name_ref);
  __Pyx_XDECREF(__pyx_v_inter_instance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":482
 *     _bond_id = -1
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         """
 *            Either called with an interaction id, in which case, the interaction
 */

/* Python wrapper */
static int __pyx_pw_10espressomd_12interactions_17BondedInteraction_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10espressomd_12interactions_17BondedInteraction___init__[] = "\n           Either called with an interaction id, in which case, the interaction\n           will represent the bonded interaction as it is defined in Espresso core\n           Or called with keyword arguments describing a new interaction.\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_10espressomd_12interactions_17BondedInteraction___init__;
#endif
static int __pyx_pw_10espressomd_12interactions_17BondedInteraction_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_10espressomd_12interactions_17BondedInteraction___init__(((struct __pyx_obj_10espressomd_12interactions_BondedInteraction *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10espressomd_12interactions_17BondedInteraction___init__(struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v_bond_id = NULL;
  PyObject *__pyx_v_k = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "espressomd/interactions.pyx":489
 *         """
 *         # Interaction id as argument
 *         if len(args) == 1 and isinstance(args[0], int):             # <<<<<<<<<<<<<<
 *             bond_id = args[0]
 *             # Check, if the bond in Espresso core is really defined as a FENE
 */
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 489, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyInt_Check(__pyx_t_4); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "espressomd/interactions.pyx":490
 *         # Interaction id as argument
 *         if len(args) == 1 and isinstance(args[0], int):
 *             bond_id = args[0]             # <<<<<<<<<<<<<<
 *             # Check, if the bond in Espresso core is really defined as a FENE
 *             # bond
 */
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 490, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_bond_id = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "espressomd/interactions.pyx":493
 *             # Check, if the bond in Espresso core is really defined as a FENE
 *             # bond
 *             if bonded_ia_params[bond_id].type != self.type_number():             # <<<<<<<<<<<<<<
 *                 raise Exception(
 *                     "The bond with this id is not defined as a " + self.type_name() + " bond in the Espresso core.")
 */
    __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_v_bond_id); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 493, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyInt_From_int((bonded_ia_params[__pyx_t_2]).type); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 493, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_type_number); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 493, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (__pyx_t_8) {
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 493, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else {
      __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 493, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_4, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 493, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 493, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_1) {

      /* "espressomd/interactions.pyx":495
 *             if bonded_ia_params[bond_id].type != self.type_number():
 *                 raise Exception(
 *                     "The bond with this id is not defined as a " + self.type_name() + " bond in the Espresso core.")             # <<<<<<<<<<<<<<
 * 
 *             self._bond_id = bond_id
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_type_name); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 495, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 495, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 495, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_Add(__pyx_kp_s_The_bond_with_this_id_is_not_def, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 495, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_Add(__pyx_t_6, __pyx_kp_s_bond_in_the_Espresso_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 495, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "espressomd/interactions.pyx":494
 *             # bond
 *             if bonded_ia_params[bond_id].type != self.type_number():
 *                 raise Exception(             # <<<<<<<<<<<<<<
 *                     "The bond with this id is not defined as a " + self.type_name() + " bond in the Espresso core.")
 * 
 */
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 494, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 494, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __PYX_ERR(0, 494, __pyx_L1_error)

      /* "espressomd/interactions.pyx":493
 *             # Check, if the bond in Espresso core is really defined as a FENE
 *             # bond
 *             if bonded_ia_params[bond_id].type != self.type_number():             # <<<<<<<<<<<<<<
 *                 raise Exception(
 *                     "The bond with this id is not defined as a " + self.type_name() + " bond in the Espresso core.")
 */
    }

    /* "espressomd/interactions.pyx":497
 *                     "The bond with this id is not defined as a " + self.type_name() + " bond in the Espresso core.")
 * 
 *             self._bond_id = bond_id             # <<<<<<<<<<<<<<
 * 
 *             # Load the parameters currently set in the Espresso core
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bond_id, __pyx_v_bond_id) < 0) __PYX_ERR(0, 497, __pyx_L1_error)

    /* "espressomd/interactions.pyx":500
 * 
 *             # Load the parameters currently set in the Espresso core
 *             self._params = self._get_params_from_es_core()             # <<<<<<<<<<<<<<
 *             self._bond_id = bond_id
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_params_from_es_core); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 500, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 500, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 500, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_params, __pyx_t_7) < 0) __PYX_ERR(0, 500, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "espressomd/interactions.pyx":501
 *             # Load the parameters currently set in the Espresso core
 *             self._params = self._get_params_from_es_core()
 *             self._bond_id = bond_id             # <<<<<<<<<<<<<<
 * 
 *         # Or have we been called with keyword args describing the interaction
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bond_id, __pyx_v_bond_id) < 0) __PYX_ERR(0, 501, __pyx_L1_error)

    /* "espressomd/interactions.pyx":489
 *         """
 *         # Interaction id as argument
 *         if len(args) == 1 and isinstance(args[0], int):             # <<<<<<<<<<<<<<
 *             bond_id = args[0]
 *             # Check, if the bond in Espresso core is really defined as a FENE
 */
    goto __pyx_L3;
  }

  /* "espressomd/interactions.pyx":504
 * 
 *         # Or have we been called with keyword args describing the interaction
 *         elif len(args) == 0:             # <<<<<<<<<<<<<<
 *             # Check if all required keys are given
 *             for k in self.required_keys():
 */
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 504, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_t_2 == 0) != 0);
  if (__pyx_t_1) {

    /* "espressomd/interactions.pyx":506
 *         elif len(args) == 0:
 *             # Check if all required keys are given
 *             for k in self.required_keys():             # <<<<<<<<<<<<<<
 *                 if k not in kwargs:
 *                     raise ValueError(
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_required_keys); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 506, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 506, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 506, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
      __pyx_t_6 = __pyx_t_7; __Pyx_INCREF(__pyx_t_6); __pyx_t_2 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_2 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 506, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 506, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_6))) {
          if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_2); __Pyx_INCREF(__pyx_t_7); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 506, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_6, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 506, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_2); __Pyx_INCREF(__pyx_t_7); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 506, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_6, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 506, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_9(__pyx_t_6);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 506, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "espressomd/interactions.pyx":507
 *             # Check if all required keys are given
 *             for k in self.required_keys():
 *                 if k not in kwargs:             # <<<<<<<<<<<<<<
 *                     raise ValueError(
 *                         "At least the following keys have to be given as keyword arguments: " + self.required_keys().__str__())
 */
      __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_k, __pyx_v_kwargs, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 507, __pyx_L1_error)
      __pyx_t_5 = (__pyx_t_1 != 0);
      if (__pyx_t_5) {

        /* "espressomd/interactions.pyx":509
 *                 if k not in kwargs:
 *                     raise ValueError(
 *                         "At least the following keys have to be given as keyword arguments: " + self.required_keys().__str__())             # <<<<<<<<<<<<<<
 * 
 *             self.params = kwargs
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_required_keys); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 509, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        if (__pyx_t_10) {
          __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 509, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else {
          __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 509, __pyx_L1_error)
        }
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_str); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 509, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        if (__pyx_t_4) {
          __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 509, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else {
          __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 509, __pyx_L1_error)
        }
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyNumber_Add(__pyx_kp_s_At_least_the_following_keys_have, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 509, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "espressomd/interactions.pyx":508
 *             for k in self.required_keys():
 *                 if k not in kwargs:
 *                     raise ValueError(             # <<<<<<<<<<<<<<
 *                         "At least the following keys have to be given as keyword arguments: " + self.required_keys().__str__())
 * 
 */
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 508, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 508, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_8, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __PYX_ERR(0, 508, __pyx_L1_error)

        /* "espressomd/interactions.pyx":507
 *             # Check if all required keys are given
 *             for k in self.required_keys():
 *                 if k not in kwargs:             # <<<<<<<<<<<<<<
 *                     raise ValueError(
 *                         "At least the following keys have to be given as keyword arguments: " + self.required_keys().__str__())
 */
      }

      /* "espressomd/interactions.pyx":506
 *         elif len(args) == 0:
 *             # Check if all required keys are given
 *             for k in self.required_keys():             # <<<<<<<<<<<<<<
 *                 if k not in kwargs:
 *                     raise ValueError(
 */
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "espressomd/interactions.pyx":511
 *                         "At least the following keys have to be given as keyword arguments: " + self.required_keys().__str__())
 * 
 *             self.params = kwargs             # <<<<<<<<<<<<<<
 * 
 *             # Validation of parameters
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_params_2, __pyx_v_kwargs) < 0) __PYX_ERR(0, 511, __pyx_L1_error)

    /* "espressomd/interactions.pyx":514
 * 
 *             # Validation of parameters
 *             self.validate_params()             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_validate_params); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (__pyx_t_7) {
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 514, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 514, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "espressomd/interactions.pyx":504
 * 
 *         # Or have we been called with keyword args describing the interaction
 *         elif len(args) == 0:             # <<<<<<<<<<<<<<
 *             # Check if all required keys are given
 *             for k in self.required_keys():
 */
    goto __pyx_L3;
  }

  /* "espressomd/interactions.pyx":517
 * 
 *         else:
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 "The constructor has to be called either with a bond id (as interger), or with a set of keyword arguments describing a new interaction")
 * 
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 517, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "espressomd/interactions.pyx":482
 *     _bond_id = -1
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         """
 *            Either called with an interaction id, in which case, the interaction
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("espressomd.interactions.BondedInteraction.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_bond_id);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":520
 *                 "The constructor has to be called either with a bond id (as interger), or with a set of keyword arguments describing a new interaction")
 * 
 *     def is_valid(self):             # <<<<<<<<<<<<<<
 *         """Check, if the data stored in the instance still matches what is in Espresso"""
 *         # Check if the bond type in Espresso still matches the bond type saved
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_3is_valid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_17BondedInteraction_2is_valid[] = "BondedInteraction.is_valid(self)\nCheck, if the data stored in the instance still matches what is in Espresso";
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_3is_valid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_valid (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_17BondedInteraction_2is_valid(((struct __pyx_obj_10espressomd_12interactions_BondedInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_2is_valid(struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self) {
  PyObject *__pyx_v_temp_params = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("is_valid", 0);

  /* "espressomd/interactions.pyx":524
 *         # Check if the bond type in Espresso still matches the bond type saved
 *         # in this class
 *         if bonded_ia_params[self._bond_id].type != self.type_number():             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bond_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int((bonded_ia_params[__pyx_t_2]).type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_type_number); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 524, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 524, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_6) {

    /* "espressomd/interactions.pyx":525
 *         # in this class
 *         if bonded_ia_params[self._bond_id].type != self.type_number():
 *             return False             # <<<<<<<<<<<<<<
 * 
 *         # check, if the bond parameters saved in the class still match those
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "espressomd/interactions.pyx":524
 *         # Check if the bond type in Espresso still matches the bond type saved
 *         # in this class
 *         if bonded_ia_params[self._bond_id].type != self.type_number():             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
  }

  /* "espressomd/interactions.pyx":529
 *         # check, if the bond parameters saved in the class still match those
 *         # saved in Espresso
 *         temp_params = self._get_params_from_es_core()             # <<<<<<<<<<<<<<
 *         if self._params != temp_params:
 *             return False
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_params_from_es_core); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 529, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 529, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_temp_params = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "espressomd/interactions.pyx":530
 *         # saved in Espresso
 *         temp_params = self._get_params_from_es_core()
 *         if self._params != temp_params:             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_params); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_v_temp_params, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_6) {

    /* "espressomd/interactions.pyx":531
 *         temp_params = self._get_params_from_es_core()
 *         if self._params != temp_params:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *         # If we're still here, the instance is valid
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "espressomd/interactions.pyx":530
 *         # saved in Espresso
 *         temp_params = self._get_params_from_es_core()
 *         if self._params != temp_params:             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
  }

  /* "espressomd/interactions.pyx":534
 * 
 *         # If we're still here, the instance is valid
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     property params:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_True);
  __pyx_r = Py_True;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":520
 *                 "The constructor has to be called either with a bond id (as interger), or with a set of keyword arguments describing a new interaction")
 * 
 *     def is_valid(self):             # <<<<<<<<<<<<<<
 *         """Check, if the data stored in the instance still matches what is in Espresso"""
 *         # Check if the bond type in Espresso still matches the bond type saved
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("espressomd.interactions.BondedInteraction.is_valid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_temp_params);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":537
 * 
 *     property params:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._params
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_6params_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_6params_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_17BondedInteraction_6params___get__(((struct __pyx_obj_10espressomd_12interactions_BondedInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_6params___get__(struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/interactions.pyx":538
 *     property params:
 *         def __get__(self):
 *             return self._params             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, p):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_params); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":537
 * 
 *     property params:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._params
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.BondedInteraction.params.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":540
 *             return self._params
 * 
 *         def __set__(self, p):             # <<<<<<<<<<<<<<
 *             # Check, if any key was passed, which is not known
 *             for k in p.keys():
 */

/* Python wrapper */
static int __pyx_pw_10espressomd_12interactions_17BondedInteraction_6params_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_p); /*proto*/
static int __pyx_pw_10espressomd_12interactions_17BondedInteraction_6params_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_p) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_17BondedInteraction_6params_2__set__(((struct __pyx_obj_10espressomd_12interactions_BondedInteraction *)__pyx_v_self), ((PyObject *)__pyx_v_p));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10espressomd_12interactions_17BondedInteraction_6params_2__set__(struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self, PyObject *__pyx_v_p) {
  PyObject *__pyx_v_k = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "espressomd/interactions.pyx":542
 *         def __set__(self, p):
 *             # Check, if any key was passed, which is not known
 *             for k in p.keys():             # <<<<<<<<<<<<<<
 *                 if k not in self.valid_keys():
 *                     raise ValueError(
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_p, __pyx_n_s_keys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 542, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 542, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 542, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 542, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 542, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 542, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 542, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 542, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 542, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "espressomd/interactions.pyx":543
 *             # Check, if any key was passed, which is not known
 *             for k in p.keys():
 *                 if k not in self.valid_keys():             # <<<<<<<<<<<<<<
 *                     raise ValueError(
 *                         "Only the following keys are supported: " + self.valid_keys().__str__)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_valid_keys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 543, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 543, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_v_k, __pyx_t_1, Py_NE)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 543, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = (__pyx_t_7 != 0);
    if (__pyx_t_8) {

      /* "espressomd/interactions.pyx":545
 *                 if k not in self.valid_keys():
 *                     raise ValueError(
 *                         "Only the following keys are supported: " + self.valid_keys().__str__)             # <<<<<<<<<<<<<<
 * 
 *             # Initialize default values
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_valid_keys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 545, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_6) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 545, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else {
        __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 545, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_str); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 545, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Add(__pyx_kp_s_Only_the_following_keys_are_supp, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 545, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "espressomd/interactions.pyx":544
 *             for k in p.keys():
 *                 if k not in self.valid_keys():
 *                     raise ValueError(             # <<<<<<<<<<<<<<
 *                         "Only the following keys are supported: " + self.valid_keys().__str__)
 * 
 */
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 544, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 544, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 544, __pyx_L1_error)

      /* "espressomd/interactions.pyx":543
 *             # Check, if any key was passed, which is not known
 *             for k in p.keys():
 *                 if k not in self.valid_keys():             # <<<<<<<<<<<<<<
 *                     raise ValueError(
 *                         "Only the following keys are supported: " + self.valid_keys().__str__)
 */
    }

    /* "espressomd/interactions.pyx":542
 *         def __set__(self, p):
 *             # Check, if any key was passed, which is not known
 *             for k in p.keys():             # <<<<<<<<<<<<<<
 *                 if k not in self.valid_keys():
 *                     raise ValueError(
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":548
 * 
 *             # Initialize default values
 *             self.set_default_params()             # <<<<<<<<<<<<<<
 *             # Put in values given by the user
 *             self._params.update(p)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_default_params); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 548, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 548, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":550
 *             self.set_default_params()
 *             # Put in values given by the user
 *             self._params.update(p)             # <<<<<<<<<<<<<<
 * 
 *     def validate_params(self):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_params); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_update); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_p); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 550, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_v_p};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 550, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_v_p};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 550, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 550, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1); __pyx_t_1 = NULL;
      __Pyx_INCREF(__pyx_v_p);
      __Pyx_GIVEREF(__pyx_v_p);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_p);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 550, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":540
 *             return self._params
 * 
 *         def __set__(self, p):             # <<<<<<<<<<<<<<
 *             # Check, if any key was passed, which is not known
 *             for k in p.keys():
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("espressomd.interactions.BondedInteraction.params.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":552
 *             self._params.update(p)
 * 
 *     def validate_params(self):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_5validate_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_17BondedInteraction_4validate_params[] = "BondedInteraction.validate_params(self)";
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_5validate_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("validate_params (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_17BondedInteraction_4validate_params(((struct __pyx_obj_10espressomd_12interactions_BondedInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_4validate_params(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("validate_params", 0);

  /* "espressomd/interactions.pyx":553
 * 
 *     def validate_params(self):
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     def __getattribute__(self, name):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_True);
  __pyx_r = Py_True;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":552
 *             self._params.update(p)
 * 
 *     def validate_params(self):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":555
 *         return True
 * 
 *     def __getattribute__(self, name):             # <<<<<<<<<<<<<<
 *         """Every time _set_params_in_es_core is called, the parameter dict is also updated."""
 *         attr = object.__getattribute__(self, name)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_7__getattribute__(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_10espressomd_12interactions_17BondedInteraction_6__getattribute__[] = "BondedInteraction.__getattribute__(self, name)\nEvery time _set_params_in_es_core is called, the parameter dict is also updated.";
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_7__getattribute__(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattribute__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_17BondedInteraction_6__getattribute__(((struct __pyx_obj_10espressomd_12interactions_BondedInteraction *)__pyx_v_self), ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":559
 *         attr = object.__getattribute__(self, name)
 *         if hasattr(attr, '__call__') and attr.__name__ == "_set_params_in_es_core":
 *             def sync_params(*args, **kwargs):             # <<<<<<<<<<<<<<
 *                 result = attr(*args, **kwargs)
 *                 self._params.update(self._get_params_from_es_core())
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_16__getattribute___1sync_params(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_10espressomd_12interactions_17BondedInteraction_16__getattribute___1sync_params = {"sync_params", (PyCFunction)__pyx_pw_10espressomd_12interactions_17BondedInteraction_16__getattribute___1sync_params, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_16__getattribute___1sync_params(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sync_params (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "sync_params", 1))) return NULL;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return NULL;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_10espressomd_12interactions_17BondedInteraction_16__getattribute___sync_params(__pyx_self, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_16__getattribute___sync_params(PyObject *__pyx_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_1___getattribute__ *__pyx_cur_scope;
  struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_1___getattribute__ *__pyx_outer_scope;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("sync_params", 0);
  __pyx_outer_scope = (struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_1___getattribute__ *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "espressomd/interactions.pyx":560
 *         if hasattr(attr, '__call__') and attr.__name__ == "_set_params_in_es_core":
 *             def sync_params(*args, **kwargs):
 *                 result = attr(*args, **kwargs)             # <<<<<<<<<<<<<<
 *                 self._params.update(self._get_params_from_es_core())
 *                 return result
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_attr)) { __Pyx_RaiseClosureNameError("attr"); __PYX_ERR(0, 560, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_v_attr, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":561
 *             def sync_params(*args, **kwargs):
 *                 result = attr(*args, **kwargs)
 *                 self._params.update(self._get_params_from_es_core())             # <<<<<<<<<<<<<<
 *                 return result
 *             return sync_params
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 561, __pyx_L1_error) }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_update); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_cur_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 561, __pyx_L1_error) }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_get_params_from_es_core); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 561, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 561, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 561, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 561, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 561, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 561, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 561, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":562
 *                 result = attr(*args, **kwargs)
 *                 self._params.update(self._get_params_from_es_core())
 *                 return result             # <<<<<<<<<<<<<<
 *             return sync_params
 *         else:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":559
 *         attr = object.__getattribute__(self, name)
 *         if hasattr(attr, '__call__') and attr.__name__ == "_set_params_in_es_core":
 *             def sync_params(*args, **kwargs):             # <<<<<<<<<<<<<<
 *                 result = attr(*args, **kwargs)
 *                 self._params.update(self._get_params_from_es_core())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("espressomd.interactions.BondedInteraction.__getattribute__.sync_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":555
 *         return True
 * 
 *     def __getattribute__(self, name):             # <<<<<<<<<<<<<<
 *         """Every time _set_params_in_es_core is called, the parameter dict is also updated."""
 *         attr = object.__getattribute__(self, name)
 */

static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_6__getattribute__(struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self, PyObject *__pyx_v_name) {
  struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_1___getattribute__ *__pyx_cur_scope;
  PyObject *__pyx_v_sync_params = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("__getattribute__", 0);
  __pyx_cur_scope = (struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_1___getattribute__ *)__pyx_tp_new_10espressomd_12interactions___pyx_scope_struct_1___getattribute__(__pyx_ptype_10espressomd_12interactions___pyx_scope_struct_1___getattribute__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_1___getattribute__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 555, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "espressomd/interactions.pyx":557
 *     def __getattribute__(self, name):
 *         """Every time _set_params_in_es_core is called, the parameter dict is also updated."""
 *         attr = object.__getattribute__(self, name)             # <<<<<<<<<<<<<<
 *         if hasattr(attr, '__call__') and attr.__name__ == "_set_params_in_es_core":
 *             def sync_params(*args, **kwargs):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_builtin_object, __pyx_n_s_getattribute); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, ((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_v_name};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 557, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, ((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_v_name};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 557, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, ((PyObject *)__pyx_cur_scope->__pyx_v_self));
    __Pyx_INCREF(__pyx_v_name);
    __Pyx_GIVEREF(__pyx_v_name);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_name);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_attr = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":558
 *         """Every time _set_params_in_es_core is called, the parameter dict is also updated."""
 *         attr = object.__getattribute__(self, name)
 *         if hasattr(attr, '__call__') and attr.__name__ == "_set_params_in_es_core":             # <<<<<<<<<<<<<<
 *             def sync_params(*args, **kwargs):
 *                 result = attr(*args, **kwargs)
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_attr;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_7 = PyObject_HasAttr(__pyx_t_1, __pyx_n_s_call); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {
  } else {
    __pyx_t_6 = __pyx_t_8;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_attr, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_set_params_in_es_core, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __pyx_t_8;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_6) {

    /* "espressomd/interactions.pyx":559
 *         attr = object.__getattribute__(self, name)
 *         if hasattr(attr, '__call__') and attr.__name__ == "_set_params_in_es_core":
 *             def sync_params(*args, **kwargs):             # <<<<<<<<<<<<<<
 *                 result = attr(*args, **kwargs)
 *                 self._params.update(self._get_params_from_es_core())
 */
    __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_17BondedInteraction_16__getattribute___1sync_params, 0, __pyx_n_s_getattribute___locals_sync_par, ((PyObject*)__pyx_cur_scope), __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__26)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_sync_params = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "espressomd/interactions.pyx":563
 *                 self._params.update(self._get_params_from_es_core())
 *                 return result
 *             return sync_params             # <<<<<<<<<<<<<<
 *         else:
 *             return attr
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_sync_params);
    __pyx_r = __pyx_v_sync_params;
    goto __pyx_L0;

    /* "espressomd/interactions.pyx":558
 *         """Every time _set_params_in_es_core is called, the parameter dict is also updated."""
 *         attr = object.__getattribute__(self, name)
 *         if hasattr(attr, '__call__') and attr.__name__ == "_set_params_in_es_core":             # <<<<<<<<<<<<<<
 *             def sync_params(*args, **kwargs):
 *                 result = attr(*args, **kwargs)
 */
  }

  /* "espressomd/interactions.pyx":565
 *             return sync_params
 *         else:
 *             return attr             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_attr);
    __pyx_r = __pyx_cur_scope->__pyx_v_attr;
    goto __pyx_L0;
  }

  /* "espressomd/interactions.pyx":555
 *         return True
 * 
 *     def __getattribute__(self, name):             # <<<<<<<<<<<<<<
 *         """Every time _set_params_in_es_core is called, the parameter dict is also updated."""
 *         attr = object.__getattribute__(self, name)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("espressomd.interactions.BondedInteraction.__getattribute__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sync_params);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":568
 * 
 * 
 *     def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             "Subclasses of BondedInteraction must define the _get_params_from_es_core() method.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_9_get_params_from_es_core(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_17BondedInteraction_8_get_params_from_es_core[] = "BondedInteraction._get_params_from_es_core(self)";
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_9_get_params_from_es_core(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_params_from_es_core (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_17BondedInteraction_8_get_params_from_es_core(((struct __pyx_obj_10espressomd_12interactions_BondedInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_8_get_params_from_es_core(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_get_params_from_es_core", 0);

  /* "espressomd/interactions.pyx":569
 * 
 *     def _get_params_from_es_core(self):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             "Subclasses of BondedInteraction must define the _get_params_from_es_core() method.")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 569, __pyx_L1_error)

  /* "espressomd/interactions.pyx":568
 * 
 * 
 *     def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             "Subclasses of BondedInteraction must define the _get_params_from_es_core() method.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.BondedInteraction._get_params_from_es_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":572
 *             "Subclasses of BondedInteraction must define the _get_params_from_es_core() method.")
 * 
 *     def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             "Subclasses of BondedInteraction must define the _set_params_in_es_core() method.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_11_set_params_in_es_core(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_17BondedInteraction_10_set_params_in_es_core[] = "BondedInteraction._set_params_in_es_core(self)";
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_11_set_params_in_es_core(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_params_in_es_core (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_17BondedInteraction_10_set_params_in_es_core(((struct __pyx_obj_10espressomd_12interactions_BondedInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_10_set_params_in_es_core(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_set_params_in_es_core", 0);

  /* "espressomd/interactions.pyx":573
 * 
 *     def _set_params_in_es_core(self):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             "Subclasses of BondedInteraction must define the _set_params_in_es_core() method.")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 573, __pyx_L1_error)

  /* "espressomd/interactions.pyx":572
 *             "Subclasses of BondedInteraction must define the _get_params_from_es_core() method.")
 * 
 *     def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             "Subclasses of BondedInteraction must define the _set_params_in_es_core() method.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.BondedInteraction._set_params_in_es_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":576
 *             "Subclasses of BondedInteraction must define the _set_params_in_es_core() method.")
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self.__class__.__name__ + "(" + str(self._params) + ")"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_13__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_13__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_17BondedInteraction_12__str__(((struct __pyx_obj_10espressomd_12interactions_BondedInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_12__str__(struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "espressomd/interactions.pyx":577
 * 
 *     def __str__(self):
 *         return self.__class__.__name__ + "(" + str(self._params) + ")"             # <<<<<<<<<<<<<<
 * 
 *     def set_default_params(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_s__2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":576
 *             "Subclasses of BondedInteraction must define the _set_params_in_es_core() method.")
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self.__class__.__name__ + "(" + str(self._params) + ")"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("espressomd.interactions.BondedInteraction.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":579
 *         return self.__class__.__name__ + "(" + str(self._params) + ")"
 * 
 *     def set_default_params(self):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             "Subclasses of BondedInteraction must define the set_default_params() method.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_15set_default_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_17BondedInteraction_14set_default_params[] = "BondedInteraction.set_default_params(self)";
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_15set_default_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_default_params (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_17BondedInteraction_14set_default_params(((struct __pyx_obj_10espressomd_12interactions_BondedInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_14set_default_params(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_default_params", 0);

  /* "espressomd/interactions.pyx":580
 * 
 *     def set_default_params(self):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             "Subclasses of BondedInteraction must define the set_default_params() method.")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 580, __pyx_L1_error)

  /* "espressomd/interactions.pyx":579
 *         return self.__class__.__name__ + "(" + str(self._params) + ")"
 * 
 *     def set_default_params(self):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             "Subclasses of BondedInteraction must define the set_default_params() method.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.BondedInteraction.set_default_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":583
 *             "Subclasses of BondedInteraction must define the set_default_params() method.")
 * 
 *     def type_number(self):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             "Subclasses of BondedInteraction must define the type_number() method.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_17type_number(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_17BondedInteraction_16type_number[] = "BondedInteraction.type_number(self)";
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_17type_number(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_number (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_17BondedInteraction_16type_number(((struct __pyx_obj_10espressomd_12interactions_BondedInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_16type_number(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("type_number", 0);

  /* "espressomd/interactions.pyx":584
 * 
 *     def type_number(self):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             "Subclasses of BondedInteraction must define the type_number() method.")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 584, __pyx_L1_error)

  /* "espressomd/interactions.pyx":583
 *             "Subclasses of BondedInteraction must define the set_default_params() method.")
 * 
 *     def type_number(self):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             "Subclasses of BondedInteraction must define the type_number() method.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.BondedInteraction.type_number", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":587
 *             "Subclasses of BondedInteraction must define the type_number() method.")
 * 
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             "Subclasses of BondedInteraction must define the type_name() method.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_19type_name(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_17BondedInteraction_18type_name[] = "BondedInteraction.type_name(self)";
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_19type_name(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_name (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_17BondedInteraction_18type_name(((struct __pyx_obj_10espressomd_12interactions_BondedInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_18type_name(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("type_name", 0);

  /* "espressomd/interactions.pyx":588
 * 
 *     def type_name(self):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             "Subclasses of BondedInteraction must define the type_name() method.")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 588, __pyx_L1_error)

  /* "espressomd/interactions.pyx":587
 *             "Subclasses of BondedInteraction must define the type_number() method.")
 * 
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             "Subclasses of BondedInteraction must define the type_name() method.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.BondedInteraction.type_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":591
 *             "Subclasses of BondedInteraction must define the type_name() method.")
 * 
 *     def valid_keys(self):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             "Subclasses of BondedInteraction must define the valid_keys() method.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_21valid_keys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_17BondedInteraction_20valid_keys[] = "BondedInteraction.valid_keys(self)";
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_21valid_keys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("valid_keys (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_17BondedInteraction_20valid_keys(((struct __pyx_obj_10espressomd_12interactions_BondedInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_20valid_keys(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("valid_keys", 0);

  /* "espressomd/interactions.pyx":592
 * 
 *     def valid_keys(self):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             "Subclasses of BondedInteraction must define the valid_keys() method.")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 592, __pyx_L1_error)

  /* "espressomd/interactions.pyx":591
 *             "Subclasses of BondedInteraction must define the type_name() method.")
 * 
 *     def valid_keys(self):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             "Subclasses of BondedInteraction must define the valid_keys() method.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.BondedInteraction.valid_keys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":595
 *             "Subclasses of BondedInteraction must define the valid_keys() method.")
 * 
 *     def required_keys(self):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             "Subclasses of BondedInteraction must define the required_keys() method.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_23required_keys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10espressomd_12interactions_17BondedInteraction_22required_keys[] = "BondedInteraction.required_keys(self)";
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_23required_keys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("required_keys (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_17BondedInteraction_22required_keys(((struct __pyx_obj_10espressomd_12interactions_BondedInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_22required_keys(CYTHON_UNUSED struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("required_keys", 0);

  /* "espressomd/interactions.pyx":596
 * 
 *     def required_keys(self):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             "Subclasses of BondedInteraction must define the required_keys() method.")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 596, __pyx_L1_error)

  /* "espressomd/interactions.pyx":595
 *             "Subclasses of BondedInteraction must define the valid_keys() method.")
 * 
 *     def required_keys(self):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             "Subclasses of BondedInteraction must define the required_keys() method.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.BondedInteraction.required_keys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":599
 *             "Subclasses of BondedInteraction must define the required_keys() method.")
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         if self._bond_id == -1:
 *             id_str = "inactive"
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_25__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_25__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_17BondedInteraction_24__repr__(((struct __pyx_obj_10espressomd_12interactions_BondedInteraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_24__repr__(struct __pyx_obj_10espressomd_12interactions_BondedInteraction *__pyx_v_self) {
  PyObject *__pyx_v_id_str = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "espressomd/interactions.pyx":600
 * 
 *     def __repr__(self):
 *         if self._bond_id == -1:             # <<<<<<<<<<<<<<
 *             id_str = "inactive"
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bond_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_t_1, __pyx_int_neg_1, -1L, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "espressomd/interactions.pyx":601
 *     def __repr__(self):
 *         if self._bond_id == -1:
 *             id_str = "inactive"             # <<<<<<<<<<<<<<
 *         else:
 *             id_str = str(self._bond_id)
 */
    __Pyx_INCREF(__pyx_n_s_inactive);
    __pyx_v_id_str = __pyx_n_s_inactive;

    /* "espressomd/interactions.pyx":600
 * 
 *     def __repr__(self):
 *         if self._bond_id == -1:             # <<<<<<<<<<<<<<
 *             id_str = "inactive"
 *         else:
 */
    goto __pyx_L3;
  }

  /* "espressomd/interactions.pyx":603
 *             id_str = "inactive"
 *         else:
 *             id_str = str(self._bond_id)             # <<<<<<<<<<<<<<
 * 
 *         return self.__class__.__name__ + "(" + id_str + "): " + self._params.__str__()
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bond_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_id_str = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "espressomd/interactions.pyx":605
 *             id_str = str(self._bond_id)
 * 
 *         return self.__class__.__name__ + "(" + id_str + "): " + self._params.__str__()             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(self, other, i):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s__2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_v_id_str); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s__34); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_params); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_str); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 605, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 605, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":599
 *             "Subclasses of BondedInteraction must define the required_keys() method.")
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         if self._bond_id == -1:
 *             id_str = "inactive"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("espressomd.interactions.BondedInteraction.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_id_str);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":607
 *         return self.__class__.__name__ + "(" + id_str + "): " + self._params.__str__()
 * 
 *     def __richcmp__(self, other, i):             # <<<<<<<<<<<<<<
 *         if i != 2:
 *             raise Exception("only == supported")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_27__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_10espressomd_12interactions_17BondedInteraction_27__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_i) {
  PyObject *__pyx_v_i = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_i = __Pyx_PyInt_From_int(__pyx_arg_i); if (unlikely(!__pyx_v_i)) __PYX_ERR(0, 607, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_i);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("espressomd.interactions.BondedInteraction.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10espressomd_12interactions_17BondedInteraction_26__richcmp__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_17BondedInteraction_26__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "espressomd/interactions.pyx":608
 * 
 *     def __richcmp__(self, other, i):
 *         if i != 2:             # <<<<<<<<<<<<<<
 *             raise Exception("only == supported")
 *         if self.__class__ != other.__class__:
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_i, __pyx_int_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 608, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "espressomd/interactions.pyx":609
 *     def __richcmp__(self, other, i):
 *         if i != 2:
 *             raise Exception("only == supported")             # <<<<<<<<<<<<<<
 *         if self.__class__ != other.__class__:
 *             return False
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 609, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 609, __pyx_L1_error)

    /* "espressomd/interactions.pyx":608
 * 
 *     def __richcmp__(self, other, i):
 *         if i != 2:             # <<<<<<<<<<<<<<
 *             raise Exception("only == supported")
 *         if self.__class__ != other.__class__:
 */
  }

  /* "espressomd/interactions.pyx":610
 *         if i != 2:
 *             raise Exception("only == supported")
 *         if self.__class__ != other.__class__:             # <<<<<<<<<<<<<<
 *             return False
 *         if self._bond_id != other._bond_id:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_class); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {

    /* "espressomd/interactions.pyx":611
 *             raise Exception("only == supported")
 *         if self.__class__ != other.__class__:
 *             return False             # <<<<<<<<<<<<<<
 *         if self._bond_id != other._bond_id:
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "espressomd/interactions.pyx":610
 *         if i != 2:
 *             raise Exception("only == supported")
 *         if self.__class__ != other.__class__:             # <<<<<<<<<<<<<<
 *             return False
 *         if self._bond_id != other._bond_id:
 */
  }

  /* "espressomd/interactions.pyx":612
 *         if self.__class__ != other.__class__:
 *             return False
 *         if self._bond_id != other._bond_id:             # <<<<<<<<<<<<<<
 *             return False
 *         return self._params == other._params
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "espressomd/interactions.pyx":613
 *             return False
 *         if self._bond_id != other._bond_id:
 *             return False             # <<<<<<<<<<<<<<
 *         return self._params == other._params
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "espressomd/interactions.pyx":612
 *         if self.__class__ != other.__class__:
 *             return False
 *         if self._bond_id != other._bond_id:             # <<<<<<<<<<<<<<
 *             return False
 *         return self._params == other._params
 */
  }

  /* "espressomd/interactions.pyx":614
 *         if self._bond_id != other._bond_id:
 *             return False
 *         return self._params == other._params             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_params); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_params); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":607
 *         return self.__class__.__name__ + "(" + id_str + "): " + self._params.__str__()
 * 
 *     def __richcmp__(self, other, i):             # <<<<<<<<<<<<<<
 *         if i != 2:
 *             raise Exception("only == supported")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("espressomd.interactions.BondedInteraction.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":619
 * class BondedInteractionNotDefined(object):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             self.__class__.__name__ + " not compiled into Espresso core")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_27BondedInteractionNotDefined_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10espressomd_12interactions_27BondedInteractionNotDefined___init__[] = "BondedInteractionNotDefined.__init__(self, *args, **kwargs)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_27BondedInteractionNotDefined_1__init__ = {"__init__", (PyCFunction)__pyx_pw_10espressomd_12interactions_27BondedInteractionNotDefined_1__init__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10espressomd_12interactions_27BondedInteractionNotDefined___init__};
static PyObject *__pyx_pw_10espressomd_12interactions_27BondedInteractionNotDefined_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 619, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 619, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("espressomd.interactions.BondedInteractionNotDefined.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10espressomd_12interactions_27BondedInteractionNotDefined___init__(__pyx_self, __pyx_v_self, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_27BondedInteractionNotDefined___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "espressomd/interactions.pyx":621
 *     def __init__(self, *args, **kwargs):
 *         raise Exception(
 *             self.__class__.__name__ + " not compiled into Espresso core")             # <<<<<<<<<<<<<<
 * 
 *     def type_number(self):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_not_compiled_into_Espresso_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":620
 * 
 *     def __init__(self, *args, **kwargs):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             self.__class__.__name__ + " not compiled into Espresso core")
 * 
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 620, __pyx_L1_error)

  /* "espressomd/interactions.pyx":619
 * class BondedInteractionNotDefined(object):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             self.__class__.__name__ + " not compiled into Espresso core")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("espressomd.interactions.BondedInteractionNotDefined.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":623
 *             self.__class__.__name__ + " not compiled into Espresso core")
 * 
 *     def type_number(self):             # <<<<<<<<<<<<<<
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_27BondedInteractionNotDefined_3type_number(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_27BondedInteractionNotDefined_2type_number[] = "BondedInteractionNotDefined.type_number(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_27BondedInteractionNotDefined_3type_number = {"type_number", (PyCFunction)__pyx_pw_10espressomd_12interactions_27BondedInteractionNotDefined_3type_number, METH_O, __pyx_doc_10espressomd_12interactions_27BondedInteractionNotDefined_2type_number};
static PyObject *__pyx_pw_10espressomd_12interactions_27BondedInteractionNotDefined_3type_number(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_number (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_27BondedInteractionNotDefined_2type_number(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_27BondedInteractionNotDefined_2type_number(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("type_number", 0);

  /* "espressomd/interactions.pyx":624
 * 
 *     def type_number(self):
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)             # <<<<<<<<<<<<<<
 * 
 *     def type_name(self):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_s_has_to_be_defined_in_myconfig, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(0, 624, __pyx_L1_error)

  /* "espressomd/interactions.pyx":623
 *             self.__class__.__name__ + " not compiled into Espresso core")
 * 
 *     def type_number(self):             # <<<<<<<<<<<<<<
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("espressomd.interactions.BondedInteractionNotDefined.type_number", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":626
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_27BondedInteractionNotDefined_5type_name(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_27BondedInteractionNotDefined_4type_name[] = "BondedInteractionNotDefined.type_name(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_27BondedInteractionNotDefined_5type_name = {"type_name", (PyCFunction)__pyx_pw_10espressomd_12interactions_27BondedInteractionNotDefined_5type_name, METH_O, __pyx_doc_10espressomd_12interactions_27BondedInteractionNotDefined_4type_name};
static PyObject *__pyx_pw_10espressomd_12interactions_27BondedInteractionNotDefined_5type_name(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_name (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_27BondedInteractionNotDefined_4type_name(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_27BondedInteractionNotDefined_4type_name(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("type_name", 0);

  /* "espressomd/interactions.pyx":627
 * 
 *     def type_name(self):
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)             # <<<<<<<<<<<<<<
 * 
 *     def valid_keys(self):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_s_has_to_be_defined_in_myconfig, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(0, 627, __pyx_L1_error)

  /* "espressomd/interactions.pyx":626
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("espressomd.interactions.BondedInteractionNotDefined.type_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":629
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 *     def valid_keys(self):             # <<<<<<<<<<<<<<
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_27BondedInteractionNotDefined_7valid_keys(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_27BondedInteractionNotDefined_6valid_keys[] = "BondedInteractionNotDefined.valid_keys(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_27BondedInteractionNotDefined_7valid_keys = {"valid_keys", (PyCFunction)__pyx_pw_10espressomd_12interactions_27BondedInteractionNotDefined_7valid_keys, METH_O, __pyx_doc_10espressomd_12interactions_27BondedInteractionNotDefined_6valid_keys};
static PyObject *__pyx_pw_10espressomd_12interactions_27BondedInteractionNotDefined_7valid_keys(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("valid_keys (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_27BondedInteractionNotDefined_6valid_keys(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_27BondedInteractionNotDefined_6valid_keys(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("valid_keys", 0);

  /* "espressomd/interactions.pyx":630
 * 
 *     def valid_keys(self):
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)             # <<<<<<<<<<<<<<
 * 
 *     def required_keys(self):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_s_has_to_be_defined_in_myconfig, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(0, 630, __pyx_L1_error)

  /* "espressomd/interactions.pyx":629
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 *     def valid_keys(self):             # <<<<<<<<<<<<<<
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("espressomd.interactions.BondedInteractionNotDefined.valid_keys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":632
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 *     def required_keys(self):             # <<<<<<<<<<<<<<
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_27BondedInteractionNotDefined_9required_keys(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_27BondedInteractionNotDefined_8required_keys[] = "BondedInteractionNotDefined.required_keys(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_27BondedInteractionNotDefined_9required_keys = {"required_keys", (PyCFunction)__pyx_pw_10espressomd_12interactions_27BondedInteractionNotDefined_9required_keys, METH_O, __pyx_doc_10espressomd_12interactions_27BondedInteractionNotDefined_8required_keys};
static PyObject *__pyx_pw_10espressomd_12interactions_27BondedInteractionNotDefined_9required_keys(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("required_keys (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_27BondedInteractionNotDefined_8required_keys(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_27BondedInteractionNotDefined_8required_keys(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("required_keys", 0);

  /* "espressomd/interactions.pyx":633
 * 
 *     def required_keys(self):
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)             # <<<<<<<<<<<<<<
 * 
 *     def set_default_params(self):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_s_has_to_be_defined_in_myconfig, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(0, 633, __pyx_L1_error)

  /* "espressomd/interactions.pyx":632
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 *     def required_keys(self):             # <<<<<<<<<<<<<<
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("espressomd.interactions.BondedInteractionNotDefined.required_keys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":635
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 *     def set_default_params(self):             # <<<<<<<<<<<<<<
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_27BondedInteractionNotDefined_11set_default_params(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_27BondedInteractionNotDefined_10set_default_params[] = "BondedInteractionNotDefined.set_default_params(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_27BondedInteractionNotDefined_11set_default_params = {"set_default_params", (PyCFunction)__pyx_pw_10espressomd_12interactions_27BondedInteractionNotDefined_11set_default_params, METH_O, __pyx_doc_10espressomd_12interactions_27BondedInteractionNotDefined_10set_default_params};
static PyObject *__pyx_pw_10espressomd_12interactions_27BondedInteractionNotDefined_11set_default_params(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_default_params (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_27BondedInteractionNotDefined_10set_default_params(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_27BondedInteractionNotDefined_10set_default_params(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("set_default_params", 0);

  /* "espressomd/interactions.pyx":636
 * 
 *     def set_default_params(self):
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)             # <<<<<<<<<<<<<<
 * 
 *     def _get_params_from_es_core(self):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_s_has_to_be_defined_in_myconfig, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(0, 636, __pyx_L1_error)

  /* "espressomd/interactions.pyx":635
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 *     def set_default_params(self):             # <<<<<<<<<<<<<<
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("espressomd.interactions.BondedInteractionNotDefined.set_default_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":638
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 *     def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_27BondedInteractionNotDefined_13_get_params_from_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_27BondedInteractionNotDefined_12_get_params_from_es_core[] = "BondedInteractionNotDefined._get_params_from_es_core(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_27BondedInteractionNotDefined_13_get_params_from_es_core = {"_get_params_from_es_core", (PyCFunction)__pyx_pw_10espressomd_12interactions_27BondedInteractionNotDefined_13_get_params_from_es_core, METH_O, __pyx_doc_10espressomd_12interactions_27BondedInteractionNotDefined_12_get_params_from_es_core};
static PyObject *__pyx_pw_10espressomd_12interactions_27BondedInteractionNotDefined_13_get_params_from_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_params_from_es_core (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_27BondedInteractionNotDefined_12_get_params_from_es_core(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_27BondedInteractionNotDefined_12_get_params_from_es_core(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("_get_params_from_es_core", 0);

  /* "espressomd/interactions.pyx":639
 * 
 *     def _get_params_from_es_core(self):
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)             # <<<<<<<<<<<<<<
 * 
 *     def _set_params_in_es_core(self):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_s_has_to_be_defined_in_myconfig, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(0, 639, __pyx_L1_error)

  /* "espressomd/interactions.pyx":638
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 *     def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("espressomd.interactions.BondedInteractionNotDefined._get_params_from_es_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":641
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 *     def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_27BondedInteractionNotDefined_15_set_params_in_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_27BondedInteractionNotDefined_14_set_params_in_es_core[] = "BondedInteractionNotDefined._set_params_in_es_core(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_27BondedInteractionNotDefined_15_set_params_in_es_core = {"_set_params_in_es_core", (PyCFunction)__pyx_pw_10espressomd_12interactions_27BondedInteractionNotDefined_15_set_params_in_es_core, METH_O, __pyx_doc_10espressomd_12interactions_27BondedInteractionNotDefined_14_set_params_in_es_core};
static PyObject *__pyx_pw_10espressomd_12interactions_27BondedInteractionNotDefined_15_set_params_in_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_params_in_es_core (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_27BondedInteractionNotDefined_14_set_params_in_es_core(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_27BondedInteractionNotDefined_14_set_params_in_es_core(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("_set_params_in_es_core", 0);

  /* "espressomd/interactions.pyx":642
 * 
 *     def _set_params_in_es_core(self):
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_s_has_to_be_defined_in_myconfig, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(0, 642, __pyx_L1_error)

  /* "espressomd/interactions.pyx":641
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 *     def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("espressomd.interactions.BondedInteractionNotDefined._set_params_in_es_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":647
 * class FeneBond(BondedInteraction):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         """
 *         FeneBond initialiser. Used to instatiate a FeneBond identifier
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_8FeneBond_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10espressomd_12interactions_8FeneBond___init__[] = "FeneBond.__init__(self, *args, **kwargs)\n \n        FeneBond initialiser. Used to instatiate a FeneBond identifier\n        with a given set of parameters.\n\n        Parameters\n        ----------\n        k : float\n            Specifies the magnitude of the bond interaction.\n        d_r_max : float\n                  Specifies the maximum stretch and compression length of the\n                  bond.\n        r_0 : float, optional\n              Specifies the equilibrium length of the bond.\n        ";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_8FeneBond_1__init__ = {"__init__", (PyCFunction)__pyx_pw_10espressomd_12interactions_8FeneBond_1__init__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10espressomd_12interactions_8FeneBond___init__};
static PyObject *__pyx_pw_10espressomd_12interactions_8FeneBond_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 647, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 647, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("espressomd.interactions.FeneBond.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10espressomd_12interactions_8FeneBond___init__(__pyx_self, __pyx_v_self, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_8FeneBond___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "espressomd/interactions.pyx":662
 *               Specifies the equilibrium length of the bond.
 *         """
 *         super(FeneBond, self).__init__(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def type_number(self):
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_FeneBond); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_self);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":647
 * class FeneBond(BondedInteraction):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         """
 *         FeneBond initialiser. Used to instatiate a FeneBond identifier
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("espressomd.interactions.FeneBond.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":664
 *         super(FeneBond, self).__init__(*args, **kwargs)
 * 
 *     def type_number(self):             # <<<<<<<<<<<<<<
 *         return BONDED_IA_FENE
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_8FeneBond_3type_number(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_8FeneBond_2type_number[] = "FeneBond.type_number(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_8FeneBond_3type_number = {"type_number", (PyCFunction)__pyx_pw_10espressomd_12interactions_8FeneBond_3type_number, METH_O, __pyx_doc_10espressomd_12interactions_8FeneBond_2type_number};
static PyObject *__pyx_pw_10espressomd_12interactions_8FeneBond_3type_number(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_number (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_8FeneBond_2type_number(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_8FeneBond_2type_number(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("type_number", 0);

  /* "espressomd/interactions.pyx":665
 * 
 *     def type_number(self):
 *         return BONDED_IA_FENE             # <<<<<<<<<<<<<<
 * 
 *     def type_name(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_enum__BondedInteraction(BONDED_IA_FENE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":664
 *         super(FeneBond, self).__init__(*args, **kwargs)
 * 
 *     def type_number(self):             # <<<<<<<<<<<<<<
 *         return BONDED_IA_FENE
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.FeneBond.type_number", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":667
 *         return BONDED_IA_FENE
 * 
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         return "FENE"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_8FeneBond_5type_name(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_8FeneBond_4type_name[] = "FeneBond.type_name(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_8FeneBond_5type_name = {"type_name", (PyCFunction)__pyx_pw_10espressomd_12interactions_8FeneBond_5type_name, METH_O, __pyx_doc_10espressomd_12interactions_8FeneBond_4type_name};
static PyObject *__pyx_pw_10espressomd_12interactions_8FeneBond_5type_name(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_name (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_8FeneBond_4type_name(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_8FeneBond_4type_name(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_name", 0);

  /* "espressomd/interactions.pyx":668
 * 
 *     def type_name(self):
 *         return "FENE"             # <<<<<<<<<<<<<<
 * 
 *     def valid_keys(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_n_s_FENE);
  __pyx_r = __pyx_n_s_FENE;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":667
 *         return BONDED_IA_FENE
 * 
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         return "FENE"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":670
 *         return "FENE"
 * 
 *     def valid_keys(self):             # <<<<<<<<<<<<<<
 *         return "k", "d_r_max", "r_0"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_8FeneBond_7valid_keys(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_8FeneBond_6valid_keys[] = "FeneBond.valid_keys(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_8FeneBond_7valid_keys = {"valid_keys", (PyCFunction)__pyx_pw_10espressomd_12interactions_8FeneBond_7valid_keys, METH_O, __pyx_doc_10espressomd_12interactions_8FeneBond_6valid_keys};
static PyObject *__pyx_pw_10espressomd_12interactions_8FeneBond_7valid_keys(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("valid_keys (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_8FeneBond_6valid_keys(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_8FeneBond_6valid_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("valid_keys", 0);

  /* "espressomd/interactions.pyx":671
 * 
 *     def valid_keys(self):
 *         return "k", "d_r_max", "r_0"             # <<<<<<<<<<<<<<
 * 
 *     def required_keys(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_tuple__36);
  __pyx_r = __pyx_tuple__36;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":670
 *         return "FENE"
 * 
 *     def valid_keys(self):             # <<<<<<<<<<<<<<
 *         return "k", "d_r_max", "r_0"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":673
 *         return "k", "d_r_max", "r_0"
 * 
 *     def required_keys(self):             # <<<<<<<<<<<<<<
 *         return "k", "d_r_max"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_8FeneBond_9required_keys(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_8FeneBond_8required_keys[] = "FeneBond.required_keys(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_8FeneBond_9required_keys = {"required_keys", (PyCFunction)__pyx_pw_10espressomd_12interactions_8FeneBond_9required_keys, METH_O, __pyx_doc_10espressomd_12interactions_8FeneBond_8required_keys};
static PyObject *__pyx_pw_10espressomd_12interactions_8FeneBond_9required_keys(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("required_keys (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_8FeneBond_8required_keys(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_8FeneBond_8required_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("required_keys", 0);

  /* "espressomd/interactions.pyx":674
 * 
 *     def required_keys(self):
 *         return "k", "d_r_max"             # <<<<<<<<<<<<<<
 * 
 *     def set_default_params(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_tuple__37);
  __pyx_r = __pyx_tuple__37;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":673
 *         return "k", "d_r_max", "r_0"
 * 
 *     def required_keys(self):             # <<<<<<<<<<<<<<
 *         return "k", "d_r_max"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":676
 *         return "k", "d_r_max"
 * 
 *     def set_default_params(self):             # <<<<<<<<<<<<<<
 *         self._params = {"r_0": 0.}
 *         # Everything else has to be supplied by the user, anyway
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_8FeneBond_11set_default_params(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_8FeneBond_10set_default_params[] = "FeneBond.set_default_params(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_8FeneBond_11set_default_params = {"set_default_params", (PyCFunction)__pyx_pw_10espressomd_12interactions_8FeneBond_11set_default_params, METH_O, __pyx_doc_10espressomd_12interactions_8FeneBond_10set_default_params};
static PyObject *__pyx_pw_10espressomd_12interactions_8FeneBond_11set_default_params(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_default_params (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_8FeneBond_10set_default_params(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_8FeneBond_10set_default_params(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_default_params", 0);

  /* "espressomd/interactions.pyx":677
 * 
 *     def set_default_params(self):
 *         self._params = {"r_0": 0.}             # <<<<<<<<<<<<<<
 *         # Everything else has to be supplied by the user, anyway
 * 
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_r_0, __pyx_float_0_) < 0) __PYX_ERR(0, 677, __pyx_L1_error)
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_params, __pyx_t_1) < 0) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":676
 *         return "k", "d_r_max"
 * 
 *     def set_default_params(self):             # <<<<<<<<<<<<<<
 *         self._params = {"r_0": 0.}
 *         # Everything else has to be supplied by the user, anyway
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.FeneBond.set_default_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":680
 *         # Everything else has to be supplied by the user, anyway
 * 
 *     def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *         return \
 *             {"k": bonded_ia_params[self._bond_id].p.fene.k,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_8FeneBond_13_get_params_from_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_8FeneBond_12_get_params_from_es_core[] = "FeneBond._get_params_from_es_core(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_8FeneBond_13_get_params_from_es_core = {"_get_params_from_es_core", (PyCFunction)__pyx_pw_10espressomd_12interactions_8FeneBond_13_get_params_from_es_core, METH_O, __pyx_doc_10espressomd_12interactions_8FeneBond_12_get_params_from_es_core};
static PyObject *__pyx_pw_10espressomd_12interactions_8FeneBond_13_get_params_from_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_params_from_es_core (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_8FeneBond_12_get_params_from_es_core(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_8FeneBond_12_get_params_from_es_core(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  __Pyx_RefNannySetupContext("_get_params_from_es_core", 0);

  /* "espressomd/interactions.pyx":681
 * 
 *     def _get_params_from_es_core(self):
 *         return \             # <<<<<<<<<<<<<<
 *             {"k": bonded_ia_params[self._bond_id].p.fene.k,
 *              "d_r_max": bonded_ia_params[self._bond_id].p.fene.drmax,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "espressomd/interactions.pyx":682
 *     def _get_params_from_es_core(self):
 *         return \
 *             {"k": bonded_ia_params[self._bond_id].p.fene.k,             # <<<<<<<<<<<<<<
 *              "d_r_max": bonded_ia_params[self._bond_id].p.fene.drmax,
 *              "r_0": bonded_ia_params[self._bond_id].p.fene.r0}
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((bonded_ia_params[__pyx_t_3]).p.fene.k); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_k, __pyx_t_2) < 0) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":683
 *         return \
 *             {"k": bonded_ia_params[self._bond_id].p.fene.k,
 *              "d_r_max": bonded_ia_params[self._bond_id].p.fene.drmax,             # <<<<<<<<<<<<<<
 *              "r_0": bonded_ia_params[self._bond_id].p.fene.r0}
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((bonded_ia_params[__pyx_t_3]).p.fene.drmax); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_d_r_max, __pyx_t_2) < 0) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":684
 *             {"k": bonded_ia_params[self._bond_id].p.fene.k,
 *              "d_r_max": bonded_ia_params[self._bond_id].p.fene.drmax,
 *              "r_0": bonded_ia_params[self._bond_id].p.fene.r0}             # <<<<<<<<<<<<<<
 * 
 *     def _set_params_in_es_core(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((bonded_ia_params[__pyx_t_3]).p.fene.r0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_r_0, __pyx_t_2) < 0) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":680
 *         # Everything else has to be supplied by the user, anyway
 * 
 *     def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *         return \
 *             {"k": bonded_ia_params[self._bond_id].p.fene.k,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("espressomd.interactions.FeneBond._get_params_from_es_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":686
 *              "r_0": bonded_ia_params[self._bond_id].p.fene.r0}
 * 
 *     def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *         fene_set_params(
 *             self._bond_id, self._params["k"], self._params["d_r_max"], self._params["r_0"])
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_8FeneBond_15_set_params_in_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_8FeneBond_14_set_params_in_es_core[] = "FeneBond._set_params_in_es_core(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_8FeneBond_15_set_params_in_es_core = {"_set_params_in_es_core", (PyCFunction)__pyx_pw_10espressomd_12interactions_8FeneBond_15_set_params_in_es_core, METH_O, __pyx_doc_10espressomd_12interactions_8FeneBond_14_set_params_in_es_core};
static PyObject *__pyx_pw_10espressomd_12interactions_8FeneBond_15_set_params_in_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_params_in_es_core (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_8FeneBond_14_set_params_in_es_core(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_8FeneBond_14_set_params_in_es_core(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  double __pyx_t_5;
  double __pyx_t_6;
  __Pyx_RefNannySetupContext("_set_params_in_es_core", 0);

  /* "espressomd/interactions.pyx":688
 *     def _set_params_in_es_core(self):
 *         fene_set_params(
 *             self._bond_id, self._params["k"], self._params["d_r_max"], self._params["r_0"])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_params); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_k); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_params); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_3, __pyx_n_s_d_r_max); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_params); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_r_0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "espressomd/interactions.pyx":687
 * 
 *     def _set_params_in_es_core(self):
 *         fene_set_params(             # <<<<<<<<<<<<<<
 *             self._bond_id, self._params["k"], self._params["d_r_max"], self._params["r_0"])
 * 
 */
  fene_set_params(__pyx_t_2, __pyx_t_4, __pyx_t_5, __pyx_t_6);

  /* "espressomd/interactions.pyx":686
 *              "r_0": bonded_ia_params[self._bond_id].p.fene.r0}
 * 
 *     def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *         fene_set_params(
 *             self._bond_id, self._params["k"], self._params["d_r_max"], self._params["r_0"])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("espressomd.interactions.FeneBond._set_params_in_es_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":693
 * class HarmonicBond(BondedInteraction):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         """
 *         HarmonicBond initialiser. Used to instatiate a HarmonicBond identifier
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_12HarmonicBond_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10espressomd_12interactions_12HarmonicBond___init__[] = "HarmonicBond.__init__(self, *args, **kwargs)\n \n        HarmonicBond initialiser. Used to instatiate a HarmonicBond identifier\n        with a given set of parameters.\n\n        Parameters\n        ----------\n        k : float\n            Specifies the magnitude of the bond interaction.\n        r_0 : float\n              Specifies the equilibrium length of the bond.\n        r_cut : float, optional\n                Specifies maximum distance beyond which the bond is considered\n                broken.\n        ";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_12HarmonicBond_1__init__ = {"__init__", (PyCFunction)__pyx_pw_10espressomd_12interactions_12HarmonicBond_1__init__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10espressomd_12interactions_12HarmonicBond___init__};
static PyObject *__pyx_pw_10espressomd_12interactions_12HarmonicBond_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 693, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 693, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("espressomd.interactions.HarmonicBond.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10espressomd_12interactions_12HarmonicBond___init__(__pyx_self, __pyx_v_self, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_12HarmonicBond___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "espressomd/interactions.pyx":708
 *                 broken.
 *         """
 *         super(HarmonicBond, self).__init__(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_HarmonicBond); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_self);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":693
 * class HarmonicBond(BondedInteraction):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         """
 *         HarmonicBond initialiser. Used to instatiate a HarmonicBond identifier
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("espressomd.interactions.HarmonicBond.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":711
 * 
 * 
 *     def type_number(self):             # <<<<<<<<<<<<<<
 *         return BONDED_IA_HARMONIC
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_12HarmonicBond_3type_number(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_12HarmonicBond_2type_number[] = "HarmonicBond.type_number(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_12HarmonicBond_3type_number = {"type_number", (PyCFunction)__pyx_pw_10espressomd_12interactions_12HarmonicBond_3type_number, METH_O, __pyx_doc_10espressomd_12interactions_12HarmonicBond_2type_number};
static PyObject *__pyx_pw_10espressomd_12interactions_12HarmonicBond_3type_number(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_number (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_12HarmonicBond_2type_number(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_12HarmonicBond_2type_number(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("type_number", 0);

  /* "espressomd/interactions.pyx":712
 * 
 *     def type_number(self):
 *         return BONDED_IA_HARMONIC             # <<<<<<<<<<<<<<
 * 
 *     def type_name(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_enum__BondedInteraction(BONDED_IA_HARMONIC); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 712, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":711
 * 
 * 
 *     def type_number(self):             # <<<<<<<<<<<<<<
 *         return BONDED_IA_HARMONIC
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.HarmonicBond.type_number", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":714
 *         return BONDED_IA_HARMONIC
 * 
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         return "HARMONIC"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_12HarmonicBond_5type_name(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_12HarmonicBond_4type_name[] = "HarmonicBond.type_name(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_12HarmonicBond_5type_name = {"type_name", (PyCFunction)__pyx_pw_10espressomd_12interactions_12HarmonicBond_5type_name, METH_O, __pyx_doc_10espressomd_12interactions_12HarmonicBond_4type_name};
static PyObject *__pyx_pw_10espressomd_12interactions_12HarmonicBond_5type_name(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_name (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_12HarmonicBond_4type_name(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_12HarmonicBond_4type_name(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_name", 0);

  /* "espressomd/interactions.pyx":715
 * 
 *     def type_name(self):
 *         return "HARMONIC"             # <<<<<<<<<<<<<<
 * 
 *     def valid_keys(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_n_s_HARMONIC);
  __pyx_r = __pyx_n_s_HARMONIC;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":714
 *         return BONDED_IA_HARMONIC
 * 
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         return "HARMONIC"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":717
 *         return "HARMONIC"
 * 
 *     def valid_keys(self):             # <<<<<<<<<<<<<<
 *         return "k", "r_0", "r_cut"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_12HarmonicBond_7valid_keys(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_12HarmonicBond_6valid_keys[] = "HarmonicBond.valid_keys(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_12HarmonicBond_7valid_keys = {"valid_keys", (PyCFunction)__pyx_pw_10espressomd_12interactions_12HarmonicBond_7valid_keys, METH_O, __pyx_doc_10espressomd_12interactions_12HarmonicBond_6valid_keys};
static PyObject *__pyx_pw_10espressomd_12interactions_12HarmonicBond_7valid_keys(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("valid_keys (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_12HarmonicBond_6valid_keys(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_12HarmonicBond_6valid_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("valid_keys", 0);

  /* "espressomd/interactions.pyx":718
 * 
 *     def valid_keys(self):
 *         return "k", "r_0", "r_cut"             # <<<<<<<<<<<<<<
 * 
 *     def required_keys(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_tuple__38);
  __pyx_r = __pyx_tuple__38;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":717
 *         return "HARMONIC"
 * 
 *     def valid_keys(self):             # <<<<<<<<<<<<<<
 *         return "k", "r_0", "r_cut"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":720
 *         return "k", "r_0", "r_cut"
 * 
 *     def required_keys(self):             # <<<<<<<<<<<<<<
 *         return "k", "r_0"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_12HarmonicBond_9required_keys(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_12HarmonicBond_8required_keys[] = "HarmonicBond.required_keys(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_12HarmonicBond_9required_keys = {"required_keys", (PyCFunction)__pyx_pw_10espressomd_12interactions_12HarmonicBond_9required_keys, METH_O, __pyx_doc_10espressomd_12interactions_12HarmonicBond_8required_keys};
static PyObject *__pyx_pw_10espressomd_12interactions_12HarmonicBond_9required_keys(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("required_keys (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_12HarmonicBond_8required_keys(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_12HarmonicBond_8required_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("required_keys", 0);

  /* "espressomd/interactions.pyx":721
 * 
 *     def required_keys(self):
 *         return "k", "r_0"             # <<<<<<<<<<<<<<
 * 
 *     def set_default_params(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_tuple__39);
  __pyx_r = __pyx_tuple__39;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":720
 *         return "k", "r_0", "r_cut"
 * 
 *     def required_keys(self):             # <<<<<<<<<<<<<<
 *         return "k", "r_0"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":723
 *         return "k", "r_0"
 * 
 *     def set_default_params(self):             # <<<<<<<<<<<<<<
 *         self._params = {"k'": 0., "r_0": 0., "r_cut": 0.}
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_12HarmonicBond_11set_default_params(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_12HarmonicBond_10set_default_params[] = "HarmonicBond.set_default_params(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_12HarmonicBond_11set_default_params = {"set_default_params", (PyCFunction)__pyx_pw_10espressomd_12interactions_12HarmonicBond_11set_default_params, METH_O, __pyx_doc_10espressomd_12interactions_12HarmonicBond_10set_default_params};
static PyObject *__pyx_pw_10espressomd_12interactions_12HarmonicBond_11set_default_params(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_default_params (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_12HarmonicBond_10set_default_params(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_12HarmonicBond_10set_default_params(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_default_params", 0);

  /* "espressomd/interactions.pyx":724
 * 
 *     def set_default_params(self):
 *         self._params = {"k'": 0., "r_0": 0., "r_cut": 0.}             # <<<<<<<<<<<<<<
 * 
 *     def _get_params_from_es_core(self):
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_s_k_2, __pyx_float_0_) < 0) __PYX_ERR(0, 724, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_r_0, __pyx_float_0_) < 0) __PYX_ERR(0, 724, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_r_cut, __pyx_float_0_) < 0) __PYX_ERR(0, 724, __pyx_L1_error)
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_params, __pyx_t_1) < 0) __PYX_ERR(0, 724, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":723
 *         return "k", "r_0"
 * 
 *     def set_default_params(self):             # <<<<<<<<<<<<<<
 *         self._params = {"k'": 0., "r_0": 0., "r_cut": 0.}
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.HarmonicBond.set_default_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":726
 *         self._params = {"k'": 0., "r_0": 0., "r_cut": 0.}
 * 
 *     def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *         return \
 *             {"k": bonded_ia_params[self._bond_id].p.harmonic.k,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_12HarmonicBond_13_get_params_from_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_12HarmonicBond_12_get_params_from_es_core[] = "HarmonicBond._get_params_from_es_core(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_12HarmonicBond_13_get_params_from_es_core = {"_get_params_from_es_core", (PyCFunction)__pyx_pw_10espressomd_12interactions_12HarmonicBond_13_get_params_from_es_core, METH_O, __pyx_doc_10espressomd_12interactions_12HarmonicBond_12_get_params_from_es_core};
static PyObject *__pyx_pw_10espressomd_12interactions_12HarmonicBond_13_get_params_from_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_params_from_es_core (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_12HarmonicBond_12_get_params_from_es_core(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_12HarmonicBond_12_get_params_from_es_core(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  __Pyx_RefNannySetupContext("_get_params_from_es_core", 0);

  /* "espressomd/interactions.pyx":727
 * 
 *     def _get_params_from_es_core(self):
 *         return \             # <<<<<<<<<<<<<<
 *             {"k": bonded_ia_params[self._bond_id].p.harmonic.k,
 *              "r_0": bonded_ia_params[self._bond_id].p.harmonic.r,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "espressomd/interactions.pyx":728
 *     def _get_params_from_es_core(self):
 *         return \
 *             {"k": bonded_ia_params[self._bond_id].p.harmonic.k,             # <<<<<<<<<<<<<<
 *              "r_0": bonded_ia_params[self._bond_id].p.harmonic.r,
 *              "r_cut": bonded_ia_params[self._bond_id].p.harmonic.r_cut}
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((bonded_ia_params[__pyx_t_3]).p.harmonic.k); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_k, __pyx_t_2) < 0) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":729
 *         return \
 *             {"k": bonded_ia_params[self._bond_id].p.harmonic.k,
 *              "r_0": bonded_ia_params[self._bond_id].p.harmonic.r,             # <<<<<<<<<<<<<<
 *              "r_cut": bonded_ia_params[self._bond_id].p.harmonic.r_cut}
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((bonded_ia_params[__pyx_t_3]).p.harmonic.r); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_r_0, __pyx_t_2) < 0) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":730
 *             {"k": bonded_ia_params[self._bond_id].p.harmonic.k,
 *              "r_0": bonded_ia_params[self._bond_id].p.harmonic.r,
 *              "r_cut": bonded_ia_params[self._bond_id].p.harmonic.r_cut}             # <<<<<<<<<<<<<<
 * 
 *     def _set_params_in_es_core(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((bonded_ia_params[__pyx_t_3]).p.harmonic.r_cut); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_r_cut, __pyx_t_2) < 0) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":726
 *         self._params = {"k'": 0., "r_0": 0., "r_cut": 0.}
 * 
 *     def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *         return \
 *             {"k": bonded_ia_params[self._bond_id].p.harmonic.k,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("espressomd.interactions.HarmonicBond._get_params_from_es_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":732
 *              "r_cut": bonded_ia_params[self._bond_id].p.harmonic.r_cut}
 * 
 *     def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *         harmonic_set_params(
 *             self._bond_id, self._params["k"], self._params["r_0"], self._params["r_cut"])
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_12HarmonicBond_15_set_params_in_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_12HarmonicBond_14_set_params_in_es_core[] = "HarmonicBond._set_params_in_es_core(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_12HarmonicBond_15_set_params_in_es_core = {"_set_params_in_es_core", (PyCFunction)__pyx_pw_10espressomd_12interactions_12HarmonicBond_15_set_params_in_es_core, METH_O, __pyx_doc_10espressomd_12interactions_12HarmonicBond_14_set_params_in_es_core};
static PyObject *__pyx_pw_10espressomd_12interactions_12HarmonicBond_15_set_params_in_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_params_in_es_core (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_12HarmonicBond_14_set_params_in_es_core(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_12HarmonicBond_14_set_params_in_es_core(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  double __pyx_t_5;
  double __pyx_t_6;
  __Pyx_RefNannySetupContext("_set_params_in_es_core", 0);

  /* "espressomd/interactions.pyx":734
 *     def _set_params_in_es_core(self):
 *         harmonic_set_params(
 *             self._bond_id, self._params["k"], self._params["r_0"], self._params["r_cut"])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_params); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_k); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_params); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_3, __pyx_n_s_r_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_params); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_r_cut); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "espressomd/interactions.pyx":733
 * 
 *     def _set_params_in_es_core(self):
 *         harmonic_set_params(             # <<<<<<<<<<<<<<
 *             self._bond_id, self._params["k"], self._params["r_0"], self._params["r_cut"])
 * 
 */
  harmonic_set_params(__pyx_t_2, __pyx_t_4, __pyx_t_5, __pyx_t_6);

  /* "espressomd/interactions.pyx":732
 *              "r_cut": bonded_ia_params[self._bond_id].p.harmonic.r_cut}
 * 
 *     def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *         harmonic_set_params(
 *             self._bond_id, self._params["k"], self._params["r_0"], self._params["r_cut"])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("espressomd.interactions.HarmonicBond._set_params_in_es_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":791
 *     class HarmonicDumbbellBond(BondedInteraction):
 * 
 *         def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *             """
 *             HarmonicDumbbellBond initialiser. Used to instatiate a
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_20HarmonicDumbbellBond_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10espressomd_12interactions_20HarmonicDumbbellBond___init__[] = "HarmonicDumbbellBond.__init__(self, *args, **kwargs)\n \n            HarmonicDumbbellBond initialiser. Used to instatiate a \n            HarmonicDumbbellBond identifier with a given set of parameters.\n\n            Parameters\n            ----------\n            k1 : float\n                Specifies the magnitude of the bond interaction.\n            k2 : float\n                Specifies the magnitude of the angular interaction.\n            r_0 : float\n                  Specifies the equilibrium length of the bond.\n            r_cut : float, optional\n                    Specifies maximum distance beyond which the bond is considered\n                    broken.\n            ";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_20HarmonicDumbbellBond_1__init__ = {"__init__", (PyCFunction)__pyx_pw_10espressomd_12interactions_20HarmonicDumbbellBond_1__init__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10espressomd_12interactions_20HarmonicDumbbellBond___init__};
static PyObject *__pyx_pw_10espressomd_12interactions_20HarmonicDumbbellBond_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 791, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 791, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("espressomd.interactions.HarmonicDumbbellBond.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10espressomd_12interactions_20HarmonicDumbbellBond___init__(__pyx_self, __pyx_v_self, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_20HarmonicDumbbellBond___init__(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "espressomd/interactions.pyx":808
 *                     broken.
 *             """
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 808, __pyx_L1_error)

  /* "espressomd/interactions.pyx":791
 *     class HarmonicDumbbellBond(BondedInteraction):
 * 
 *         def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *             """
 *             HarmonicDumbbellBond initialiser. Used to instatiate a
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.HarmonicDumbbellBond.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":812
 * 
 * 
 *         def type_number(self):             # <<<<<<<<<<<<<<
 *             raise Exception(
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_20HarmonicDumbbellBond_3type_number(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_20HarmonicDumbbellBond_2type_number[] = "HarmonicDumbbellBond.type_number(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_20HarmonicDumbbellBond_3type_number = {"type_number", (PyCFunction)__pyx_pw_10espressomd_12interactions_20HarmonicDumbbellBond_3type_number, METH_O, __pyx_doc_10espressomd_12interactions_20HarmonicDumbbellBond_2type_number};
static PyObject *__pyx_pw_10espressomd_12interactions_20HarmonicDumbbellBond_3type_number(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_number (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_20HarmonicDumbbellBond_2type_number(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_20HarmonicDumbbellBond_2type_number(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("type_number", 0);

  /* "espressomd/interactions.pyx":813
 * 
 *         def type_number(self):
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 813, __pyx_L1_error)

  /* "espressomd/interactions.pyx":812
 * 
 * 
 *         def type_number(self):             # <<<<<<<<<<<<<<
 *             raise Exception(
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.HarmonicDumbbellBond.type_number", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":816
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 *         def type_name(self):             # <<<<<<<<<<<<<<
 *             raise Exception(
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_20HarmonicDumbbellBond_5type_name(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_20HarmonicDumbbellBond_4type_name[] = "HarmonicDumbbellBond.type_name(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_20HarmonicDumbbellBond_5type_name = {"type_name", (PyCFunction)__pyx_pw_10espressomd_12interactions_20HarmonicDumbbellBond_5type_name, METH_O, __pyx_doc_10espressomd_12interactions_20HarmonicDumbbellBond_4type_name};
static PyObject *__pyx_pw_10espressomd_12interactions_20HarmonicDumbbellBond_5type_name(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_name (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_20HarmonicDumbbellBond_4type_name(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_20HarmonicDumbbellBond_4type_name(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("type_name", 0);

  /* "espressomd/interactions.pyx":817
 * 
 *         def type_name(self):
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 817, __pyx_L1_error)

  /* "espressomd/interactions.pyx":816
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 *         def type_name(self):             # <<<<<<<<<<<<<<
 *             raise Exception(
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.HarmonicDumbbellBond.type_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":820
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 *         def valid_keys(self):             # <<<<<<<<<<<<<<
 *             raise Exception(
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_20HarmonicDumbbellBond_7valid_keys(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_20HarmonicDumbbellBond_6valid_keys[] = "HarmonicDumbbellBond.valid_keys(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_20HarmonicDumbbellBond_7valid_keys = {"valid_keys", (PyCFunction)__pyx_pw_10espressomd_12interactions_20HarmonicDumbbellBond_7valid_keys, METH_O, __pyx_doc_10espressomd_12interactions_20HarmonicDumbbellBond_6valid_keys};
static PyObject *__pyx_pw_10espressomd_12interactions_20HarmonicDumbbellBond_7valid_keys(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("valid_keys (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_20HarmonicDumbbellBond_6valid_keys(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_20HarmonicDumbbellBond_6valid_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("valid_keys", 0);

  /* "espressomd/interactions.pyx":821
 * 
 *         def valid_keys(self):
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 821, __pyx_L1_error)

  /* "espressomd/interactions.pyx":820
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 *         def valid_keys(self):             # <<<<<<<<<<<<<<
 *             raise Exception(
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.HarmonicDumbbellBond.valid_keys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":824
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 *         def required_keys(self):             # <<<<<<<<<<<<<<
 *             raise Exception(
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_20HarmonicDumbbellBond_9required_keys(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_20HarmonicDumbbellBond_8required_keys[] = "HarmonicDumbbellBond.required_keys(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_20HarmonicDumbbellBond_9required_keys = {"required_keys", (PyCFunction)__pyx_pw_10espressomd_12interactions_20HarmonicDumbbellBond_9required_keys, METH_O, __pyx_doc_10espressomd_12interactions_20HarmonicDumbbellBond_8required_keys};
static PyObject *__pyx_pw_10espressomd_12interactions_20HarmonicDumbbellBond_9required_keys(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("required_keys (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_20HarmonicDumbbellBond_8required_keys(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_20HarmonicDumbbellBond_8required_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("required_keys", 0);

  /* "espressomd/interactions.pyx":825
 * 
 *         def required_keys(self):
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 825, __pyx_L1_error)

  /* "espressomd/interactions.pyx":824
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 *         def required_keys(self):             # <<<<<<<<<<<<<<
 *             raise Exception(
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.HarmonicDumbbellBond.required_keys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":828
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 *         def set_default_params(self):             # <<<<<<<<<<<<<<
 *             raise Exception(
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_20HarmonicDumbbellBond_11set_default_params(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_20HarmonicDumbbellBond_10set_default_params[] = "HarmonicDumbbellBond.set_default_params(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_20HarmonicDumbbellBond_11set_default_params = {"set_default_params", (PyCFunction)__pyx_pw_10espressomd_12interactions_20HarmonicDumbbellBond_11set_default_params, METH_O, __pyx_doc_10espressomd_12interactions_20HarmonicDumbbellBond_10set_default_params};
static PyObject *__pyx_pw_10espressomd_12interactions_20HarmonicDumbbellBond_11set_default_params(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_default_params (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_20HarmonicDumbbellBond_10set_default_params(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_20HarmonicDumbbellBond_10set_default_params(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_default_params", 0);

  /* "espressomd/interactions.pyx":829
 * 
 *         def set_default_params(self):
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 829, __pyx_L1_error)

  /* "espressomd/interactions.pyx":828
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 *         def set_default_params(self):             # <<<<<<<<<<<<<<
 *             raise Exception(
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.HarmonicDumbbellBond.set_default_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":832
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 *         def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *             raise Exception(
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_20HarmonicDumbbellBond_13_get_params_from_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_20HarmonicDumbbellBond_12_get_params_from_es_core[] = "HarmonicDumbbellBond._get_params_from_es_core(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_20HarmonicDumbbellBond_13_get_params_from_es_core = {"_get_params_from_es_core", (PyCFunction)__pyx_pw_10espressomd_12interactions_20HarmonicDumbbellBond_13_get_params_from_es_core, METH_O, __pyx_doc_10espressomd_12interactions_20HarmonicDumbbellBond_12_get_params_from_es_core};
static PyObject *__pyx_pw_10espressomd_12interactions_20HarmonicDumbbellBond_13_get_params_from_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_params_from_es_core (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_20HarmonicDumbbellBond_12_get_params_from_es_core(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_20HarmonicDumbbellBond_12_get_params_from_es_core(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_get_params_from_es_core", 0);

  /* "espressomd/interactions.pyx":833
 * 
 *         def _get_params_from_es_core(self):
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 833, __pyx_L1_error)

  /* "espressomd/interactions.pyx":832
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 *         def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *             raise Exception(
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.HarmonicDumbbellBond._get_params_from_es_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":836
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 *         def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *             raise Exception(
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_20HarmonicDumbbellBond_15_set_params_in_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_20HarmonicDumbbellBond_14_set_params_in_es_core[] = "HarmonicDumbbellBond._set_params_in_es_core(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_20HarmonicDumbbellBond_15_set_params_in_es_core = {"_set_params_in_es_core", (PyCFunction)__pyx_pw_10espressomd_12interactions_20HarmonicDumbbellBond_15_set_params_in_es_core, METH_O, __pyx_doc_10espressomd_12interactions_20HarmonicDumbbellBond_14_set_params_in_es_core};
static PyObject *__pyx_pw_10espressomd_12interactions_20HarmonicDumbbellBond_15_set_params_in_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_params_in_es_core (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_20HarmonicDumbbellBond_14_set_params_in_es_core(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_20HarmonicDumbbellBond_14_set_params_in_es_core(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_set_params_in_es_core", 0);

  /* "espressomd/interactions.pyx":837
 * 
 *         def _set_params_in_es_core(self):
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 837, __pyx_L1_error)

  /* "espressomd/interactions.pyx":836
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 *         def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *             raise Exception(
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.HarmonicDumbbellBond._set_params_in_es_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":892
 * class Dihedral(BondedInteraction):
 * 
 *     def type_number(self):             # <<<<<<<<<<<<<<
 *         return BONDED_IA_DIHEDRAL
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_8Dihedral_1type_number(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_8Dihedral_type_number[] = "Dihedral.type_number(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_8Dihedral_1type_number = {"type_number", (PyCFunction)__pyx_pw_10espressomd_12interactions_8Dihedral_1type_number, METH_O, __pyx_doc_10espressomd_12interactions_8Dihedral_type_number};
static PyObject *__pyx_pw_10espressomd_12interactions_8Dihedral_1type_number(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_number (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_8Dihedral_type_number(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_8Dihedral_type_number(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("type_number", 0);

  /* "espressomd/interactions.pyx":893
 * 
 *     def type_number(self):
 *         return BONDED_IA_DIHEDRAL             # <<<<<<<<<<<<<<
 * 
 *     def type_name(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_enum__BondedInteraction(BONDED_IA_DIHEDRAL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":892
 * class Dihedral(BondedInteraction):
 * 
 *     def type_number(self):             # <<<<<<<<<<<<<<
 *         return BONDED_IA_DIHEDRAL
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.Dihedral.type_number", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":895
 *         return BONDED_IA_DIHEDRAL
 * 
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         return "DIHEDRAL"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_8Dihedral_3type_name(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_8Dihedral_2type_name[] = "Dihedral.type_name(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_8Dihedral_3type_name = {"type_name", (PyCFunction)__pyx_pw_10espressomd_12interactions_8Dihedral_3type_name, METH_O, __pyx_doc_10espressomd_12interactions_8Dihedral_2type_name};
static PyObject *__pyx_pw_10espressomd_12interactions_8Dihedral_3type_name(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_name (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_8Dihedral_2type_name(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_8Dihedral_2type_name(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_name", 0);

  /* "espressomd/interactions.pyx":896
 * 
 *     def type_name(self):
 *         return "DIHEDRAL"             # <<<<<<<<<<<<<<
 * 
 *     def valid_keys(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_n_s_DIHEDRAL);
  __pyx_r = __pyx_n_s_DIHEDRAL;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":895
 *         return BONDED_IA_DIHEDRAL
 * 
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         return "DIHEDRAL"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":898
 *         return "DIHEDRAL"
 * 
 *     def valid_keys(self):             # <<<<<<<<<<<<<<
 *         return "mult", "bend", "phase"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_8Dihedral_5valid_keys(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_8Dihedral_4valid_keys[] = "Dihedral.valid_keys(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_8Dihedral_5valid_keys = {"valid_keys", (PyCFunction)__pyx_pw_10espressomd_12interactions_8Dihedral_5valid_keys, METH_O, __pyx_doc_10espressomd_12interactions_8Dihedral_4valid_keys};
static PyObject *__pyx_pw_10espressomd_12interactions_8Dihedral_5valid_keys(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("valid_keys (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_8Dihedral_4valid_keys(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_8Dihedral_4valid_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("valid_keys", 0);

  /* "espressomd/interactions.pyx":899
 * 
 *     def valid_keys(self):
 *         return "mult", "bend", "phase"             # <<<<<<<<<<<<<<
 * 
 *     def required_keys(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_tuple__48);
  __pyx_r = __pyx_tuple__48;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":898
 *         return "DIHEDRAL"
 * 
 *     def valid_keys(self):             # <<<<<<<<<<<<<<
 *         return "mult", "bend", "phase"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":901
 *         return "mult", "bend", "phase"
 * 
 *     def required_keys(self):             # <<<<<<<<<<<<<<
 *         return "mult", "bend", "phase"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_8Dihedral_7required_keys(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_8Dihedral_6required_keys[] = "Dihedral.required_keys(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_8Dihedral_7required_keys = {"required_keys", (PyCFunction)__pyx_pw_10espressomd_12interactions_8Dihedral_7required_keys, METH_O, __pyx_doc_10espressomd_12interactions_8Dihedral_6required_keys};
static PyObject *__pyx_pw_10espressomd_12interactions_8Dihedral_7required_keys(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("required_keys (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_8Dihedral_6required_keys(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_8Dihedral_6required_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("required_keys", 0);

  /* "espressomd/interactions.pyx":902
 * 
 *     def required_keys(self):
 *         return "mult", "bend", "phase"             # <<<<<<<<<<<<<<
 * 
 *     def set_default_params(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_tuple__49);
  __pyx_r = __pyx_tuple__49;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":901
 *         return "mult", "bend", "phase"
 * 
 *     def required_keys(self):             # <<<<<<<<<<<<<<
 *         return "mult", "bend", "phase"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":904
 *         return "mult", "bend", "phase"
 * 
 *     def set_default_params(self):             # <<<<<<<<<<<<<<
 *         self._params = {"mult'": 1., "bend": 0., "phase": 0.}
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_8Dihedral_9set_default_params(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_8Dihedral_8set_default_params[] = "Dihedral.set_default_params(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_8Dihedral_9set_default_params = {"set_default_params", (PyCFunction)__pyx_pw_10espressomd_12interactions_8Dihedral_9set_default_params, METH_O, __pyx_doc_10espressomd_12interactions_8Dihedral_8set_default_params};
static PyObject *__pyx_pw_10espressomd_12interactions_8Dihedral_9set_default_params(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_default_params (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_8Dihedral_8set_default_params(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_8Dihedral_8set_default_params(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_default_params", 0);

  /* "espressomd/interactions.pyx":905
 * 
 *     def set_default_params(self):
 *         self._params = {"mult'": 1., "bend": 0., "phase": 0.}             # <<<<<<<<<<<<<<
 * 
 *     def _get_params_from_es_core(self):
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_s_mult_2, __pyx_float_1_) < 0) __PYX_ERR(0, 905, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_bend, __pyx_float_0_) < 0) __PYX_ERR(0, 905, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_phase, __pyx_float_0_) < 0) __PYX_ERR(0, 905, __pyx_L1_error)
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_params, __pyx_t_1) < 0) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":904
 *         return "mult", "bend", "phase"
 * 
 *     def set_default_params(self):             # <<<<<<<<<<<<<<
 *         self._params = {"mult'": 1., "bend": 0., "phase": 0.}
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.Dihedral.set_default_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":907
 *         self._params = {"mult'": 1., "bend": 0., "phase": 0.}
 * 
 *     def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *         return \
 *             {"mult": bonded_ia_params[self._bond_id].p.dihedral.mult,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_8Dihedral_11_get_params_from_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_8Dihedral_10_get_params_from_es_core[] = "Dihedral._get_params_from_es_core(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_8Dihedral_11_get_params_from_es_core = {"_get_params_from_es_core", (PyCFunction)__pyx_pw_10espressomd_12interactions_8Dihedral_11_get_params_from_es_core, METH_O, __pyx_doc_10espressomd_12interactions_8Dihedral_10_get_params_from_es_core};
static PyObject *__pyx_pw_10espressomd_12interactions_8Dihedral_11_get_params_from_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_params_from_es_core (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_8Dihedral_10_get_params_from_es_core(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_8Dihedral_10_get_params_from_es_core(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  __Pyx_RefNannySetupContext("_get_params_from_es_core", 0);

  /* "espressomd/interactions.pyx":908
 * 
 *     def _get_params_from_es_core(self):
 *         return \             # <<<<<<<<<<<<<<
 *             {"mult": bonded_ia_params[self._bond_id].p.dihedral.mult,
 *              "bend": bonded_ia_params[self._bond_id].p.dihedral.bend,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "espressomd/interactions.pyx":909
 *     def _get_params_from_es_core(self):
 *         return \
 *             {"mult": bonded_ia_params[self._bond_id].p.dihedral.mult,             # <<<<<<<<<<<<<<
 *              "bend": bonded_ia_params[self._bond_id].p.dihedral.bend,
 *              "phase": bonded_ia_params[self._bond_id].p.dihedral.phase}
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 909, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((bonded_ia_params[__pyx_t_3]).p.dihedral.mult); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_mult, __pyx_t_2) < 0) __PYX_ERR(0, 909, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":910
 *         return \
 *             {"mult": bonded_ia_params[self._bond_id].p.dihedral.mult,
 *              "bend": bonded_ia_params[self._bond_id].p.dihedral.bend,             # <<<<<<<<<<<<<<
 *              "phase": bonded_ia_params[self._bond_id].p.dihedral.phase}
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 910, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((bonded_ia_params[__pyx_t_3]).p.dihedral.bend); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_bend, __pyx_t_2) < 0) __PYX_ERR(0, 909, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":911
 *             {"mult": bonded_ia_params[self._bond_id].p.dihedral.mult,
 *              "bend": bonded_ia_params[self._bond_id].p.dihedral.bend,
 *              "phase": bonded_ia_params[self._bond_id].p.dihedral.phase}             # <<<<<<<<<<<<<<
 * 
 *     def _set_params_in_es_core(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((bonded_ia_params[__pyx_t_3]).p.dihedral.phase); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_phase, __pyx_t_2) < 0) __PYX_ERR(0, 909, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":907
 *         self._params = {"mult'": 1., "bend": 0., "phase": 0.}
 * 
 *     def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *         return \
 *             {"mult": bonded_ia_params[self._bond_id].p.dihedral.mult,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("espressomd.interactions.Dihedral._get_params_from_es_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":913
 *              "phase": bonded_ia_params[self._bond_id].p.dihedral.phase}
 * 
 *     def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *         dihedral_set_params(
 *             self._bond_id, self._params["mult"], self._params["bend"], self._params["phase"])
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_8Dihedral_13_set_params_in_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_8Dihedral_12_set_params_in_es_core[] = "Dihedral._set_params_in_es_core(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_8Dihedral_13_set_params_in_es_core = {"_set_params_in_es_core", (PyCFunction)__pyx_pw_10espressomd_12interactions_8Dihedral_13_set_params_in_es_core, METH_O, __pyx_doc_10espressomd_12interactions_8Dihedral_12_set_params_in_es_core};
static PyObject *__pyx_pw_10espressomd_12interactions_8Dihedral_13_set_params_in_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_params_in_es_core (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_8Dihedral_12_set_params_in_es_core(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_8Dihedral_12_set_params_in_es_core(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  double __pyx_t_5;
  double __pyx_t_6;
  __Pyx_RefNannySetupContext("_set_params_in_es_core", 0);

  /* "espressomd/interactions.pyx":915
 *     def _set_params_in_es_core(self):
 *         dihedral_set_params(
 *             self._bond_id, self._params["mult"], self._params["bend"], self._params["phase"])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_params); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_mult); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_params); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_3, __pyx_n_s_bend); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_params); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_phase); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "espressomd/interactions.pyx":914
 * 
 *     def _set_params_in_es_core(self):
 *         dihedral_set_params(             # <<<<<<<<<<<<<<
 *             self._bond_id, self._params["mult"], self._params["bend"], self._params["phase"])
 * 
 */
  dihedral_set_params(__pyx_t_2, __pyx_t_4, __pyx_t_5, __pyx_t_6);

  /* "espressomd/interactions.pyx":913
 *              "phase": bonded_ia_params[self._bond_id].p.dihedral.phase}
 * 
 *     def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *         dihedral_set_params(
 *             self._bond_id, self._params["mult"], self._params["bend"], self._params["phase"])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("espressomd.interactions.Dihedral._set_params_in_es_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1040
 *     class Tabulated(BondedInteraction):
 * 
 *         def type_number(self):             # <<<<<<<<<<<<<<
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_9Tabulated_1type_number(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_9Tabulated_type_number[] = "Tabulated.type_number(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_9Tabulated_1type_number = {"type_number", (PyCFunction)__pyx_pw_10espressomd_12interactions_9Tabulated_1type_number, METH_O, __pyx_doc_10espressomd_12interactions_9Tabulated_type_number};
static PyObject *__pyx_pw_10espressomd_12interactions_9Tabulated_1type_number(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_number (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_9Tabulated_type_number(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_9Tabulated_type_number(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("type_number", 0);

  /* "espressomd/interactions.pyx":1041
 * 
 *         def type_number(self):
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")             # <<<<<<<<<<<<<<
 * 
 *         def type_name(self):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 1041, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1040
 *     class Tabulated(BondedInteraction):
 * 
 *         def type_number(self):             # <<<<<<<<<<<<<<
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.Tabulated.type_number", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1043
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 *         def type_name(self):             # <<<<<<<<<<<<<<
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_9Tabulated_3type_name(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_9Tabulated_2type_name[] = "Tabulated.type_name(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_9Tabulated_3type_name = {"type_name", (PyCFunction)__pyx_pw_10espressomd_12interactions_9Tabulated_3type_name, METH_O, __pyx_doc_10espressomd_12interactions_9Tabulated_2type_name};
static PyObject *__pyx_pw_10espressomd_12interactions_9Tabulated_3type_name(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_name (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_9Tabulated_2type_name(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_9Tabulated_2type_name(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("type_name", 0);

  /* "espressomd/interactions.pyx":1044
 * 
 *         def type_name(self):
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")             # <<<<<<<<<<<<<<
 * 
 *         def valid_keys(self):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 1044, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1043
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 *         def type_name(self):             # <<<<<<<<<<<<<<
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.Tabulated.type_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1046
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 *         def valid_keys(self):             # <<<<<<<<<<<<<<
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_9Tabulated_5valid_keys(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_9Tabulated_4valid_keys[] = "Tabulated.valid_keys(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_9Tabulated_5valid_keys = {"valid_keys", (PyCFunction)__pyx_pw_10espressomd_12interactions_9Tabulated_5valid_keys, METH_O, __pyx_doc_10espressomd_12interactions_9Tabulated_4valid_keys};
static PyObject *__pyx_pw_10espressomd_12interactions_9Tabulated_5valid_keys(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("valid_keys (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_9Tabulated_4valid_keys(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_9Tabulated_4valid_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("valid_keys", 0);

  /* "espressomd/interactions.pyx":1047
 * 
 *         def valid_keys(self):
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")             # <<<<<<<<<<<<<<
 * 
 *         def required_keys(self):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 1047, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1046
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 *         def valid_keys(self):             # <<<<<<<<<<<<<<
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.Tabulated.valid_keys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1049
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 *         def required_keys(self):             # <<<<<<<<<<<<<<
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_9Tabulated_7required_keys(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_9Tabulated_6required_keys[] = "Tabulated.required_keys(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_9Tabulated_7required_keys = {"required_keys", (PyCFunction)__pyx_pw_10espressomd_12interactions_9Tabulated_7required_keys, METH_O, __pyx_doc_10espressomd_12interactions_9Tabulated_6required_keys};
static PyObject *__pyx_pw_10espressomd_12interactions_9Tabulated_7required_keys(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("required_keys (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_9Tabulated_6required_keys(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_9Tabulated_6required_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("required_keys", 0);

  /* "espressomd/interactions.pyx":1050
 * 
 *         def required_keys(self):
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")             # <<<<<<<<<<<<<<
 * 
 *         def set_default_params(self):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1050, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 1050, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1049
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 *         def required_keys(self):             # <<<<<<<<<<<<<<
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.Tabulated.required_keys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1052
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 *         def set_default_params(self):             # <<<<<<<<<<<<<<
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_9Tabulated_9set_default_params(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_9Tabulated_8set_default_params[] = "Tabulated.set_default_params(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_9Tabulated_9set_default_params = {"set_default_params", (PyCFunction)__pyx_pw_10espressomd_12interactions_9Tabulated_9set_default_params, METH_O, __pyx_doc_10espressomd_12interactions_9Tabulated_8set_default_params};
static PyObject *__pyx_pw_10espressomd_12interactions_9Tabulated_9set_default_params(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_default_params (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_9Tabulated_8set_default_params(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_9Tabulated_8set_default_params(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_default_params", 0);

  /* "espressomd/interactions.pyx":1053
 * 
 *         def set_default_params(self):
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")             # <<<<<<<<<<<<<<
 * 
 *         def _get_params_from_es_core(self):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 1053, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1052
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 *         def set_default_params(self):             # <<<<<<<<<<<<<<
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.Tabulated.set_default_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1055
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 *         def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_9Tabulated_11_get_params_from_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_9Tabulated_10_get_params_from_es_core[] = "Tabulated._get_params_from_es_core(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_9Tabulated_11_get_params_from_es_core = {"_get_params_from_es_core", (PyCFunction)__pyx_pw_10espressomd_12interactions_9Tabulated_11_get_params_from_es_core, METH_O, __pyx_doc_10espressomd_12interactions_9Tabulated_10_get_params_from_es_core};
static PyObject *__pyx_pw_10espressomd_12interactions_9Tabulated_11_get_params_from_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_params_from_es_core (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_9Tabulated_10_get_params_from_es_core(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_9Tabulated_10_get_params_from_es_core(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_get_params_from_es_core", 0);

  /* "espressomd/interactions.pyx":1056
 * 
 *         def _get_params_from_es_core(self):
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")             # <<<<<<<<<<<<<<
 * 
 *         def _set_params_in_es_core(self):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__55, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 1056, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1055
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 *         def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.Tabulated._get_params_from_es_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1058
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 *         def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_9Tabulated_13_set_params_in_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_9Tabulated_12_set_params_in_es_core[] = "Tabulated._set_params_in_es_core(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_9Tabulated_13_set_params_in_es_core = {"_set_params_in_es_core", (PyCFunction)__pyx_pw_10espressomd_12interactions_9Tabulated_13_set_params_in_es_core, METH_O, __pyx_doc_10espressomd_12interactions_9Tabulated_12_set_params_in_es_core};
static PyObject *__pyx_pw_10espressomd_12interactions_9Tabulated_13_set_params_in_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_params_in_es_core (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_9Tabulated_12_set_params_in_es_core(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_9Tabulated_12_set_params_in_es_core(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_set_params_in_es_core", 0);

  /* "espressomd/interactions.pyx":1059
 * 
 *         def _set_params_in_es_core(self):
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__56, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1059, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 1059, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1058
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 *         def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.Tabulated._set_params_in_es_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1065
 *     class Subt_Lj(BondedInteraction):
 * 
 *         def type_number(self):             # <<<<<<<<<<<<<<
 *             return BONDED_IA_SUBT_LJ
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_7Subt_Lj_1type_number(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_7Subt_Lj_type_number[] = "Subt_Lj.type_number(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_7Subt_Lj_1type_number = {"type_number", (PyCFunction)__pyx_pw_10espressomd_12interactions_7Subt_Lj_1type_number, METH_O, __pyx_doc_10espressomd_12interactions_7Subt_Lj_type_number};
static PyObject *__pyx_pw_10espressomd_12interactions_7Subt_Lj_1type_number(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_number (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_7Subt_Lj_type_number(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_7Subt_Lj_type_number(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("type_number", 0);

  /* "espressomd/interactions.pyx":1066
 * 
 *         def type_number(self):
 *             return BONDED_IA_SUBT_LJ             # <<<<<<<<<<<<<<
 * 
 *         def type_name(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_enum__BondedInteraction(BONDED_IA_SUBT_LJ); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":1065
 *     class Subt_Lj(BondedInteraction):
 * 
 *         def type_number(self):             # <<<<<<<<<<<<<<
 *             return BONDED_IA_SUBT_LJ
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.Subt_Lj.type_number", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1068
 *             return BONDED_IA_SUBT_LJ
 * 
 *         def type_name(self):             # <<<<<<<<<<<<<<
 *             return "SUBT_LJ"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_7Subt_Lj_3type_name(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_7Subt_Lj_2type_name[] = "Subt_Lj.type_name(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_7Subt_Lj_3type_name = {"type_name", (PyCFunction)__pyx_pw_10espressomd_12interactions_7Subt_Lj_3type_name, METH_O, __pyx_doc_10espressomd_12interactions_7Subt_Lj_2type_name};
static PyObject *__pyx_pw_10espressomd_12interactions_7Subt_Lj_3type_name(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_name (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_7Subt_Lj_2type_name(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_7Subt_Lj_2type_name(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_name", 0);

  /* "espressomd/interactions.pyx":1069
 * 
 *         def type_name(self):
 *             return "SUBT_LJ"             # <<<<<<<<<<<<<<
 * 
 *         def valid_keys(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_n_s_SUBT_LJ);
  __pyx_r = __pyx_n_s_SUBT_LJ;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":1068
 *             return BONDED_IA_SUBT_LJ
 * 
 *         def type_name(self):             # <<<<<<<<<<<<<<
 *             return "SUBT_LJ"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1071
 *             return "SUBT_LJ"
 * 
 *         def valid_keys(self):             # <<<<<<<<<<<<<<
 *             return "r", "k"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_7Subt_Lj_5valid_keys(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_7Subt_Lj_4valid_keys[] = "Subt_Lj.valid_keys(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_7Subt_Lj_5valid_keys = {"valid_keys", (PyCFunction)__pyx_pw_10espressomd_12interactions_7Subt_Lj_5valid_keys, METH_O, __pyx_doc_10espressomd_12interactions_7Subt_Lj_4valid_keys};
static PyObject *__pyx_pw_10espressomd_12interactions_7Subt_Lj_5valid_keys(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("valid_keys (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_7Subt_Lj_4valid_keys(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_7Subt_Lj_4valid_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("valid_keys", 0);

  /* "espressomd/interactions.pyx":1072
 * 
 *         def valid_keys(self):
 *             return "r", "k"             # <<<<<<<<<<<<<<
 * 
 *         def required_keys(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_tuple__57);
  __pyx_r = __pyx_tuple__57;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":1071
 *             return "SUBT_LJ"
 * 
 *         def valid_keys(self):             # <<<<<<<<<<<<<<
 *             return "r", "k"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1074
 *             return "r", "k"
 * 
 *         def required_keys(self):             # <<<<<<<<<<<<<<
 *             return "r", "k"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_7Subt_Lj_7required_keys(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_7Subt_Lj_6required_keys[] = "Subt_Lj.required_keys(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_7Subt_Lj_7required_keys = {"required_keys", (PyCFunction)__pyx_pw_10espressomd_12interactions_7Subt_Lj_7required_keys, METH_O, __pyx_doc_10espressomd_12interactions_7Subt_Lj_6required_keys};
static PyObject *__pyx_pw_10espressomd_12interactions_7Subt_Lj_7required_keys(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("required_keys (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_7Subt_Lj_6required_keys(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_7Subt_Lj_6required_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("required_keys", 0);

  /* "espressomd/interactions.pyx":1075
 * 
 *         def required_keys(self):
 *             return "r", "k"             # <<<<<<<<<<<<<<
 * 
 *         def set_default_params(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_tuple__58);
  __pyx_r = __pyx_tuple__58;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":1074
 *             return "r", "k"
 * 
 *         def required_keys(self):             # <<<<<<<<<<<<<<
 *             return "r", "k"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1077
 *             return "r", "k"
 * 
 *         def set_default_params(self):             # <<<<<<<<<<<<<<
 *             self._params = {"k": 0, "r": 0}
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_7Subt_Lj_9set_default_params(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_7Subt_Lj_8set_default_params[] = "Subt_Lj.set_default_params(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_7Subt_Lj_9set_default_params = {"set_default_params", (PyCFunction)__pyx_pw_10espressomd_12interactions_7Subt_Lj_9set_default_params, METH_O, __pyx_doc_10espressomd_12interactions_7Subt_Lj_8set_default_params};
static PyObject *__pyx_pw_10espressomd_12interactions_7Subt_Lj_9set_default_params(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_default_params (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_7Subt_Lj_8set_default_params(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_7Subt_Lj_8set_default_params(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_default_params", 0);

  /* "espressomd/interactions.pyx":1078
 * 
 *         def set_default_params(self):
 *             self._params = {"k": 0, "r": 0}             # <<<<<<<<<<<<<<
 * 
 *         def _get_params_from_es_core(self):
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_k, __pyx_int_0) < 0) __PYX_ERR(0, 1078, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_r, __pyx_int_0) < 0) __PYX_ERR(0, 1078, __pyx_L1_error)
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_params, __pyx_t_1) < 0) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":1077
 *             return "r", "k"
 * 
 *         def set_default_params(self):             # <<<<<<<<<<<<<<
 *             self._params = {"k": 0, "r": 0}
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.Subt_Lj.set_default_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1080
 *             self._params = {"k": 0, "r": 0}
 * 
 *         def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *             return \
 *                 {"k": bonded_ia_params[self._bond_id].p.subt_lj.k,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_7Subt_Lj_11_get_params_from_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_7Subt_Lj_10_get_params_from_es_core[] = "Subt_Lj._get_params_from_es_core(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_7Subt_Lj_11_get_params_from_es_core = {"_get_params_from_es_core", (PyCFunction)__pyx_pw_10espressomd_12interactions_7Subt_Lj_11_get_params_from_es_core, METH_O, __pyx_doc_10espressomd_12interactions_7Subt_Lj_10_get_params_from_es_core};
static PyObject *__pyx_pw_10espressomd_12interactions_7Subt_Lj_11_get_params_from_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_params_from_es_core (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_7Subt_Lj_10_get_params_from_es_core(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_7Subt_Lj_10_get_params_from_es_core(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  __Pyx_RefNannySetupContext("_get_params_from_es_core", 0);

  /* "espressomd/interactions.pyx":1081
 * 
 *         def _get_params_from_es_core(self):
 *             return \             # <<<<<<<<<<<<<<
 *                 {"k": bonded_ia_params[self._bond_id].p.subt_lj.k,
 *                  "r": bonded_ia_params[self._bond_id].p.subt_lj.r}
 */
  __Pyx_XDECREF(__pyx_r);

  /* "espressomd/interactions.pyx":1082
 *         def _get_params_from_es_core(self):
 *             return \
 *                 {"k": bonded_ia_params[self._bond_id].p.subt_lj.k,             # <<<<<<<<<<<<<<
 *                  "r": bonded_ia_params[self._bond_id].p.subt_lj.r}
 * 
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((bonded_ia_params[__pyx_t_3]).p.subt_lj.k); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_k, __pyx_t_2) < 0) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":1083
 *             return \
 *                 {"k": bonded_ia_params[self._bond_id].p.subt_lj.k,
 *                  "r": bonded_ia_params[self._bond_id].p.subt_lj.r}             # <<<<<<<<<<<<<<
 * 
 *         def _set_params_in_es_core(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((bonded_ia_params[__pyx_t_3]).p.subt_lj.r); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_r, __pyx_t_2) < 0) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":1080
 *             self._params = {"k": 0, "r": 0}
 * 
 *         def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *             return \
 *                 {"k": bonded_ia_params[self._bond_id].p.subt_lj.k,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("espressomd.interactions.Subt_Lj._get_params_from_es_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1085
 *                  "r": bonded_ia_params[self._bond_id].p.subt_lj.r}
 * 
 *         def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *             subt_lj_set_params(
 *                 self._bond_id, self._params["k"], self._params["r"])
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_7Subt_Lj_13_set_params_in_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_7Subt_Lj_12_set_params_in_es_core[] = "Subt_Lj._set_params_in_es_core(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_7Subt_Lj_13_set_params_in_es_core = {"_set_params_in_es_core", (PyCFunction)__pyx_pw_10espressomd_12interactions_7Subt_Lj_13_set_params_in_es_core, METH_O, __pyx_doc_10espressomd_12interactions_7Subt_Lj_12_set_params_in_es_core};
static PyObject *__pyx_pw_10espressomd_12interactions_7Subt_Lj_13_set_params_in_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_params_in_es_core (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_7Subt_Lj_12_set_params_in_es_core(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_7Subt_Lj_12_set_params_in_es_core(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("_set_params_in_es_core", 0);

  /* "espressomd/interactions.pyx":1087
 *         def _set_params_in_es_core(self):
 *             subt_lj_set_params(
 *                 self._bond_id, self._params["k"], self._params["r"])             # <<<<<<<<<<<<<<
 * 
 * IF BOND_VIRTUAL == 1:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1087, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_params); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_k); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1087, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_params); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_3, __pyx_n_s_r); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1087, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":1086
 * 
 *         def _set_params_in_es_core(self):
 *             subt_lj_set_params(             # <<<<<<<<<<<<<<
 *                 self._bond_id, self._params["k"], self._params["r"])
 * 
 */
  subt_lj_set_params(__pyx_t_2, __pyx_t_4, __pyx_t_5);

  /* "espressomd/interactions.pyx":1085
 *                  "r": bonded_ia_params[self._bond_id].p.subt_lj.r}
 * 
 *         def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *             subt_lj_set_params(
 *                 self._bond_id, self._params["k"], self._params["r"])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("espressomd.interactions.Subt_Lj._set_params_in_es_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1281
 * class Oif_Global_Forces(BondedInteraction):
 * 
 *     def type_number(self):             # <<<<<<<<<<<<<<
 *         return BONDED_IA_OIF_GLOBAL_FORCES
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_17Oif_Global_Forces_1type_number(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_17Oif_Global_Forces_type_number[] = "Oif_Global_Forces.type_number(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_17Oif_Global_Forces_1type_number = {"type_number", (PyCFunction)__pyx_pw_10espressomd_12interactions_17Oif_Global_Forces_1type_number, METH_O, __pyx_doc_10espressomd_12interactions_17Oif_Global_Forces_type_number};
static PyObject *__pyx_pw_10espressomd_12interactions_17Oif_Global_Forces_1type_number(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_number (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_17Oif_Global_Forces_type_number(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_17Oif_Global_Forces_type_number(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("type_number", 0);

  /* "espressomd/interactions.pyx":1282
 * 
 *     def type_number(self):
 *         return BONDED_IA_OIF_GLOBAL_FORCES             # <<<<<<<<<<<<<<
 * 
 *     def type_name(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_enum__BondedInteraction(BONDED_IA_OIF_GLOBAL_FORCES); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":1281
 * class Oif_Global_Forces(BondedInteraction):
 * 
 *     def type_number(self):             # <<<<<<<<<<<<<<
 *         return BONDED_IA_OIF_GLOBAL_FORCES
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.Oif_Global_Forces.type_number", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1284
 *         return BONDED_IA_OIF_GLOBAL_FORCES
 * 
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         return "OIF_GLOBAL_FORCES"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_17Oif_Global_Forces_3type_name(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_17Oif_Global_Forces_2type_name[] = "Oif_Global_Forces.type_name(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_17Oif_Global_Forces_3type_name = {"type_name", (PyCFunction)__pyx_pw_10espressomd_12interactions_17Oif_Global_Forces_3type_name, METH_O, __pyx_doc_10espressomd_12interactions_17Oif_Global_Forces_2type_name};
static PyObject *__pyx_pw_10espressomd_12interactions_17Oif_Global_Forces_3type_name(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_name (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_17Oif_Global_Forces_2type_name(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_17Oif_Global_Forces_2type_name(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_name", 0);

  /* "espressomd/interactions.pyx":1285
 * 
 *     def type_name(self):
 *         return "OIF_GLOBAL_FORCES"             # <<<<<<<<<<<<<<
 * 
 *     def valid_keys(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_n_s_OIF_GLOBAL_FORCES);
  __pyx_r = __pyx_n_s_OIF_GLOBAL_FORCES;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":1284
 *         return BONDED_IA_OIF_GLOBAL_FORCES
 * 
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         return "OIF_GLOBAL_FORCES"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1287
 *         return "OIF_GLOBAL_FORCES"
 * 
 *     def valid_keys(self):             # <<<<<<<<<<<<<<
 *         return "A0_g", "ka_g", "V0", "kv"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_17Oif_Global_Forces_5valid_keys(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_17Oif_Global_Forces_4valid_keys[] = "Oif_Global_Forces.valid_keys(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_17Oif_Global_Forces_5valid_keys = {"valid_keys", (PyCFunction)__pyx_pw_10espressomd_12interactions_17Oif_Global_Forces_5valid_keys, METH_O, __pyx_doc_10espressomd_12interactions_17Oif_Global_Forces_4valid_keys};
static PyObject *__pyx_pw_10espressomd_12interactions_17Oif_Global_Forces_5valid_keys(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("valid_keys (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_17Oif_Global_Forces_4valid_keys(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_17Oif_Global_Forces_4valid_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("valid_keys", 0);

  /* "espressomd/interactions.pyx":1288
 * 
 *     def valid_keys(self):
 *         return "A0_g", "ka_g", "V0", "kv"             # <<<<<<<<<<<<<<
 * 
 *     def required_keys(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_tuple__59);
  __pyx_r = __pyx_tuple__59;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":1287
 *         return "OIF_GLOBAL_FORCES"
 * 
 *     def valid_keys(self):             # <<<<<<<<<<<<<<
 *         return "A0_g", "ka_g", "V0", "kv"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1290
 *         return "A0_g", "ka_g", "V0", "kv"
 * 
 *     def required_keys(self):             # <<<<<<<<<<<<<<
 *         return "A0_g", "ka_g", "V0", "kv"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_17Oif_Global_Forces_7required_keys(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_17Oif_Global_Forces_6required_keys[] = "Oif_Global_Forces.required_keys(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_17Oif_Global_Forces_7required_keys = {"required_keys", (PyCFunction)__pyx_pw_10espressomd_12interactions_17Oif_Global_Forces_7required_keys, METH_O, __pyx_doc_10espressomd_12interactions_17Oif_Global_Forces_6required_keys};
static PyObject *__pyx_pw_10espressomd_12interactions_17Oif_Global_Forces_7required_keys(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("required_keys (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_17Oif_Global_Forces_6required_keys(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_17Oif_Global_Forces_6required_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("required_keys", 0);

  /* "espressomd/interactions.pyx":1291
 * 
 *     def required_keys(self):
 *         return "A0_g", "ka_g", "V0", "kv"             # <<<<<<<<<<<<<<
 * 
 *     def set_default_params(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_tuple__60);
  __pyx_r = __pyx_tuple__60;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":1290
 *         return "A0_g", "ka_g", "V0", "kv"
 * 
 *     def required_keys(self):             # <<<<<<<<<<<<<<
 *         return "A0_g", "ka_g", "V0", "kv"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1293
 *         return "A0_g", "ka_g", "V0", "kv"
 * 
 *     def set_default_params(self):             # <<<<<<<<<<<<<<
 *         self._params = {"A0_g": 1., "ka_g": 0., "V0": 1., "kv": 0.}
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_17Oif_Global_Forces_9set_default_params(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_17Oif_Global_Forces_8set_default_params[] = "Oif_Global_Forces.set_default_params(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_17Oif_Global_Forces_9set_default_params = {"set_default_params", (PyCFunction)__pyx_pw_10espressomd_12interactions_17Oif_Global_Forces_9set_default_params, METH_O, __pyx_doc_10espressomd_12interactions_17Oif_Global_Forces_8set_default_params};
static PyObject *__pyx_pw_10espressomd_12interactions_17Oif_Global_Forces_9set_default_params(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_default_params (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_17Oif_Global_Forces_8set_default_params(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_17Oif_Global_Forces_8set_default_params(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_default_params", 0);

  /* "espressomd/interactions.pyx":1294
 * 
 *     def set_default_params(self):
 *         self._params = {"A0_g": 1., "ka_g": 0., "V0": 1., "kv": 0.}             # <<<<<<<<<<<<<<
 * 
 *     def _get_params_from_es_core(self):
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_A0_g, __pyx_float_1_) < 0) __PYX_ERR(0, 1294, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ka_g, __pyx_float_0_) < 0) __PYX_ERR(0, 1294, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_V0, __pyx_float_1_) < 0) __PYX_ERR(0, 1294, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_kv, __pyx_float_0_) < 0) __PYX_ERR(0, 1294, __pyx_L1_error)
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_params, __pyx_t_1) < 0) __PYX_ERR(0, 1294, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":1293
 *         return "A0_g", "ka_g", "V0", "kv"
 * 
 *     def set_default_params(self):             # <<<<<<<<<<<<<<
 *         self._params = {"A0_g": 1., "ka_g": 0., "V0": 1., "kv": 0.}
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.Oif_Global_Forces.set_default_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1296
 *         self._params = {"A0_g": 1., "ka_g": 0., "V0": 1., "kv": 0.}
 * 
 *     def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *         return \
 *             {"A0_g": bonded_ia_params[self._bond_id].p.oif_global_forces.A0_g,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_17Oif_Global_Forces_11_get_params_from_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_17Oif_Global_Forces_10_get_params_from_es_core[] = "Oif_Global_Forces._get_params_from_es_core(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_17Oif_Global_Forces_11_get_params_from_es_core = {"_get_params_from_es_core", (PyCFunction)__pyx_pw_10espressomd_12interactions_17Oif_Global_Forces_11_get_params_from_es_core, METH_O, __pyx_doc_10espressomd_12interactions_17Oif_Global_Forces_10_get_params_from_es_core};
static PyObject *__pyx_pw_10espressomd_12interactions_17Oif_Global_Forces_11_get_params_from_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_params_from_es_core (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_17Oif_Global_Forces_10_get_params_from_es_core(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_17Oif_Global_Forces_10_get_params_from_es_core(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  __Pyx_RefNannySetupContext("_get_params_from_es_core", 0);

  /* "espressomd/interactions.pyx":1297
 * 
 *     def _get_params_from_es_core(self):
 *         return \             # <<<<<<<<<<<<<<
 *             {"A0_g": bonded_ia_params[self._bond_id].p.oif_global_forces.A0_g,
 *              "ka_g": bonded_ia_params[self._bond_id].p.oif_global_forces.ka_g,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "espressomd/interactions.pyx":1298
 *     def _get_params_from_es_core(self):
 *         return \
 *             {"A0_g": bonded_ia_params[self._bond_id].p.oif_global_forces.A0_g,             # <<<<<<<<<<<<<<
 *              "ka_g": bonded_ia_params[self._bond_id].p.oif_global_forces.ka_g,
 *              "V0": bonded_ia_params[self._bond_id].p.oif_global_forces.V0,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1298, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((bonded_ia_params[__pyx_t_3]).p.oif_global_forces.A0_g); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_A0_g, __pyx_t_2) < 0) __PYX_ERR(0, 1298, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":1299
 *         return \
 *             {"A0_g": bonded_ia_params[self._bond_id].p.oif_global_forces.A0_g,
 *              "ka_g": bonded_ia_params[self._bond_id].p.oif_global_forces.ka_g,             # <<<<<<<<<<<<<<
 *              "V0": bonded_ia_params[self._bond_id].p.oif_global_forces.V0,
 *              "kv": bonded_ia_params[self._bond_id].p.oif_global_forces.kv}
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1299, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((bonded_ia_params[__pyx_t_3]).p.oif_global_forces.ka_g); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ka_g, __pyx_t_2) < 0) __PYX_ERR(0, 1298, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":1300
 *             {"A0_g": bonded_ia_params[self._bond_id].p.oif_global_forces.A0_g,
 *              "ka_g": bonded_ia_params[self._bond_id].p.oif_global_forces.ka_g,
 *              "V0": bonded_ia_params[self._bond_id].p.oif_global_forces.V0,             # <<<<<<<<<<<<<<
 *              "kv": bonded_ia_params[self._bond_id].p.oif_global_forces.kv}
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1300, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((bonded_ia_params[__pyx_t_3]).p.oif_global_forces.V0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_V0, __pyx_t_2) < 0) __PYX_ERR(0, 1298, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":1301
 *              "ka_g": bonded_ia_params[self._bond_id].p.oif_global_forces.ka_g,
 *              "V0": bonded_ia_params[self._bond_id].p.oif_global_forces.V0,
 *              "kv": bonded_ia_params[self._bond_id].p.oif_global_forces.kv}             # <<<<<<<<<<<<<<
 * 
 *     def _set_params_in_es_core(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1301, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((bonded_ia_params[__pyx_t_3]).p.oif_global_forces.kv); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_kv, __pyx_t_2) < 0) __PYX_ERR(0, 1298, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":1296
 *         self._params = {"A0_g": 1., "ka_g": 0., "V0": 1., "kv": 0.}
 * 
 *     def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *         return \
 *             {"A0_g": bonded_ia_params[self._bond_id].p.oif_global_forces.A0_g,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("espressomd.interactions.Oif_Global_Forces._get_params_from_es_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1303
 *              "kv": bonded_ia_params[self._bond_id].p.oif_global_forces.kv}
 * 
 *     def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *         oif_global_forces_set_params(
 *             self._bond_id, self._params["A0_g"], self._params["ka_g"], self._params["V0"], self._params["kv"])
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_17Oif_Global_Forces_13_set_params_in_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_17Oif_Global_Forces_12_set_params_in_es_core[] = "Oif_Global_Forces._set_params_in_es_core(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_17Oif_Global_Forces_13_set_params_in_es_core = {"_set_params_in_es_core", (PyCFunction)__pyx_pw_10espressomd_12interactions_17Oif_Global_Forces_13_set_params_in_es_core, METH_O, __pyx_doc_10espressomd_12interactions_17Oif_Global_Forces_12_set_params_in_es_core};
static PyObject *__pyx_pw_10espressomd_12interactions_17Oif_Global_Forces_13_set_params_in_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_params_in_es_core (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_17Oif_Global_Forces_12_set_params_in_es_core(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_17Oif_Global_Forces_12_set_params_in_es_core(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  double __pyx_t_5;
  double __pyx_t_6;
  double __pyx_t_7;
  __Pyx_RefNannySetupContext("_set_params_in_es_core", 0);

  /* "espressomd/interactions.pyx":1305
 *     def _set_params_in_es_core(self):
 *         oif_global_forces_set_params(
 *             self._bond_id, self._params["A0_g"], self._params["ka_g"], self._params["V0"], self._params["kv"])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_params); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_A0_g); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_params); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_3, __pyx_n_s_ka_g); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_params); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_V0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_params); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_3, __pyx_n_s_kv); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":1304
 * 
 *     def _set_params_in_es_core(self):
 *         oif_global_forces_set_params(             # <<<<<<<<<<<<<<
 *             self._bond_id, self._params["A0_g"], self._params["ka_g"], self._params["V0"], self._params["kv"])
 * 
 */
  oif_global_forces_set_params(__pyx_t_2, __pyx_t_4, __pyx_t_5, __pyx_t_6, __pyx_t_7);

  /* "espressomd/interactions.pyx":1303
 *              "kv": bonded_ia_params[self._bond_id].p.oif_global_forces.kv}
 * 
 *     def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *         oif_global_forces_set_params(
 *             self._bond_id, self._params["A0_g"], self._params["ka_g"], self._params["V0"], self._params["kv"])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("espressomd.interactions.Oif_Global_Forces._set_params_in_es_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1310
 * class Oif_Local_Forces(BondedInteraction):
 * 
 *     def type_number(self):             # <<<<<<<<<<<<<<
 *         return BONDED_IA_OIF_LOCAL_FORCES
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_16Oif_Local_Forces_1type_number(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_16Oif_Local_Forces_type_number[] = "Oif_Local_Forces.type_number(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_16Oif_Local_Forces_1type_number = {"type_number", (PyCFunction)__pyx_pw_10espressomd_12interactions_16Oif_Local_Forces_1type_number, METH_O, __pyx_doc_10espressomd_12interactions_16Oif_Local_Forces_type_number};
static PyObject *__pyx_pw_10espressomd_12interactions_16Oif_Local_Forces_1type_number(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_number (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_16Oif_Local_Forces_type_number(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_16Oif_Local_Forces_type_number(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("type_number", 0);

  /* "espressomd/interactions.pyx":1311
 * 
 *     def type_number(self):
 *         return BONDED_IA_OIF_LOCAL_FORCES             # <<<<<<<<<<<<<<
 * 
 *     def type_name(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_enum__BondedInteraction(BONDED_IA_OIF_LOCAL_FORCES); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":1310
 * class Oif_Local_Forces(BondedInteraction):
 * 
 *     def type_number(self):             # <<<<<<<<<<<<<<
 *         return BONDED_IA_OIF_LOCAL_FORCES
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.Oif_Local_Forces.type_number", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1313
 *         return BONDED_IA_OIF_LOCAL_FORCES
 * 
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         return "OIF_LOCAL_FORCES"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_16Oif_Local_Forces_3type_name(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_16Oif_Local_Forces_2type_name[] = "Oif_Local_Forces.type_name(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_16Oif_Local_Forces_3type_name = {"type_name", (PyCFunction)__pyx_pw_10espressomd_12interactions_16Oif_Local_Forces_3type_name, METH_O, __pyx_doc_10espressomd_12interactions_16Oif_Local_Forces_2type_name};
static PyObject *__pyx_pw_10espressomd_12interactions_16Oif_Local_Forces_3type_name(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_name (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_16Oif_Local_Forces_2type_name(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_16Oif_Local_Forces_2type_name(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_name", 0);

  /* "espressomd/interactions.pyx":1314
 * 
 *     def type_name(self):
 *         return "OIF_LOCAL_FORCES"             # <<<<<<<<<<<<<<
 * 
 *     def valid_keys(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_n_s_OIF_LOCAL_FORCES);
  __pyx_r = __pyx_n_s_OIF_LOCAL_FORCES;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":1313
 *         return BONDED_IA_OIF_LOCAL_FORCES
 * 
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         return "OIF_LOCAL_FORCES"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1316
 *         return "OIF_LOCAL_FORCES"
 * 
 *     def valid_keys(self):             # <<<<<<<<<<<<<<
 *         return "r0", "ks", "kslin", "phi0", "kb", "A01", "A02", "kal"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_16Oif_Local_Forces_5valid_keys(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_16Oif_Local_Forces_4valid_keys[] = "Oif_Local_Forces.valid_keys(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_16Oif_Local_Forces_5valid_keys = {"valid_keys", (PyCFunction)__pyx_pw_10espressomd_12interactions_16Oif_Local_Forces_5valid_keys, METH_O, __pyx_doc_10espressomd_12interactions_16Oif_Local_Forces_4valid_keys};
static PyObject *__pyx_pw_10espressomd_12interactions_16Oif_Local_Forces_5valid_keys(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("valid_keys (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_16Oif_Local_Forces_4valid_keys(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_16Oif_Local_Forces_4valid_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("valid_keys", 0);

  /* "espressomd/interactions.pyx":1317
 * 
 *     def valid_keys(self):
 *         return "r0", "ks", "kslin", "phi0", "kb", "A01", "A02", "kal"             # <<<<<<<<<<<<<<
 * 
 *     def required_keys(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_tuple__61);
  __pyx_r = __pyx_tuple__61;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":1316
 *         return "OIF_LOCAL_FORCES"
 * 
 *     def valid_keys(self):             # <<<<<<<<<<<<<<
 *         return "r0", "ks", "kslin", "phi0", "kb", "A01", "A02", "kal"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1319
 *         return "r0", "ks", "kslin", "phi0", "kb", "A01", "A02", "kal"
 * 
 *     def required_keys(self):             # <<<<<<<<<<<<<<
 *         return "r0", "ks", "kslin", "phi0", "kb", "A01", "A02", "kal"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_16Oif_Local_Forces_7required_keys(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_16Oif_Local_Forces_6required_keys[] = "Oif_Local_Forces.required_keys(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_16Oif_Local_Forces_7required_keys = {"required_keys", (PyCFunction)__pyx_pw_10espressomd_12interactions_16Oif_Local_Forces_7required_keys, METH_O, __pyx_doc_10espressomd_12interactions_16Oif_Local_Forces_6required_keys};
static PyObject *__pyx_pw_10espressomd_12interactions_16Oif_Local_Forces_7required_keys(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("required_keys (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_16Oif_Local_Forces_6required_keys(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_16Oif_Local_Forces_6required_keys(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("required_keys", 0);

  /* "espressomd/interactions.pyx":1320
 * 
 *     def required_keys(self):
 *         return "r0", "ks", "kslin", "phi0", "kb", "A01", "A02", "kal"             # <<<<<<<<<<<<<<
 * 
 *     def set_default_params(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_tuple__62);
  __pyx_r = __pyx_tuple__62;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":1319
 *         return "r0", "ks", "kslin", "phi0", "kb", "A01", "A02", "kal"
 * 
 *     def required_keys(self):             # <<<<<<<<<<<<<<
 *         return "r0", "ks", "kslin", "phi0", "kb", "A01", "A02", "kal"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1322
 *         return "r0", "ks", "kslin", "phi0", "kb", "A01", "A02", "kal"
 * 
 *     def set_default_params(self):             # <<<<<<<<<<<<<<
 *         self._params = {"r0": 1., "ks": 0., "kslin": 0.,
 *                         "phi0": 0., "kb": 0., "A01": 0., "A02": 0., "kal": 0.}
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_16Oif_Local_Forces_9set_default_params(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_16Oif_Local_Forces_8set_default_params[] = "Oif_Local_Forces.set_default_params(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_16Oif_Local_Forces_9set_default_params = {"set_default_params", (PyCFunction)__pyx_pw_10espressomd_12interactions_16Oif_Local_Forces_9set_default_params, METH_O, __pyx_doc_10espressomd_12interactions_16Oif_Local_Forces_8set_default_params};
static PyObject *__pyx_pw_10espressomd_12interactions_16Oif_Local_Forces_9set_default_params(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_default_params (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_16Oif_Local_Forces_8set_default_params(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_16Oif_Local_Forces_8set_default_params(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_default_params", 0);

  /* "espressomd/interactions.pyx":1323
 * 
 *     def set_default_params(self):
 *         self._params = {"r0": 1., "ks": 0., "kslin": 0.,             # <<<<<<<<<<<<<<
 *                         "phi0": 0., "kb": 0., "A01": 0., "A02": 0., "kal": 0.}
 * 
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_r0, __pyx_float_1_) < 0) __PYX_ERR(0, 1323, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ks, __pyx_float_0_) < 0) __PYX_ERR(0, 1323, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_kslin, __pyx_float_0_) < 0) __PYX_ERR(0, 1323, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_phi0, __pyx_float_0_) < 0) __PYX_ERR(0, 1323, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_kb, __pyx_float_0_) < 0) __PYX_ERR(0, 1323, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_A01, __pyx_float_0_) < 0) __PYX_ERR(0, 1323, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_A02, __pyx_float_0_) < 0) __PYX_ERR(0, 1323, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_kal, __pyx_float_0_) < 0) __PYX_ERR(0, 1323, __pyx_L1_error)
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_params, __pyx_t_1) < 0) __PYX_ERR(0, 1323, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":1322
 *         return "r0", "ks", "kslin", "phi0", "kb", "A01", "A02", "kal"
 * 
 *     def set_default_params(self):             # <<<<<<<<<<<<<<
 *         self._params = {"r0": 1., "ks": 0., "kslin": 0.,
 *                         "phi0": 0., "kb": 0., "A01": 0., "A02": 0., "kal": 0.}
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.interactions.Oif_Local_Forces.set_default_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1326
 *                         "phi0": 0., "kb": 0., "A01": 0., "A02": 0., "kal": 0.}
 * 
 *     def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *         return \
 *             {"r0": bonded_ia_params[self._bond_id].p.oif_local_forces.r0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_16Oif_Local_Forces_11_get_params_from_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_16Oif_Local_Forces_10_get_params_from_es_core[] = "Oif_Local_Forces._get_params_from_es_core(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_16Oif_Local_Forces_11_get_params_from_es_core = {"_get_params_from_es_core", (PyCFunction)__pyx_pw_10espressomd_12interactions_16Oif_Local_Forces_11_get_params_from_es_core, METH_O, __pyx_doc_10espressomd_12interactions_16Oif_Local_Forces_10_get_params_from_es_core};
static PyObject *__pyx_pw_10espressomd_12interactions_16Oif_Local_Forces_11_get_params_from_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_params_from_es_core (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_16Oif_Local_Forces_10_get_params_from_es_core(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_16Oif_Local_Forces_10_get_params_from_es_core(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  __Pyx_RefNannySetupContext("_get_params_from_es_core", 0);

  /* "espressomd/interactions.pyx":1327
 * 
 *     def _get_params_from_es_core(self):
 *         return \             # <<<<<<<<<<<<<<
 *             {"r0": bonded_ia_params[self._bond_id].p.oif_local_forces.r0,
 *              "ks": bonded_ia_params[self._bond_id].p.oif_local_forces.ks,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "espressomd/interactions.pyx":1328
 *     def _get_params_from_es_core(self):
 *         return \
 *             {"r0": bonded_ia_params[self._bond_id].p.oif_local_forces.r0,             # <<<<<<<<<<<<<<
 *              "ks": bonded_ia_params[self._bond_id].p.oif_local_forces.ks,
 *              "kslin": bonded_ia_params[self._bond_id].p.oif_local_forces.kslin,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1328, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((bonded_ia_params[__pyx_t_3]).p.oif_local_forces.r0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_r0, __pyx_t_2) < 0) __PYX_ERR(0, 1328, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":1329
 *         return \
 *             {"r0": bonded_ia_params[self._bond_id].p.oif_local_forces.r0,
 *              "ks": bonded_ia_params[self._bond_id].p.oif_local_forces.ks,             # <<<<<<<<<<<<<<
 *              "kslin": bonded_ia_params[self._bond_id].p.oif_local_forces.kslin,
 *              "phi0": bonded_ia_params[self._bond_id].p.oif_local_forces.phi0,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1329, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((bonded_ia_params[__pyx_t_3]).p.oif_local_forces.ks); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ks, __pyx_t_2) < 0) __PYX_ERR(0, 1328, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":1330
 *             {"r0": bonded_ia_params[self._bond_id].p.oif_local_forces.r0,
 *              "ks": bonded_ia_params[self._bond_id].p.oif_local_forces.ks,
 *              "kslin": bonded_ia_params[self._bond_id].p.oif_local_forces.kslin,             # <<<<<<<<<<<<<<
 *              "phi0": bonded_ia_params[self._bond_id].p.oif_local_forces.phi0,
 *              "kb": bonded_ia_params[self._bond_id].p.oif_local_forces.kb,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1330, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((bonded_ia_params[__pyx_t_3]).p.oif_local_forces.kslin); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_kslin, __pyx_t_2) < 0) __PYX_ERR(0, 1328, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":1331
 *              "ks": bonded_ia_params[self._bond_id].p.oif_local_forces.ks,
 *              "kslin": bonded_ia_params[self._bond_id].p.oif_local_forces.kslin,
 *              "phi0": bonded_ia_params[self._bond_id].p.oif_local_forces.phi0,             # <<<<<<<<<<<<<<
 *              "kb": bonded_ia_params[self._bond_id].p.oif_local_forces.kb,
 *              "A01": bonded_ia_params[self._bond_id].p.oif_local_forces.A01,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1331, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((bonded_ia_params[__pyx_t_3]).p.oif_local_forces.phi0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_phi0, __pyx_t_2) < 0) __PYX_ERR(0, 1328, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":1332
 *              "kslin": bonded_ia_params[self._bond_id].p.oif_local_forces.kslin,
 *              "phi0": bonded_ia_params[self._bond_id].p.oif_local_forces.phi0,
 *              "kb": bonded_ia_params[self._bond_id].p.oif_local_forces.kb,             # <<<<<<<<<<<<<<
 *              "A01": bonded_ia_params[self._bond_id].p.oif_local_forces.A01,
 *              "A02": bonded_ia_params[self._bond_id].p.oif_local_forces.A02,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1332, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((bonded_ia_params[__pyx_t_3]).p.oif_local_forces.kb); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_kb, __pyx_t_2) < 0) __PYX_ERR(0, 1328, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":1333
 *              "phi0": bonded_ia_params[self._bond_id].p.oif_local_forces.phi0,
 *              "kb": bonded_ia_params[self._bond_id].p.oif_local_forces.kb,
 *              "A01": bonded_ia_params[self._bond_id].p.oif_local_forces.A01,             # <<<<<<<<<<<<<<
 *              "A02": bonded_ia_params[self._bond_id].p.oif_local_forces.A02,
 *              "kal": bonded_ia_params[self._bond_id].p.oif_local_forces.kal}
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1333, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((bonded_ia_params[__pyx_t_3]).p.oif_local_forces.A01); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_A01, __pyx_t_2) < 0) __PYX_ERR(0, 1328, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":1334
 *              "kb": bonded_ia_params[self._bond_id].p.oif_local_forces.kb,
 *              "A01": bonded_ia_params[self._bond_id].p.oif_local_forces.A01,
 *              "A02": bonded_ia_params[self._bond_id].p.oif_local_forces.A02,             # <<<<<<<<<<<<<<
 *              "kal": bonded_ia_params[self._bond_id].p.oif_local_forces.kal}
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1334, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((bonded_ia_params[__pyx_t_3]).p.oif_local_forces.A02); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_A02, __pyx_t_2) < 0) __PYX_ERR(0, 1328, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":1335
 *              "A01": bonded_ia_params[self._bond_id].p.oif_local_forces.A01,
 *              "A02": bonded_ia_params[self._bond_id].p.oif_local_forces.A02,
 *              "kal": bonded_ia_params[self._bond_id].p.oif_local_forces.kal}             # <<<<<<<<<<<<<<
 * 
 *     def _set_params_in_es_core(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((bonded_ia_params[__pyx_t_3]).p.oif_local_forces.kal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_kal, __pyx_t_2) < 0) __PYX_ERR(0, 1328, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":1326
 *                         "phi0": 0., "kb": 0., "A01": 0., "A02": 0., "kal": 0.}
 * 
 *     def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *         return \
 *             {"r0": bonded_ia_params[self._bond_id].p.oif_local_forces.r0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("espressomd.interactions.Oif_Local_Forces._get_params_from_es_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1337
 *              "kal": bonded_ia_params[self._bond_id].p.oif_local_forces.kal}
 * 
 *     def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *         oif_local_forces_set_params(
 *             self._bond_id, self._params["r0"], self._params["ks"], self._params["kslin"], self._params["phi0"], self._params["kb"], self._params["A01"], self._params["A02"], self._params["kal"])
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_16Oif_Local_Forces_13_set_params_in_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_16Oif_Local_Forces_12_set_params_in_es_core[] = "Oif_Local_Forces._set_params_in_es_core(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_16Oif_Local_Forces_13_set_params_in_es_core = {"_set_params_in_es_core", (PyCFunction)__pyx_pw_10espressomd_12interactions_16Oif_Local_Forces_13_set_params_in_es_core, METH_O, __pyx_doc_10espressomd_12interactions_16Oif_Local_Forces_12_set_params_in_es_core};
static PyObject *__pyx_pw_10espressomd_12interactions_16Oif_Local_Forces_13_set_params_in_es_core(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_params_in_es_core (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_16Oif_Local_Forces_12_set_params_in_es_core(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_16Oif_Local_Forces_12_set_params_in_es_core(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  double __pyx_t_5;
  double __pyx_t_6;
  double __pyx_t_7;
  double __pyx_t_8;
  double __pyx_t_9;
  double __pyx_t_10;
  double __pyx_t_11;
  __Pyx_RefNannySetupContext("_set_params_in_es_core", 0);

  /* "espressomd/interactions.pyx":1339
 *     def _set_params_in_es_core(self):
 *         oif_local_forces_set_params(
 *             self._bond_id, self._params["r0"], self._params["ks"], self._params["kslin"], self._params["phi0"], self._params["kb"], self._params["A01"], self._params["A02"], self._params["kal"])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bond_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_params); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_r0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_params); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_3, __pyx_n_s_ks); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_params); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_kslin); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_params); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_3, __pyx_n_s_phi0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_params); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_kb); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_params); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_3, __pyx_n_s_A01); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_params); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_A02); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_params); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_3, __pyx_n_s_kal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":1338
 * 
 *     def _set_params_in_es_core(self):
 *         oif_local_forces_set_params(             # <<<<<<<<<<<<<<
 *             self._bond_id, self._params["r0"], self._params["ks"], self._params["kslin"], self._params["phi0"], self._params["kb"], self._params["A01"], self._params["A02"], self._params["kal"])
 * 
 */
  oif_local_forces_set_params(__pyx_t_2, __pyx_t_4, __pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11);

  /* "espressomd/interactions.pyx":1337
 *              "kal": bonded_ia_params[self._bond_id].p.oif_local_forces.kal}
 * 
 *     def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *         oif_local_forces_set_params(
 *             self._bond_id, self._params["r0"], self._params["ks"], self._params["kslin"], self._params["phi0"], self._params["kb"], self._params["A01"], self._params["A02"], self._params["kal"])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("espressomd.interactions.Oif_Local_Forces._set_params_in_es_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1368
 *     from bonded_interaction_classes"""
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         if not isinstance(key, int):
 *             raise ValueError(
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_18BondedInteractions_1__getitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10espressomd_12interactions_18BondedInteractions___getitem__[] = "BondedInteractions.__getitem__(self, key)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_18BondedInteractions_1__getitem__ = {"__getitem__", (PyCFunction)__pyx_pw_10espressomd_12interactions_18BondedInteractions_1__getitem__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10espressomd_12interactions_18BondedInteractions___getitem__};
static PyObject *__pyx_pw_10espressomd_12interactions_18BondedInteractions_1__getitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_key,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__getitem__", 1, 2, 2, 1); __PYX_ERR(0, 1368, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__getitem__") < 0)) __PYX_ERR(0, 1368, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_key = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__getitem__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1368, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("espressomd.interactions.BondedInteractions.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10espressomd_12interactions_18BondedInteractions___getitem__(__pyx_self, __pyx_v_self, __pyx_v_key);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_18BondedInteractions___getitem__(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_v_bond_type = NULL;
  PyObject *__pyx_v_bond_class = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "espressomd/interactions.pyx":1369
 * 
 *     def __getitem__(self, key):
 *         if not isinstance(key, int):             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "Index to BondedInteractions[] hast to be an integer referring to a bond id")
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_key); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "espressomd/interactions.pyx":1370
 *     def __getitem__(self, key):
 *         if not isinstance(key, int):
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 "Index to BondedInteractions[] hast to be an integer referring to a bond id")
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1370, __pyx_L1_error)

    /* "espressomd/interactions.pyx":1369
 * 
 *     def __getitem__(self, key):
 *         if not isinstance(key, int):             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "Index to BondedInteractions[] hast to be an integer referring to a bond id")
 */
  }

  /* "espressomd/interactions.pyx":1374
 * 
 *         # Find out the type of the interaction from Espresso
 *         bond_type = bonded_ia_params[key].type             # <<<<<<<<<<<<<<
 * 
 *         # Check if the bonded interaction exists in Espresso core
 */
  __pyx_t_4 = __Pyx_PyIndex_AsSsize_t(__pyx_v_key); if (unlikely((__pyx_t_4 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1374, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_From_int((bonded_ia_params[__pyx_t_4]).type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_bond_type = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "espressomd/interactions.pyx":1377
 * 
 *         # Check if the bonded interaction exists in Espresso core
 *         if bond_type == -1:             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "The bonded interaction with the id " + str(key) + " is not yet defined.")
 */
  __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_bond_type, __pyx_int_neg_1, -1L, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1377, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_2) {

    /* "espressomd/interactions.pyx":1379
 *         if bond_type == -1:
 *             raise ValueError(
 *                 "The bonded interaction with the id " + str(key) + " is not yet defined.")             # <<<<<<<<<<<<<<
 * 
 *         # Find the appropriate class representing such a bond
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_key);
    __Pyx_GIVEREF(__pyx_v_key);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_key);
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_kp_s_The_bonded_interaction_with_the, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_is_not_yet_defined); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "espressomd/interactions.pyx":1378
 *         # Check if the bonded interaction exists in Espresso core
 *         if bond_type == -1:
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 "The bonded interaction with the id " + str(key) + " is not yet defined.")
 * 
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 1378, __pyx_L1_error)

    /* "espressomd/interactions.pyx":1377
 * 
 *         # Check if the bonded interaction exists in Espresso core
 *         if bond_type == -1:             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "The bonded interaction with the id " + str(key) + " is not yet defined.")
 */
  }

  /* "espressomd/interactions.pyx":1382
 * 
 *         # Find the appropriate class representing such a bond
 *         bond_class = bonded_interaction_classes[bond_type]             # <<<<<<<<<<<<<<
 * 
 *         # And return an instance of it, which refers to the bonded interaction
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_bonded_interaction_classes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_5, __pyx_v_bond_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_bond_class = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "espressomd/interactions.pyx":1386
 *         # And return an instance of it, which refers to the bonded interaction
 *         # id in Espresso
 *         return bond_class(key)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, key, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_bond_class);
  __pyx_t_5 = __pyx_v_bond_class; __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_key};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1386, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_key};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1386, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1386, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_key);
      __Pyx_GIVEREF(__pyx_v_key);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_key);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1386, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":1368
 *     from bonded_interaction_classes"""
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         if not isinstance(key, int):
 *             raise ValueError(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("espressomd.interactions.BondedInteractions.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_bond_type);
  __Pyx_XDECREF(__pyx_v_bond_class);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1388
 *         return bond_class(key)
 * 
 *     def __setitem__(self, key, value):             # <<<<<<<<<<<<<<
 *         # Validate arguments
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_18BondedInteractions_3__setitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10espressomd_12interactions_18BondedInteractions_2__setitem__[] = "BondedInteractions.__setitem__(self, key, value)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_18BondedInteractions_3__setitem__ = {"__setitem__", (PyCFunction)__pyx_pw_10espressomd_12interactions_18BondedInteractions_3__setitem__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10espressomd_12interactions_18BondedInteractions_2__setitem__};
static PyObject *__pyx_pw_10espressomd_12interactions_18BondedInteractions_3__setitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_key,&__pyx_n_s_value,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__setitem__", 1, 3, 3, 1); __PYX_ERR(0, 1388, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__setitem__", 1, 3, 3, 2); __PYX_ERR(0, 1388, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__setitem__") < 0)) __PYX_ERR(0, 1388, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_key = values[1];
    __pyx_v_value = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setitem__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1388, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("espressomd.interactions.BondedInteractions.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10espressomd_12interactions_18BondedInteractions_2__setitem__(__pyx_self, __pyx_v_self, __pyx_v_key, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_18BondedInteractions_2__setitem__(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "espressomd/interactions.pyx":1392
 * 
 *         # type of key must be int
 *         if not isinstance(key, int):             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "Index to BondedInteractions[] has to ba an integer referring to a bond id")
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_key); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "espressomd/interactions.pyx":1393
 *         # type of key must be int
 *         if not isinstance(key, int):
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 "Index to BondedInteractions[] has to ba an integer referring to a bond id")
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1393, __pyx_L1_error)

    /* "espressomd/interactions.pyx":1392
 * 
 *         # type of key must be int
 *         if not isinstance(key, int):             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "Index to BondedInteractions[] has to ba an integer referring to a bond id")
 */
  }

  /* "espressomd/interactions.pyx":1397
 * 
 *         # Value must be subclass off BondedInteraction
 *         if not isinstance(value, BondedInteraction):             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "Only subclasses of BondedInteraction can be assigned.")
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_10espressomd_12interactions_BondedInteraction); 
  __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_1) {

    /* "espressomd/interactions.pyx":1398
 *         # Value must be subclass off BondedInteraction
 *         if not isinstance(value, BondedInteraction):
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 "Only subclasses of BondedInteraction can be assigned.")
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__65, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1398, __pyx_L1_error)

    /* "espressomd/interactions.pyx":1397
 * 
 *         # Value must be subclass off BondedInteraction
 *         if not isinstance(value, BondedInteraction):             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "Only subclasses of BondedInteraction can be assigned.")
 */
  }

  /* "espressomd/interactions.pyx":1402
 * 
 *         # Save the bond id in the BondedInteraction instance
 *         value._bond_id = key             # <<<<<<<<<<<<<<
 * 
 *         # Set the parameters of the BondedInteraction instance in the Es core
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_value, __pyx_n_s_bond_id, __pyx_v_key) < 0) __PYX_ERR(0, 1402, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1405
 * 
 *         # Set the parameters of the BondedInteraction instance in the Es core
 *         value._set_params_in_es_core()             # <<<<<<<<<<<<<<
 * 
 *     # Support iteration over active bonded interactions
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_set_params_in_es_core); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1405, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1405, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "espressomd/interactions.pyx":1388
 *         return bond_class(key)
 * 
 *     def __setitem__(self, key, value):             # <<<<<<<<<<<<<<
 *         # Validate arguments
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("espressomd.interactions.BondedInteractions.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10espressomd_12interactions_18BondedInteractions_6generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "espressomd/interactions.pyx":1408
 * 
 *     # Support iteration over active bonded interactions
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         for i in range(n_bonded_ia):
 *             if bonded_ia_params[i].type != -1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_18BondedInteractions_5__iter__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_18BondedInteractions_4__iter__[] = "BondedInteractions.__iter__(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_18BondedInteractions_5__iter__ = {"__iter__", (PyCFunction)__pyx_pw_10espressomd_12interactions_18BondedInteractions_5__iter__, METH_O, __pyx_doc_10espressomd_12interactions_18BondedInteractions_4__iter__};
static PyObject *__pyx_pw_10espressomd_12interactions_18BondedInteractions_5__iter__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_18BondedInteractions_4__iter__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_18BondedInteractions_4__iter__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_2___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_2___iter__ *)__pyx_tp_new_10espressomd_12interactions___pyx_scope_struct_2___iter__(__pyx_ptype_10espressomd_12interactions___pyx_scope_struct_2___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_2___iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1408, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_10espressomd_12interactions_18BondedInteractions_6generator, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_BondedInteractions___iter, __pyx_n_s_espressomd_interactions); if (unlikely(!gen)) __PYX_ERR(0, 1408, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("espressomd.interactions.BondedInteractions.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10espressomd_12interactions_18BondedInteractions_6generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_2___iter__ *__pyx_cur_scope = ((struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_2___iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1408, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1409
 *     # Support iteration over active bonded interactions
 *     def __iter__(self):
 *         for i in range(n_bonded_ia):             # <<<<<<<<<<<<<<
 *             if bonded_ia_params[i].type != -1:
 *                 yield self[i]
 */
  __pyx_t_1 = n_bonded_ia;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_2;

    /* "espressomd/interactions.pyx":1410
 *     def __iter__(self):
 *         for i in range(n_bonded_ia):
 *             if bonded_ia_params[i].type != -1:             # <<<<<<<<<<<<<<
 *                 yield self[i]
 * 
 */
    __pyx_t_3 = (((bonded_ia_params[__pyx_cur_scope->__pyx_v_i]).type != -1L) != 0);
    if (__pyx_t_3) {

      /* "espressomd/interactions.pyx":1411
 *         for i in range(n_bonded_ia):
 *             if bonded_ia_params[i].type != -1:
 *                 yield self[i]             # <<<<<<<<<<<<<<
 * 
 *     def add(self, bonded_ia):
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_self, __pyx_cur_scope->__pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1411, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L7_resume_from_yield:;
      __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1411, __pyx_L1_error)

      /* "espressomd/interactions.pyx":1410
 *     def __iter__(self):
 *         for i in range(n_bonded_ia):
 *             if bonded_ia_params[i].type != -1:             # <<<<<<<<<<<<<<
 *                 yield self[i]
 * 
 */
    }
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "espressomd/interactions.pyx":1408
 * 
 *     # Support iteration over active bonded interactions
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         for i in range(n_bonded_ia):
 *             if bonded_ia_params[i].type != -1:
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1413
 *                 yield self[i]
 * 
 *     def add(self, bonded_ia):             # <<<<<<<<<<<<<<
 *         """Add a bonded ia to the simulation>"""
 *         self[n_bonded_ia] = bonded_ia
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_18BondedInteractions_8add(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10espressomd_12interactions_18BondedInteractions_7add[] = "BondedInteractions.add(self, bonded_ia)\nAdd a bonded ia to the simulation>";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_18BondedInteractions_8add = {"add", (PyCFunction)__pyx_pw_10espressomd_12interactions_18BondedInteractions_8add, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10espressomd_12interactions_18BondedInteractions_7add};
static PyObject *__pyx_pw_10espressomd_12interactions_18BondedInteractions_8add(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_bonded_ia = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_bonded_ia,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bonded_ia)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add", 1, 2, 2, 1); __PYX_ERR(0, 1413, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add") < 0)) __PYX_ERR(0, 1413, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_bonded_ia = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1413, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("espressomd.interactions.BondedInteractions.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10espressomd_12interactions_18BondedInteractions_7add(__pyx_self, __pyx_v_self, __pyx_v_bonded_ia);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_18BondedInteractions_7add(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_bonded_ia) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add", 0);

  /* "espressomd/interactions.pyx":1415
 *     def add(self, bonded_ia):
 *         """Add a bonded ia to the simulation>"""
 *         self[n_bonded_ia] = bonded_ia             # <<<<<<<<<<<<<<
 * 
 *     def __getstate__(self):
 */
  if (unlikely(__Pyx_SetItemInt(__pyx_v_self, n_bonded_ia, __pyx_v_bonded_ia, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 1415, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1413
 *                 yield self[i]
 * 
 *     def add(self, bonded_ia):             # <<<<<<<<<<<<<<
 *         """Add a bonded ia to the simulation>"""
 *         self[n_bonded_ia] = bonded_ia
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("espressomd.interactions.BondedInteractions.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1417
 *         self[n_bonded_ia] = bonded_ia
 * 
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         params = {}
 *         for i,bonded_instance in enumerate(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_18BondedInteractions_10__getstate__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10espressomd_12interactions_18BondedInteractions_9__getstate__[] = "BondedInteractions.__getstate__(self)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_18BondedInteractions_10__getstate__ = {"__getstate__", (PyCFunction)__pyx_pw_10espressomd_12interactions_18BondedInteractions_10__getstate__, METH_O, __pyx_doc_10espressomd_12interactions_18BondedInteractions_9__getstate__};
static PyObject *__pyx_pw_10espressomd_12interactions_18BondedInteractions_10__getstate__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getstate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_12interactions_18BondedInteractions_9__getstate__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_18BondedInteractions_9__getstate__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_params = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_bonded_instance = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__getstate__", 0);

  /* "espressomd/interactions.pyx":1418
 * 
 *     def __getstate__(self):
 *         params = {}             # <<<<<<<<<<<<<<
 *         for i,bonded_instance in enumerate(self):
 *             if hasattr(bonded_instance, 'params'):
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_params = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":1419
 *     def __getstate__(self):
 *         params = {}
 *         for i,bonded_instance in enumerate(self):             # <<<<<<<<<<<<<<
 *             if hasattr(bonded_instance, 'params'):
 *                 params[i] = bonded_instance.params
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_1 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_self)) || PyTuple_CheckExact(__pyx_v_self)) {
    __pyx_t_2 = __pyx_v_self; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_self); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1419, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1419, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1419, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1419, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1419, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1419, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1419, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_bonded_instance, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1419, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "espressomd/interactions.pyx":1420
 *         params = {}
 *         for i,bonded_instance in enumerate(self):
 *             if hasattr(bonded_instance, 'params'):             # <<<<<<<<<<<<<<
 *                 params[i] = bonded_instance.params
 *                 params[i]['bond_type'] = bonded_instance.type_number()
 */
    __pyx_t_6 = PyObject_HasAttr(__pyx_v_bonded_instance, __pyx_n_s_params_2); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 1420, __pyx_L1_error)
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {

      /* "espressomd/interactions.pyx":1421
 *         for i,bonded_instance in enumerate(self):
 *             if hasattr(bonded_instance, 'params'):
 *                 params[i] = bonded_instance.params             # <<<<<<<<<<<<<<
 *                 params[i]['bond_type'] = bonded_instance.type_number()
 *             else:
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_bonded_instance, __pyx_n_s_params_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1421, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(PyDict_SetItem(__pyx_v_params, __pyx_v_i, __pyx_t_5) < 0)) __PYX_ERR(0, 1421, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "espressomd/interactions.pyx":1422
 *             if hasattr(bonded_instance, 'params'):
 *                 params[i] = bonded_instance.params
 *                 params[i]['bond_type'] = bonded_instance.type_number()             # <<<<<<<<<<<<<<
 *             else:
 *                 params[i] = None
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_bonded_instance, __pyx_n_s_type_number); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1422, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      if (__pyx_t_9) {
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1422, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1422, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyDict_GetItem(__pyx_v_params, __pyx_v_i); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1422, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (unlikely(PyObject_SetItem(__pyx_t_8, __pyx_n_s_bond_type, __pyx_t_5) < 0)) __PYX_ERR(0, 1422, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "espressomd/interactions.pyx":1420
 *         params = {}
 *         for i,bonded_instance in enumerate(self):
 *             if hasattr(bonded_instance, 'params'):             # <<<<<<<<<<<<<<
 *                 params[i] = bonded_instance.params
 *                 params[i]['bond_type'] = bonded_instance.type_number()
 */
      goto __pyx_L5;
    }

    /* "espressomd/interactions.pyx":1424
 *                 params[i]['bond_type'] = bonded_instance.type_number()
 *             else:
 *                 params[i] = None             # <<<<<<<<<<<<<<
 *         return params
 * 
 */
    /*else*/ {
      if (unlikely(PyDict_SetItem(__pyx_v_params, __pyx_v_i, Py_None) < 0)) __PYX_ERR(0, 1424, __pyx_L1_error)
    }
    __pyx_L5:;

    /* "espressomd/interactions.pyx":1419
 *     def __getstate__(self):
 *         params = {}
 *         for i,bonded_instance in enumerate(self):             # <<<<<<<<<<<<<<
 *             if hasattr(bonded_instance, 'params'):
 *                 params[i] = bonded_instance.params
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":1425
 *             else:
 *                 params[i] = None
 *         return params             # <<<<<<<<<<<<<<
 * 
 *     def __setstate__(self, params):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_params);
  __pyx_r = __pyx_v_params;
  goto __pyx_L0;

  /* "espressomd/interactions.pyx":1417
 *         self[n_bonded_ia] = bonded_ia
 * 
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         params = {}
 *         for i,bonded_instance in enumerate(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("espressomd.interactions.BondedInteractions.__getstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_params);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_bonded_instance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/interactions.pyx":1427
 *         return params
 * 
 *     def __setstate__(self, params):             # <<<<<<<<<<<<<<
 *         for i in params:
 *             if params[i] != None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_12interactions_18BondedInteractions_12__setstate__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10espressomd_12interactions_18BondedInteractions_11__setstate__[] = "BondedInteractions.__setstate__(self, params)";
static PyMethodDef __pyx_mdef_10espressomd_12interactions_18BondedInteractions_12__setstate__ = {"__setstate__", (PyCFunction)__pyx_pw_10espressomd_12interactions_18BondedInteractions_12__setstate__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10espressomd_12interactions_18BondedInteractions_11__setstate__};
static PyObject *__pyx_pw_10espressomd_12interactions_18BondedInteractions_12__setstate__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_params = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_params_2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_params_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__setstate__", 1, 2, 2, 1); __PYX_ERR(0, 1427, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__setstate__") < 0)) __PYX_ERR(0, 1427, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_params = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1427, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("espressomd.interactions.BondedInteractions.__setstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10espressomd_12interactions_18BondedInteractions_11__setstate__(__pyx_self, __pyx_v_self, __pyx_v_params);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_12interactions_18BondedInteractions_11__setstate__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_params) {
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_bond_type = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__setstate__", 0);

  /* "espressomd/interactions.pyx":1428
 * 
 *     def __setstate__(self, params):
 *         for i in params:             # <<<<<<<<<<<<<<
 *             if params[i] != None:
 *                 bond_type = params[i]['bond_type']
 */
  if (likely(PyList_CheckExact(__pyx_v_params)) || PyTuple_CheckExact(__pyx_v_params)) {
    __pyx_t_1 = __pyx_v_params; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_params); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1428, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1428, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1428, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1428, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1428, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1428, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1428, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "espressomd/interactions.pyx":1429
 *     def __setstate__(self, params):
 *         for i in params:
 *             if params[i] != None:             # <<<<<<<<<<<<<<
 *                 bond_type = params[i]['bond_type']
 *                 del params[i]['bond_type']
 */
    __pyx_t_4 = PyObject_GetItem(__pyx_v_params, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1429, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1429, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {

      /* "espressomd/interactions.pyx":1430
 *         for i in params:
 *             if params[i] != None:
 *                 bond_type = params[i]['bond_type']             # <<<<<<<<<<<<<<
 *                 del params[i]['bond_type']
 *                 self[i] = bonded_interaction_classes[bond_type](**params[i])
 */
      __pyx_t_5 = PyObject_GetItem(__pyx_v_params, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1430, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyObject_GetItem(__pyx_t_5, __pyx_n_s_bond_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1430, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_v_bond_type, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "espressomd/interactions.pyx":1431
 *             if params[i] != None:
 *                 bond_type = params[i]['bond_type']
 *                 del params[i]['bond_type']             # <<<<<<<<<<<<<<
 *                 self[i] = bonded_interaction_classes[bond_type](**params[i])
 */
      __pyx_t_4 = PyObject_GetItem(__pyx_v_params, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1431, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(PyObject_DelItem(__pyx_t_4, __pyx_n_s_bond_type) < 0)) __PYX_ERR(0, 1431, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "espressomd/interactions.pyx":1432
 *                 bond_type = params[i]['bond_type']
 *                 del params[i]['bond_type']
 *                 self[i] = bonded_interaction_classes[bond_type](**params[i])             # <<<<<<<<<<<<<<
 */
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_bonded_interaction_classes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1432, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyObject_GetItem(__pyx_t_4, __pyx_v_bond_type); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1432, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_7 = PyObject_GetItem(__pyx_v_params, __pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1432, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (unlikely(__pyx_t_7 == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
        __PYX_ERR(0, 1432, __pyx_L1_error)
      }
      if (likely(PyDict_CheckExact(__pyx_t_7))) {
        __pyx_t_4 = PyDict_Copy(__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1432, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else {
        __pyx_t_4 = PyObject_CallFunctionObjArgs((PyObject*)&PyDict_Type, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1432, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1432, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(PyObject_SetItem(__pyx_v_self, __pyx_v_i, __pyx_t_7) < 0)) __PYX_ERR(0, 1432, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "espressomd/interactions.pyx":1429
 *     def __setstate__(self, params):
 *         for i in params:
 *             if params[i] != None:             # <<<<<<<<<<<<<<
 *                 bond_type = params[i]['bond_type']
 *                 del params[i]['bond_type']
 */
    }

    /* "espressomd/interactions.pyx":1428
 * 
 *     def __setstate__(self, params):
 *         for i in params:             # <<<<<<<<<<<<<<
 *             if params[i] != None:
 *                 bond_type = params[i]['bond_type']
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/interactions.pyx":1427
 *         return params
 * 
 *     def __setstate__(self, params):             # <<<<<<<<<<<<<<
 *         for i in params:
 *             if params[i] != None:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("espressomd.interactions.BondedInteractions.__setstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_bond_type);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":203
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":206
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":207
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":209
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":212
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
    goto __pyx_L4;
  }

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":214
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  /*else*/ {
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L6_bool_binop_done;
  }

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":217
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (__pyx_t_1) {

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__66, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 218, __pyx_L1_error)

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":221
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (__pyx_t_1) {

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 222, __pyx_L1_error)

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":224
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":225
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_1) {

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":230
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":232
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L11;
  }

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":236
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L11:;

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":238
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":239
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":242
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":243
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":246
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":250
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
    goto __pyx_L14;
  }

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":253
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
  /*else*/ {
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L14:;

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":256
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L20_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_L20_next_or:;

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L19_bool_binop_done:;

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_1) {

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__68, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 259, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 259, __pyx_L1_error)

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":260
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = ((char *)"b");
      break;

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = ((char *)"B");
      break;

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":262
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = ((char *)"h");
      break;

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = ((char *)"H");
      break;

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":264
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = ((char *)"i");
      break;

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = ((char *)"I");
      break;

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = ((char *)"l");
      break;

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = ((char *)"L");
      break;

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = ((char *)"q");
      break;

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = ((char *)"Q");
      break;

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = ((char *)"f");
      break;

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = ((char *)"d");
      break;

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = ((char *)"g");
      break;

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = ((char *)"Zf");
      break;

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = ((char *)"Zd");
      break;

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":275
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = ((char *)"Zg");
      break;

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = ((char *)"O");
      break;
      default:

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(1, 278, __pyx_L1_error)
      break;
    }

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":279
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)malloc(0xFF));

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":285
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) __PYX_ERR(1, 285, __pyx_L1_error)
    __pyx_v_f = __pyx_t_7;

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":294
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":771
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":774
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":777
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":780
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":783
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":790
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":791
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 794, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 794, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 795, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(1, 795, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 796, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 796, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 796, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 796, __pyx_L1_error)
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(1, 796, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 799, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 799, __pyx_L1_error)

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_6) {

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__70, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 803, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 803, __pyx_L1_error)

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 813, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 813, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 821, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__71, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 823, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(1, 823, __pyx_L1_error)

        /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 826, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 826, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 827, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 827, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 827, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 829, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 829, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 829, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 830, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 830, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 830, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 831, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 831, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 831, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 832, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 832, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 833, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 833, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 833, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 834, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 834, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 834, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 835, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 835, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 835, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 836, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 836, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 836, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 837, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 839, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 840, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 841, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(1, 844, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) __PYX_ERR(1, 849, __pyx_L1_error)
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":969
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
    goto __pyx_L3;
  }

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":971
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
  /*else*/ {
    Py_INCREF(__pyx_v_base);

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":972
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":973
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":974
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":978
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  }

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":980
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":985
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":987
 * cdef inline int import_array() except -1:
 *     try:
 *         _import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 987, __pyx_L3_error)

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":988
 *     try:
 *         _import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 988, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":989
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__72, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 989, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 989, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L10_try_end:;
  }

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":985
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":991
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":993
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 993, __pyx_L3_error)

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":994
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 994, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":995
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__73, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 995, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 995, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L10_try_end:;
  }

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":991
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":997
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":999
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 999, __pyx_L3_error)

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1000
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 1000, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1001
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__74, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1001, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 1001, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L10_try_end:;
  }

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":997
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_10espressomd_12interactions_NonBondedInteraction(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *)o);
  p->_part_types = Py_None; Py_INCREF(Py_None);
  p->_params = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_10espressomd_12interactions_NonBondedInteraction(PyObject *o) {
  struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *p = (struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_part_types);
  Py_CLEAR(p->_params);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_10espressomd_12interactions_NonBondedInteraction(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *p = (struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *)o;
  if (p->_part_types) {
    e = (*v)(p->_part_types, a); if (e) return e;
  }
  if (p->_params) {
    e = (*v)(p->_params, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10espressomd_12interactions_NonBondedInteraction(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *p = (struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *)o;
  tmp = ((PyObject*)p->_part_types);
  p->_part_types = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_params);
  p->_params = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_tp_getattro_10espressomd_12interactions_NonBondedInteraction(PyObject *o, PyObject *n) {
  PyObject *v = __pyx_pw_10espressomd_12interactions_20NonBondedInteraction_13__getattribute__(o, n);
  return v;
}

static PyObject *__pyx_getprop_10espressomd_12interactions_20NonBondedInteraction__part_types(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_12interactions_20NonBondedInteraction_11_part_types_1__get__(o);
}

static int __pyx_setprop_10espressomd_12interactions_20NonBondedInteraction__part_types(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10espressomd_12interactions_20NonBondedInteraction_11_part_types_3__set__(o, v);
  }
  else {
    return __pyx_pw_10espressomd_12interactions_20NonBondedInteraction_11_part_types_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_10espressomd_12interactions_NonBondedInteraction[] = {
  {"is_valid", (PyCFunction)__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_3is_valid, METH_NOARGS, __pyx_doc_10espressomd_12interactions_20NonBondedInteraction_2is_valid},
  {"get_params", (PyCFunction)__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_5get_params, METH_NOARGS, __pyx_doc_10espressomd_12interactions_20NonBondedInteraction_4get_params},
  {"set_params", (PyCFunction)__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_9set_params, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10espressomd_12interactions_20NonBondedInteraction_8set_params},
  {"validate_params", (PyCFunction)__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_11validate_params, METH_NOARGS, __pyx_doc_10espressomd_12interactions_20NonBondedInteraction_10validate_params},
  {"_get_params_from_es_core", (PyCFunction)__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_15_get_params_from_es_core, METH_NOARGS, __pyx_doc_10espressomd_12interactions_20NonBondedInteraction_14_get_params_from_es_core},
  {"_set_params_in_es_core", (PyCFunction)__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_17_set_params_in_es_core, METH_NOARGS, __pyx_doc_10espressomd_12interactions_20NonBondedInteraction_16_set_params_in_es_core},
  {"default_params", (PyCFunction)__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_19default_params, METH_NOARGS, __pyx_doc_10espressomd_12interactions_20NonBondedInteraction_18default_params},
  {"is_active", (PyCFunction)__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_21is_active, METH_NOARGS, __pyx_doc_10espressomd_12interactions_20NonBondedInteraction_20is_active},
  {"type_name", (PyCFunction)__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_23type_name, METH_NOARGS, __pyx_doc_10espressomd_12interactions_20NonBondedInteraction_22type_name},
  {"valid_keys", (PyCFunction)__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_25valid_keys, METH_NOARGS, __pyx_doc_10espressomd_12interactions_20NonBondedInteraction_24valid_keys},
  {"required_keys", (PyCFunction)__pyx_pw_10espressomd_12interactions_20NonBondedInteraction_27required_keys, METH_NOARGS, __pyx_doc_10espressomd_12interactions_20NonBondedInteraction_26required_keys},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_10espressomd_12interactions_NonBondedInteraction[] = {
  {(char *)"_part_types", __pyx_getprop_10espressomd_12interactions_20NonBondedInteraction__part_types, __pyx_setprop_10espressomd_12interactions_20NonBondedInteraction__part_types, (char *)"_part_types: object", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10espressomd_12interactions_NonBondedInteraction = {
  PyVarObject_HEAD_INIT(0, 0)
  "espressomd.interactions.NonBondedInteraction", /*tp_name*/
  sizeof(struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10espressomd_12interactions_NonBondedInteraction, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_10espressomd_12interactions_20NonBondedInteraction_7__str__, /*tp_str*/
  __pyx_tp_getattro_10espressomd_12interactions_NonBondedInteraction, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "NonBondedInteraction(*args, **kwargs)", /*tp_doc*/
  __pyx_tp_traverse_10espressomd_12interactions_NonBondedInteraction, /*tp_traverse*/
  __pyx_tp_clear_10espressomd_12interactions_NonBondedInteraction, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10espressomd_12interactions_NonBondedInteraction, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_10espressomd_12interactions_NonBondedInteraction, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10espressomd_12interactions_20NonBondedInteraction_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10espressomd_12interactions_NonBondedInteraction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_10espressomd_12interactions_LennardJonesInteraction(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_10espressomd_12interactions_NonBondedInteraction(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_10espressomd_12interactions_LennardJonesInteraction[] = {
  {"validate_params", (PyCFunction)__pyx_pw_10espressomd_12interactions_23LennardJonesInteraction_1validate_params, METH_NOARGS, __pyx_doc_10espressomd_12interactions_23LennardJonesInteraction_validate_params},
  {"_get_params_from_es_core", (PyCFunction)__pyx_pw_10espressomd_12interactions_23LennardJonesInteraction_3_get_params_from_es_core, METH_NOARGS, __pyx_doc_10espressomd_12interactions_23LennardJonesInteraction_2_get_params_from_es_core},
  {"is_active", (PyCFunction)__pyx_pw_10espressomd_12interactions_23LennardJonesInteraction_5is_active, METH_NOARGS, __pyx_doc_10espressomd_12interactions_23LennardJonesInteraction_4is_active},
  {"set_params", (PyCFunction)__pyx_pw_10espressomd_12interactions_23LennardJonesInteraction_7set_params, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10espressomd_12interactions_23LennardJonesInteraction_6set_params},
  {"_set_params_in_es_core", (PyCFunction)__pyx_pw_10espressomd_12interactions_23LennardJonesInteraction_9_set_params_in_es_core, METH_NOARGS, __pyx_doc_10espressomd_12interactions_23LennardJonesInteraction_8_set_params_in_es_core},
  {"default_params", (PyCFunction)__pyx_pw_10espressomd_12interactions_23LennardJonesInteraction_11default_params, METH_NOARGS, __pyx_doc_10espressomd_12interactions_23LennardJonesInteraction_10default_params},
  {"type_name", (PyCFunction)__pyx_pw_10espressomd_12interactions_23LennardJonesInteraction_13type_name, METH_NOARGS, __pyx_doc_10espressomd_12interactions_23LennardJonesInteraction_12type_name},
  {"valid_keys", (PyCFunction)__pyx_pw_10espressomd_12interactions_23LennardJonesInteraction_15valid_keys, METH_NOARGS, __pyx_doc_10espressomd_12interactions_23LennardJonesInteraction_14valid_keys},
  {"required_keys", (PyCFunction)__pyx_pw_10espressomd_12interactions_23LennardJonesInteraction_17required_keys, METH_NOARGS, __pyx_doc_10espressomd_12interactions_23LennardJonesInteraction_16required_keys},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10espressomd_12interactions_LennardJonesInteraction = {
  PyVarObject_HEAD_INIT(0, 0)
  "espressomd.interactions.LennardJonesInteraction", /*tp_name*/
  sizeof(struct __pyx_obj_10espressomd_12interactions_LennardJonesInteraction), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10espressomd_12interactions_NonBondedInteraction, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10espressomd_12interactions_20NonBondedInteraction_7__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10espressomd_12interactions_NonBondedInteraction, /*tp_traverse*/
  __pyx_tp_clear_10espressomd_12interactions_NonBondedInteraction, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10espressomd_12interactions_LennardJonesInteraction, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10espressomd_12interactions_20NonBondedInteraction_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_10espressomd_12interactions_LennardJonesInteraction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_10espressomd_12interactions_NonBondedInteractions(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_10espressomd_12interactions_NonBondedInteractions(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_10espressomd_12interactions_NonBondedInteractions(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_10espressomd_12interactions_NonBondedInteractions[] = {
  {"set_force_cap", (PyCFunction)__pyx_pw_10espressomd_12interactions_21NonBondedInteractions_3set_force_cap, METH_O, __pyx_doc_10espressomd_12interactions_21NonBondedInteractions_2set_force_cap},
  {"get_force_cap", (PyCFunction)__pyx_pw_10espressomd_12interactions_21NonBondedInteractions_5get_force_cap, METH_NOARGS, __pyx_doc_10espressomd_12interactions_21NonBondedInteractions_4get_force_cap},
  {"__getstate__", (PyCFunction)__pyx_pw_10espressomd_12interactions_21NonBondedInteractions_7__getstate__, METH_NOARGS, __pyx_doc_10espressomd_12interactions_21NonBondedInteractions_6__getstate__},
  {"__setstate__", (PyCFunction)__pyx_pw_10espressomd_12interactions_21NonBondedInteractions_9__setstate__, METH_O, __pyx_doc_10espressomd_12interactions_21NonBondedInteractions_8__setstate__},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_NonBondedInteractions = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_10espressomd_12interactions_NonBondedInteractions, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_NonBondedInteractions = {
  0, /*mp_length*/
  __pyx_pw_10espressomd_12interactions_21NonBondedInteractions_1__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_10espressomd_12interactions_NonBondedInteractions = {
  PyVarObject_HEAD_INIT(0, 0)
  "espressomd.interactions.NonBondedInteractions", /*tp_name*/
  sizeof(struct __pyx_obj_10espressomd_12interactions_NonBondedInteractions), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10espressomd_12interactions_NonBondedInteractions, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_NonBondedInteractions, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_NonBondedInteractions, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Access to non-bonded interaction parameters via [i,j], where i,j are particle \n    types. Returns NonBondedInteractionHandle.\n    Also: access to force capping\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10espressomd_12interactions_NonBondedInteractions, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10espressomd_12interactions_NonBondedInteractions, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_10espressomd_12interactions_BondedInteraction(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_10espressomd_12interactions_BondedInteraction(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_tp_getattro_10espressomd_12interactions_BondedInteraction(PyObject *o, PyObject *n) {
  PyObject *v = __pyx_pw_10espressomd_12interactions_17BondedInteraction_7__getattribute__(o, n);
  return v;
}

static PyObject *__pyx_getprop_10espressomd_12interactions_17BondedInteraction_params(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_12interactions_17BondedInteraction_6params_1__get__(o);
}

static int __pyx_setprop_10espressomd_12interactions_17BondedInteraction_params(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10espressomd_12interactions_17BondedInteraction_6params_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_10espressomd_12interactions_BondedInteraction[] = {
  {"is_valid", (PyCFunction)__pyx_pw_10espressomd_12interactions_17BondedInteraction_3is_valid, METH_NOARGS, __pyx_doc_10espressomd_12interactions_17BondedInteraction_2is_valid},
  {"validate_params", (PyCFunction)__pyx_pw_10espressomd_12interactions_17BondedInteraction_5validate_params, METH_NOARGS, __pyx_doc_10espressomd_12interactions_17BondedInteraction_4validate_params},
  {"_get_params_from_es_core", (PyCFunction)__pyx_pw_10espressomd_12interactions_17BondedInteraction_9_get_params_from_es_core, METH_NOARGS, __pyx_doc_10espressomd_12interactions_17BondedInteraction_8_get_params_from_es_core},
  {"_set_params_in_es_core", (PyCFunction)__pyx_pw_10espressomd_12interactions_17BondedInteraction_11_set_params_in_es_core, METH_NOARGS, __pyx_doc_10espressomd_12interactions_17BondedInteraction_10_set_params_in_es_core},
  {"set_default_params", (PyCFunction)__pyx_pw_10espressomd_12interactions_17BondedInteraction_15set_default_params, METH_NOARGS, __pyx_doc_10espressomd_12interactions_17BondedInteraction_14set_default_params},
  {"type_number", (PyCFunction)__pyx_pw_10espressomd_12interactions_17BondedInteraction_17type_number, METH_NOARGS, __pyx_doc_10espressomd_12interactions_17BondedInteraction_16type_number},
  {"type_name", (PyCFunction)__pyx_pw_10espressomd_12interactions_17BondedInteraction_19type_name, METH_NOARGS, __pyx_doc_10espressomd_12interactions_17BondedInteraction_18type_name},
  {"valid_keys", (PyCFunction)__pyx_pw_10espressomd_12interactions_17BondedInteraction_21valid_keys, METH_NOARGS, __pyx_doc_10espressomd_12interactions_17BondedInteraction_20valid_keys},
  {"required_keys", (PyCFunction)__pyx_pw_10espressomd_12interactions_17BondedInteraction_23required_keys, METH_NOARGS, __pyx_doc_10espressomd_12interactions_17BondedInteraction_22required_keys},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_10espressomd_12interactions_BondedInteraction[] = {
  {(char *)"params", __pyx_getprop_10espressomd_12interactions_17BondedInteraction_params, __pyx_setprop_10espressomd_12interactions_17BondedInteraction_params, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10espressomd_12interactions_BondedInteraction = {
  PyVarObject_HEAD_INIT(0, 0)
  "espressomd.interactions.BondedInteraction", /*tp_name*/
  sizeof(struct __pyx_obj_10espressomd_12interactions_BondedInteraction), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10espressomd_12interactions_BondedInteraction, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_10espressomd_12interactions_17BondedInteraction_25__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_10espressomd_12interactions_17BondedInteraction_13__str__, /*tp_str*/
  __pyx_tp_getattro_10espressomd_12interactions_BondedInteraction, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "BondedInteraction(*args, **kwargs)", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_10espressomd_12interactions_17BondedInteraction_27__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10espressomd_12interactions_BondedInteraction, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_10espressomd_12interactions_BondedInteraction, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10espressomd_12interactions_17BondedInteraction_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10espressomd_12interactions_BondedInteraction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct____getattribute__ *__pyx_freelist_10espressomd_12interactions___pyx_scope_struct____getattribute__[8];
static int __pyx_freecount_10espressomd_12interactions___pyx_scope_struct____getattribute__ = 0;

static PyObject *__pyx_tp_new_10espressomd_12interactions___pyx_scope_struct____getattribute__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10espressomd_12interactions___pyx_scope_struct____getattribute__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct____getattribute__)))) {
    o = (PyObject*)__pyx_freelist_10espressomd_12interactions___pyx_scope_struct____getattribute__[--__pyx_freecount_10espressomd_12interactions___pyx_scope_struct____getattribute__];
    memset(o, 0, sizeof(struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct____getattribute__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10espressomd_12interactions___pyx_scope_struct____getattribute__(PyObject *o) {
  struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct____getattribute__ *p = (struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct____getattribute__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_attr);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10espressomd_12interactions___pyx_scope_struct____getattribute__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct____getattribute__)))) {
    __pyx_freelist_10espressomd_12interactions___pyx_scope_struct____getattribute__[__pyx_freecount_10espressomd_12interactions___pyx_scope_struct____getattribute__++] = ((struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct____getattribute__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10espressomd_12interactions___pyx_scope_struct____getattribute__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct____getattribute__ *p = (struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct____getattribute__ *)o;
  if (p->__pyx_v_attr) {
    e = (*v)(p->__pyx_v_attr, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10espressomd_12interactions___pyx_scope_struct____getattribute__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct____getattribute__ *p = (struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct____getattribute__ *)o;
  tmp = ((PyObject*)p->__pyx_v_attr);
  p->__pyx_v_attr = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_10espressomd_12interactions_NonBondedInteraction *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_10espressomd_12interactions___pyx_scope_struct____getattribute__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "espressomd.interactions.__pyx_scope_struct____getattribute__", /*tp_name*/
  sizeof(struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct____getattribute__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10espressomd_12interactions___pyx_scope_struct____getattribute__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10espressomd_12interactions___pyx_scope_struct____getattribute__, /*tp_traverse*/
  __pyx_tp_clear_10espressomd_12interactions___pyx_scope_struct____getattribute__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10espressomd_12interactions___pyx_scope_struct____getattribute__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_1___getattribute__ *__pyx_freelist_10espressomd_12interactions___pyx_scope_struct_1___getattribute__[8];
static int __pyx_freecount_10espressomd_12interactions___pyx_scope_struct_1___getattribute__ = 0;

static PyObject *__pyx_tp_new_10espressomd_12interactions___pyx_scope_struct_1___getattribute__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10espressomd_12interactions___pyx_scope_struct_1___getattribute__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_1___getattribute__)))) {
    o = (PyObject*)__pyx_freelist_10espressomd_12interactions___pyx_scope_struct_1___getattribute__[--__pyx_freecount_10espressomd_12interactions___pyx_scope_struct_1___getattribute__];
    memset(o, 0, sizeof(struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_1___getattribute__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10espressomd_12interactions___pyx_scope_struct_1___getattribute__(PyObject *o) {
  struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_1___getattribute__ *p = (struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_1___getattribute__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_attr);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10espressomd_12interactions___pyx_scope_struct_1___getattribute__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_1___getattribute__)))) {
    __pyx_freelist_10espressomd_12interactions___pyx_scope_struct_1___getattribute__[__pyx_freecount_10espressomd_12interactions___pyx_scope_struct_1___getattribute__++] = ((struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_1___getattribute__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10espressomd_12interactions___pyx_scope_struct_1___getattribute__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_1___getattribute__ *p = (struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_1___getattribute__ *)o;
  if (p->__pyx_v_attr) {
    e = (*v)(p->__pyx_v_attr, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10espressomd_12interactions___pyx_scope_struct_1___getattribute__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_1___getattribute__ *p = (struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_1___getattribute__ *)o;
  tmp = ((PyObject*)p->__pyx_v_attr);
  p->__pyx_v_attr = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_10espressomd_12interactions_BondedInteraction *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_10espressomd_12interactions___pyx_scope_struct_1___getattribute__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "espressomd.interactions.__pyx_scope_struct_1___getattribute__", /*tp_name*/
  sizeof(struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_1___getattribute__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10espressomd_12interactions___pyx_scope_struct_1___getattribute__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10espressomd_12interactions___pyx_scope_struct_1___getattribute__, /*tp_traverse*/
  __pyx_tp_clear_10espressomd_12interactions___pyx_scope_struct_1___getattribute__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10espressomd_12interactions___pyx_scope_struct_1___getattribute__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_2___iter__ *__pyx_freelist_10espressomd_12interactions___pyx_scope_struct_2___iter__[8];
static int __pyx_freecount_10espressomd_12interactions___pyx_scope_struct_2___iter__ = 0;

static PyObject *__pyx_tp_new_10espressomd_12interactions___pyx_scope_struct_2___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10espressomd_12interactions___pyx_scope_struct_2___iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_2___iter__)))) {
    o = (PyObject*)__pyx_freelist_10espressomd_12interactions___pyx_scope_struct_2___iter__[--__pyx_freecount_10espressomd_12interactions___pyx_scope_struct_2___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_2___iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10espressomd_12interactions___pyx_scope_struct_2___iter__(PyObject *o) {
  struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_2___iter__ *p = (struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_2___iter__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10espressomd_12interactions___pyx_scope_struct_2___iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_2___iter__)))) {
    __pyx_freelist_10espressomd_12interactions___pyx_scope_struct_2___iter__[__pyx_freecount_10espressomd_12interactions___pyx_scope_struct_2___iter__++] = ((struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_2___iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10espressomd_12interactions___pyx_scope_struct_2___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_2___iter__ *p = (struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_2___iter__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(p->__pyx_v_self, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10espressomd_12interactions___pyx_scope_struct_2___iter__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_2___iter__ *p = (struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_2___iter__ *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_10espressomd_12interactions___pyx_scope_struct_2___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "espressomd.interactions.__pyx_scope_struct_2___iter__", /*tp_name*/
  sizeof(struct __pyx_obj_10espressomd_12interactions___pyx_scope_struct_2___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10espressomd_12interactions___pyx_scope_struct_2___iter__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10espressomd_12interactions___pyx_scope_struct_2___iter__, /*tp_traverse*/
  __pyx_tp_clear_10espressomd_12interactions___pyx_scope_struct_2___iter__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10espressomd_12interactions___pyx_scope_struct_2___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "interactions",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_A01, __pyx_k_A01, sizeof(__pyx_k_A01), 0, 0, 1, 1},
  {&__pyx_n_s_A02, __pyx_k_A02, sizeof(__pyx_k_A02), 0, 0, 1, 1},
  {&__pyx_n_s_A0_g, __pyx_k_A0_g, sizeof(__pyx_k_A0_g), 0, 0, 1, 1},
  {&__pyx_n_s_Angle_Cosine, __pyx_k_Angle_Cosine, sizeof(__pyx_k_Angle_Cosine), 0, 0, 1, 1},
  {&__pyx_n_s_Angle_Cossquare, __pyx_k_Angle_Cossquare, sizeof(__pyx_k_Angle_Cossquare), 0, 0, 1, 1},
  {&__pyx_n_s_Angle_Harmonic, __pyx_k_Angle_Harmonic, sizeof(__pyx_k_Angle_Harmonic), 0, 0, 1, 1},
  {&__pyx_kp_s_At_least_the_following_keys_have, __pyx_k_At_least_the_following_keys_have, sizeof(__pyx_k_At_least_the_following_keys_have), 0, 0, 1, 0},
  {&__pyx_n_s_BOND_ANGLE, __pyx_k_BOND_ANGLE, sizeof(__pyx_k_BOND_ANGLE), 0, 0, 1, 1},
  {&__pyx_n_s_BOND_ENDANGLEDIST, __pyx_k_BOND_ENDANGLEDIST, sizeof(__pyx_k_BOND_ENDANGLEDIST), 0, 0, 1, 1},
  {&__pyx_n_s_BOND_VIRTUAL, __pyx_k_BOND_VIRTUAL, sizeof(__pyx_k_BOND_VIRTUAL), 0, 0, 1, 1},
  {&__pyx_n_s_BondedInteractionNotDefined, __pyx_k_BondedInteractionNotDefined, sizeof(__pyx_k_BondedInteractionNotDefined), 0, 0, 1, 1},
  {&__pyx_n_s_BondedInteractionNotDefined___in, __pyx_k_BondedInteractionNotDefined___in, sizeof(__pyx_k_BondedInteractionNotDefined___in), 0, 0, 1, 1},
  {&__pyx_n_s_BondedInteractionNotDefined__get, __pyx_k_BondedInteractionNotDefined__get, sizeof(__pyx_k_BondedInteractionNotDefined__get), 0, 0, 1, 1},
  {&__pyx_n_s_BondedInteractionNotDefined__set, __pyx_k_BondedInteractionNotDefined__set, sizeof(__pyx_k_BondedInteractionNotDefined__set), 0, 0, 1, 1},
  {&__pyx_n_s_BondedInteractionNotDefined_requ, __pyx_k_BondedInteractionNotDefined_requ, sizeof(__pyx_k_BondedInteractionNotDefined_requ), 0, 0, 1, 1},
  {&__pyx_n_s_BondedInteractionNotDefined_set, __pyx_k_BondedInteractionNotDefined_set, sizeof(__pyx_k_BondedInteractionNotDefined_set), 0, 0, 1, 1},
  {&__pyx_n_s_BondedInteractionNotDefined_type, __pyx_k_BondedInteractionNotDefined_type, sizeof(__pyx_k_BondedInteractionNotDefined_type), 0, 0, 1, 1},
  {&__pyx_n_s_BondedInteractionNotDefined_type_2, __pyx_k_BondedInteractionNotDefined_type_2, sizeof(__pyx_k_BondedInteractionNotDefined_type_2), 0, 0, 1, 1},
  {&__pyx_n_s_BondedInteractionNotDefined_vali, __pyx_k_BondedInteractionNotDefined_vali, sizeof(__pyx_k_BondedInteractionNotDefined_vali), 0, 0, 1, 1},
  {&__pyx_n_s_BondedInteractions, __pyx_k_BondedInteractions, sizeof(__pyx_k_BondedInteractions), 0, 0, 1, 1},
  {&__pyx_n_s_BondedInteractions___getitem, __pyx_k_BondedInteractions___getitem, sizeof(__pyx_k_BondedInteractions___getitem), 0, 0, 1, 1},
  {&__pyx_n_s_BondedInteractions___getstate, __pyx_k_BondedInteractions___getstate, sizeof(__pyx_k_BondedInteractions___getstate), 0, 0, 1, 1},
  {&__pyx_n_s_BondedInteractions___iter, __pyx_k_BondedInteractions___iter, sizeof(__pyx_k_BondedInteractions___iter), 0, 0, 1, 1},
  {&__pyx_n_s_BondedInteractions___setitem, __pyx_k_BondedInteractions___setitem, sizeof(__pyx_k_BondedInteractions___setitem), 0, 0, 1, 1},
  {&__pyx_n_s_BondedInteractions___setstate, __pyx_k_BondedInteractions___setstate, sizeof(__pyx_k_BondedInteractions___setstate), 0, 0, 1, 1},
  {&__pyx_n_s_BondedInteractions_add, __pyx_k_BondedInteractions_add, sizeof(__pyx_k_BondedInteractions_add), 0, 0, 1, 1},
  {&__pyx_kp_s_Could_not_set_Lennard_Jones_para, __pyx_k_Could_not_set_Lennard_Jones_para, sizeof(__pyx_k_Could_not_set_Lennard_Jones_para), 0, 0, 1, 0},
  {&__pyx_kp_s_Could_not_set_forcecap, __pyx_k_Could_not_set_forcecap, sizeof(__pyx_k_Could_not_set_forcecap), 0, 0, 1, 0},
  {&__pyx_n_s_DIHEDRAL, __pyx_k_DIHEDRAL, sizeof(__pyx_k_DIHEDRAL), 0, 0, 1, 1},
  {&__pyx_n_s_Dihedral, __pyx_k_Dihedral, sizeof(__pyx_k_Dihedral), 0, 0, 1, 1},
  {&__pyx_n_s_Dihedral__get_params_from_es_cor, __pyx_k_Dihedral__get_params_from_es_cor, sizeof(__pyx_k_Dihedral__get_params_from_es_cor), 0, 0, 1, 1},
  {&__pyx_n_s_Dihedral__set_params_in_es_core, __pyx_k_Dihedral__set_params_in_es_core, sizeof(__pyx_k_Dihedral__set_params_in_es_core), 0, 0, 1, 1},
  {&__pyx_n_s_Dihedral_required_keys, __pyx_k_Dihedral_required_keys, sizeof(__pyx_k_Dihedral_required_keys), 0, 0, 1, 1},
  {&__pyx_n_s_Dihedral_set_default_params, __pyx_k_Dihedral_set_default_params, sizeof(__pyx_k_Dihedral_set_default_params), 0, 0, 1, 1},
  {&__pyx_n_s_Dihedral_type_name, __pyx_k_Dihedral_type_name, sizeof(__pyx_k_Dihedral_type_name), 0, 0, 1, 1},
  {&__pyx_n_s_Dihedral_type_number, __pyx_k_Dihedral_type_number, sizeof(__pyx_k_Dihedral_type_number), 0, 0, 1, 1},
  {&__pyx_n_s_Dihedral_valid_keys, __pyx_k_Dihedral_valid_keys, sizeof(__pyx_k_Dihedral_valid_keys), 0, 0, 1, 1},
  {&__pyx_n_s_Endangledist, __pyx_k_Endangledist, sizeof(__pyx_k_Endangledist), 0, 0, 1, 1},
  {&__pyx_n_s_FENE, __pyx_k_FENE, sizeof(__pyx_k_FENE), 0, 0, 1, 1},
  {&__pyx_n_s_FeneBond, __pyx_k_FeneBond, sizeof(__pyx_k_FeneBond), 0, 0, 1, 1},
  {&__pyx_n_s_FeneBond___init, __pyx_k_FeneBond___init, sizeof(__pyx_k_FeneBond___init), 0, 0, 1, 1},
  {&__pyx_n_s_FeneBond__get_params_from_es_cor, __pyx_k_FeneBond__get_params_from_es_cor, sizeof(__pyx_k_FeneBond__get_params_from_es_cor), 0, 0, 1, 1},
  {&__pyx_n_s_FeneBond__set_params_in_es_core, __pyx_k_FeneBond__set_params_in_es_core, sizeof(__pyx_k_FeneBond__set_params_in_es_core), 0, 0, 1, 1},
  {&__pyx_n_s_FeneBond_required_keys, __pyx_k_FeneBond_required_keys, sizeof(__pyx_k_FeneBond_required_keys), 0, 0, 1, 1},
  {&__pyx_n_s_FeneBond_set_default_params, __pyx_k_FeneBond_set_default_params, sizeof(__pyx_k_FeneBond_set_default_params), 0, 0, 1, 1},
  {&__pyx_n_s_FeneBond_type_name, __pyx_k_FeneBond_type_name, sizeof(__pyx_k_FeneBond_type_name), 0, 0, 1, 1},
  {&__pyx_n_s_FeneBond_type_number, __pyx_k_FeneBond_type_number, sizeof(__pyx_k_FeneBond_type_number), 0, 0, 1, 1},
  {&__pyx_n_s_FeneBond_valid_keys, __pyx_k_FeneBond_valid_keys, sizeof(__pyx_k_FeneBond_valid_keys), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_HARMONIC, __pyx_k_HARMONIC, sizeof(__pyx_k_HARMONIC), 0, 0, 1, 1},
  {&__pyx_n_s_HarmonicBond, __pyx_k_HarmonicBond, sizeof(__pyx_k_HarmonicBond), 0, 0, 1, 1},
  {&__pyx_n_s_HarmonicBond___init, __pyx_k_HarmonicBond___init, sizeof(__pyx_k_HarmonicBond___init), 0, 0, 1, 1},
  {&__pyx_n_s_HarmonicBond__get_params_from_es, __pyx_k_HarmonicBond__get_params_from_es, sizeof(__pyx_k_HarmonicBond__get_params_from_es), 0, 0, 1, 1},
  {&__pyx_n_s_HarmonicBond__set_params_in_es_c, __pyx_k_HarmonicBond__set_params_in_es_c, sizeof(__pyx_k_HarmonicBond__set_params_in_es_c), 0, 0, 1, 1},
  {&__pyx_n_s_HarmonicBond_required_keys, __pyx_k_HarmonicBond_required_keys, sizeof(__pyx_k_HarmonicBond_required_keys), 0, 0, 1, 1},
  {&__pyx_n_s_HarmonicBond_set_default_params, __pyx_k_HarmonicBond_set_default_params, sizeof(__pyx_k_HarmonicBond_set_default_params), 0, 0, 1, 1},
  {&__pyx_n_s_HarmonicBond_type_name, __pyx_k_HarmonicBond_type_name, sizeof(__pyx_k_HarmonicBond_type_name), 0, 0, 1, 1},
  {&__pyx_n_s_HarmonicBond_type_number, __pyx_k_HarmonicBond_type_number, sizeof(__pyx_k_HarmonicBond_type_number), 0, 0, 1, 1},
  {&__pyx_n_s_HarmonicBond_valid_keys, __pyx_k_HarmonicBond_valid_keys, sizeof(__pyx_k_HarmonicBond_valid_keys), 0, 0, 1, 1},
  {&__pyx_n_s_HarmonicDumbbellBond, __pyx_k_HarmonicDumbbellBond, sizeof(__pyx_k_HarmonicDumbbellBond), 0, 0, 1, 1},
  {&__pyx_kp_s_HarmonicDumbbellBond_ROTATION_ha, __pyx_k_HarmonicDumbbellBond_ROTATION_ha, sizeof(__pyx_k_HarmonicDumbbellBond_ROTATION_ha), 0, 0, 1, 0},
  {&__pyx_n_s_HarmonicDumbbellBond___init, __pyx_k_HarmonicDumbbellBond___init, sizeof(__pyx_k_HarmonicDumbbellBond___init), 0, 0, 1, 1},
  {&__pyx_n_s_HarmonicDumbbellBond__get_params, __pyx_k_HarmonicDumbbellBond__get_params, sizeof(__pyx_k_HarmonicDumbbellBond__get_params), 0, 0, 1, 1},
  {&__pyx_n_s_HarmonicDumbbellBond__set_params, __pyx_k_HarmonicDumbbellBond__set_params, sizeof(__pyx_k_HarmonicDumbbellBond__set_params), 0, 0, 1, 1},
  {&__pyx_n_s_HarmonicDumbbellBond_required_ke, __pyx_k_HarmonicDumbbellBond_required_ke, sizeof(__pyx_k_HarmonicDumbbellBond_required_ke), 0, 0, 1, 1},
  {&__pyx_n_s_HarmonicDumbbellBond_set_default, __pyx_k_HarmonicDumbbellBond_set_default, sizeof(__pyx_k_HarmonicDumbbellBond_set_default), 0, 0, 1, 1},
  {&__pyx_n_s_HarmonicDumbbellBond_type_name, __pyx_k_HarmonicDumbbellBond_type_name, sizeof(__pyx_k_HarmonicDumbbellBond_type_name), 0, 0, 1, 1},
  {&__pyx_n_s_HarmonicDumbbellBond_type_number, __pyx_k_HarmonicDumbbellBond_type_number, sizeof(__pyx_k_HarmonicDumbbellBond_type_number), 0, 0, 1, 1},
  {&__pyx_n_s_HarmonicDumbbellBond_valid_keys, __pyx_k_HarmonicDumbbellBond_valid_keys, sizeof(__pyx_k_HarmonicDumbbellBond_valid_keys), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_s_Index_to_BondedInteractions_has, __pyx_k_Index_to_BondedInteractions_has, sizeof(__pyx_k_Index_to_BondedInteractions_has), 0, 0, 1, 0},
  {&__pyx_kp_s_Index_to_BondedInteractions_hast, __pyx_k_Index_to_BondedInteractions_hast, sizeof(__pyx_k_Index_to_BondedInteractions_hast), 0, 0, 1, 0},
  {&__pyx_n_s_LennardJones, __pyx_k_LennardJones, sizeof(__pyx_k_LennardJones), 0, 0, 1, 1},
  {&__pyx_kp_s_Lennard_Jones_cutoff_has_to_be_0, __pyx_k_Lennard_Jones_cutoff_has_to_be_0, sizeof(__pyx_k_Lennard_Jones_cutoff_has_to_be_0), 0, 0, 1, 0},
  {&__pyx_kp_s_Lennard_Jones_eps_has_to_be_0, __pyx_k_Lennard_Jones_eps_has_to_be_0, sizeof(__pyx_k_Lennard_Jones_eps_has_to_be_0), 0, 0, 1, 0},
  {&__pyx_kp_s_Lennard_Jones_sigma_has_to_be_0, __pyx_k_Lennard_Jones_sigma_has_to_be_0, sizeof(__pyx_k_Lennard_Jones_sigma_has_to_be_0), 0, 0, 1, 0},
  {&__pyx_n_s_NonBondedInteractionHandle, __pyx_k_NonBondedInteractionHandle, sizeof(__pyx_k_NonBondedInteractionHandle), 0, 0, 1, 1},
  {&__pyx_n_s_NonBondedInteractionHandle___ini, __pyx_k_NonBondedInteractionHandle___ini, sizeof(__pyx_k_NonBondedInteractionHandle___ini), 0, 0, 1, 1},
  {&__pyx_kp_s_NonBondedInteractions_expects_tw, __pyx_k_NonBondedInteractions_expects_tw, sizeof(__pyx_k_NonBondedInteractions_expects_tw), 0, 0, 1, 0},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_OIF_GLOBAL_FORCES, __pyx_k_OIF_GLOBAL_FORCES, sizeof(__pyx_k_OIF_GLOBAL_FORCES), 0, 0, 1, 1},
  {&__pyx_n_s_OIF_LOCAL_FORCES, __pyx_k_OIF_LOCAL_FORCES, sizeof(__pyx_k_OIF_LOCAL_FORCES), 0, 0, 1, 1},
  {&__pyx_n_s_OVERLAPPED, __pyx_k_OVERLAPPED, sizeof(__pyx_k_OVERLAPPED), 0, 0, 1, 1},
  {&__pyx_n_s_Oif_Global_Forces, __pyx_k_Oif_Global_Forces, sizeof(__pyx_k_Oif_Global_Forces), 0, 0, 1, 1},
  {&__pyx_n_s_Oif_Global_Forces__get_params_fr, __pyx_k_Oif_Global_Forces__get_params_fr, sizeof(__pyx_k_Oif_Global_Forces__get_params_fr), 0, 0, 1, 1},
  {&__pyx_n_s_Oif_Global_Forces__set_params_in, __pyx_k_Oif_Global_Forces__set_params_in, sizeof(__pyx_k_Oif_Global_Forces__set_params_in), 0, 0, 1, 1},
  {&__pyx_n_s_Oif_Global_Forces_required_keys, __pyx_k_Oif_Global_Forces_required_keys, sizeof(__pyx_k_Oif_Global_Forces_required_keys), 0, 0, 1, 1},
  {&__pyx_n_s_Oif_Global_Forces_set_default_pa, __pyx_k_Oif_Global_Forces_set_default_pa, sizeof(__pyx_k_Oif_Global_Forces_set_default_pa), 0, 0, 1, 1},
  {&__pyx_n_s_Oif_Global_Forces_type_name, __pyx_k_Oif_Global_Forces_type_name, sizeof(__pyx_k_Oif_Global_Forces_type_name), 0, 0, 1, 1},
  {&__pyx_n_s_Oif_Global_Forces_type_number, __pyx_k_Oif_Global_Forces_type_number, sizeof(__pyx_k_Oif_Global_Forces_type_number), 0, 0, 1, 1},
  {&__pyx_n_s_Oif_Global_Forces_valid_keys, __pyx_k_Oif_Global_Forces_valid_keys, sizeof(__pyx_k_Oif_Global_Forces_valid_keys), 0, 0, 1, 1},
  {&__pyx_n_s_Oif_Local_Forces, __pyx_k_Oif_Local_Forces, sizeof(__pyx_k_Oif_Local_Forces), 0, 0, 1, 1},
  {&__pyx_n_s_Oif_Local_Forces__get_params_fro, __pyx_k_Oif_Local_Forces__get_params_fro, sizeof(__pyx_k_Oif_Local_Forces__get_params_fro), 0, 0, 1, 1},
  {&__pyx_n_s_Oif_Local_Forces__set_params_in, __pyx_k_Oif_Local_Forces__set_params_in, sizeof(__pyx_k_Oif_Local_Forces__set_params_in), 0, 0, 1, 1},
  {&__pyx_n_s_Oif_Local_Forces_required_keys, __pyx_k_Oif_Local_Forces_required_keys, sizeof(__pyx_k_Oif_Local_Forces_required_keys), 0, 0, 1, 1},
  {&__pyx_n_s_Oif_Local_Forces_set_default_par, __pyx_k_Oif_Local_Forces_set_default_par, sizeof(__pyx_k_Oif_Local_Forces_set_default_par), 0, 0, 1, 1},
  {&__pyx_n_s_Oif_Local_Forces_type_name, __pyx_k_Oif_Local_Forces_type_name, sizeof(__pyx_k_Oif_Local_Forces_type_name), 0, 0, 1, 1},
  {&__pyx_n_s_Oif_Local_Forces_type_number, __pyx_k_Oif_Local_Forces_type_number, sizeof(__pyx_k_Oif_Local_Forces_type_number), 0, 0, 1, 1},
  {&__pyx_n_s_Oif_Local_Forces_valid_keys, __pyx_k_Oif_Local_Forces_valid_keys, sizeof(__pyx_k_Oif_Local_Forces_valid_keys), 0, 0, 1, 1},
  {&__pyx_kp_s_Only_subclasses_of_BondedInterac, __pyx_k_Only_subclasses_of_BondedInterac, sizeof(__pyx_k_Only_subclasses_of_BondedInterac), 0, 0, 1, 0},
  {&__pyx_kp_s_Only_the_following_keys_are_supp, __pyx_k_Only_the_following_keys_are_supp, sizeof(__pyx_k_Only_the_following_keys_are_supp), 0, 0, 1, 0},
  {&__pyx_n_s_Overlapped, __pyx_k_Overlapped, sizeof(__pyx_k_Overlapped), 0, 0, 1, 1},
  {&__pyx_kp_s_Provides_access_to_all_Non_bonde, __pyx_k_Provides_access_to_all_Non_bonde, sizeof(__pyx_k_Provides_access_to_all_Non_bonde), 0, 0, 1, 0},
  {&__pyx_n_s_RIGID, __pyx_k_RIGID, sizeof(__pyx_k_RIGID), 0, 0, 1, 1},
  {&__pyx_kp_s_Represents_the_bonded_interactio, __pyx_k_Represents_the_bonded_interactio, sizeof(__pyx_k_Represents_the_bonded_interactio), 0, 0, 1, 0},
  {&__pyx_n_s_RigidBond, __pyx_k_RigidBond, sizeof(__pyx_k_RigidBond), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_SUBT_LJ, __pyx_k_SUBT_LJ, sizeof(__pyx_k_SUBT_LJ), 0, 0, 1, 1},
  {&__pyx_kp_s_Subclasses_of_BondedInteraction, __pyx_k_Subclasses_of_BondedInteraction, sizeof(__pyx_k_Subclasses_of_BondedInteraction), 0, 0, 1, 0},
  {&__pyx_kp_s_Subclasses_of_BondedInteraction_2, __pyx_k_Subclasses_of_BondedInteraction_2, sizeof(__pyx_k_Subclasses_of_BondedInteraction_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Subclasses_of_BondedInteraction_3, __pyx_k_Subclasses_of_BondedInteraction_3, sizeof(__pyx_k_Subclasses_of_BondedInteraction_3), 0, 0, 1, 0},
  {&__pyx_kp_s_Subclasses_of_BondedInteraction_4, __pyx_k_Subclasses_of_BondedInteraction_4, sizeof(__pyx_k_Subclasses_of_BondedInteraction_4), 0, 0, 1, 0},
  {&__pyx_kp_s_Subclasses_of_BondedInteraction_5, __pyx_k_Subclasses_of_BondedInteraction_5, sizeof(__pyx_k_Subclasses_of_BondedInteraction_5), 0, 0, 1, 0},
  {&__pyx_kp_s_Subclasses_of_BondedInteraction_6, __pyx_k_Subclasses_of_BondedInteraction_6, sizeof(__pyx_k_Subclasses_of_BondedInteraction_6), 0, 0, 1, 0},
  {&__pyx_kp_s_Subclasses_of_BondedInteraction_7, __pyx_k_Subclasses_of_BondedInteraction_7, sizeof(__pyx_k_Subclasses_of_BondedInteraction_7), 0, 0, 1, 0},
  {&__pyx_kp_s_Subclasses_of_NonBondedInteracti, __pyx_k_Subclasses_of_NonBondedInteracti, sizeof(__pyx_k_Subclasses_of_NonBondedInteracti), 0, 0, 1, 0},
  {&__pyx_kp_s_Subclasses_of_NonBondedInteracti_2, __pyx_k_Subclasses_of_NonBondedInteracti_2, sizeof(__pyx_k_Subclasses_of_NonBondedInteracti_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Subclasses_of_NonBondedInteracti_3, __pyx_k_Subclasses_of_NonBondedInteracti_3, sizeof(__pyx_k_Subclasses_of_NonBondedInteracti_3), 0, 0, 1, 0},
  {&__pyx_kp_s_Subclasses_of_NonBondedInteracti_4, __pyx_k_Subclasses_of_NonBondedInteracti_4, sizeof(__pyx_k_Subclasses_of_NonBondedInteracti_4), 0, 0, 1, 0},
  {&__pyx_kp_s_Subclasses_of_NonBondedInteracti_5, __pyx_k_Subclasses_of_NonBondedInteracti_5, sizeof(__pyx_k_Subclasses_of_NonBondedInteracti_5), 0, 0, 1, 0},
  {&__pyx_kp_s_Subclasses_of_NonBondedInteracti_6, __pyx_k_Subclasses_of_NonBondedInteracti_6, sizeof(__pyx_k_Subclasses_of_NonBondedInteracti_6), 0, 0, 1, 0},
  {&__pyx_kp_s_Subclasses_of_NonBondedInteracti_7, __pyx_k_Subclasses_of_NonBondedInteracti_7, sizeof(__pyx_k_Subclasses_of_NonBondedInteracti_7), 0, 0, 1, 0},
  {&__pyx_n_s_Subt_Lj, __pyx_k_Subt_Lj, sizeof(__pyx_k_Subt_Lj), 0, 0, 1, 1},
  {&__pyx_n_s_Subt_Lj__get_params_from_es_core, __pyx_k_Subt_Lj__get_params_from_es_core, sizeof(__pyx_k_Subt_Lj__get_params_from_es_core), 0, 0, 1, 1},
  {&__pyx_n_s_Subt_Lj__set_params_in_es_core, __pyx_k_Subt_Lj__set_params_in_es_core, sizeof(__pyx_k_Subt_Lj__set_params_in_es_core), 0, 0, 1, 1},
  {&__pyx_n_s_Subt_Lj_required_keys, __pyx_k_Subt_Lj_required_keys, sizeof(__pyx_k_Subt_Lj_required_keys), 0, 0, 1, 1},
  {&__pyx_n_s_Subt_Lj_set_default_params, __pyx_k_Subt_Lj_set_default_params, sizeof(__pyx_k_Subt_Lj_set_default_params), 0, 0, 1, 1},
  {&__pyx_n_s_Subt_Lj_type_name, __pyx_k_Subt_Lj_type_name, sizeof(__pyx_k_Subt_Lj_type_name), 0, 0, 1, 1},
  {&__pyx_n_s_Subt_Lj_type_number, __pyx_k_Subt_Lj_type_number, sizeof(__pyx_k_Subt_Lj_type_number), 0, 0, 1, 1},
  {&__pyx_n_s_Subt_Lj_valid_keys, __pyx_k_Subt_Lj_valid_keys, sizeof(__pyx_k_Subt_Lj_valid_keys), 0, 0, 1, 1},
  {&__pyx_kp_s_TABULATED_has_to_be_defined_in_m, __pyx_k_TABULATED_has_to_be_defined_in_m, sizeof(__pyx_k_TABULATED_has_to_be_defined_in_m), 0, 0, 1, 0},
  {&__pyx_n_s_Tabulated, __pyx_k_Tabulated, sizeof(__pyx_k_Tabulated), 0, 0, 1, 1},
  {&__pyx_n_s_Tabulated__get_params_from_es_co, __pyx_k_Tabulated__get_params_from_es_co, sizeof(__pyx_k_Tabulated__get_params_from_es_co), 0, 0, 1, 1},
  {&__pyx_n_s_Tabulated__set_params_in_es_core, __pyx_k_Tabulated__set_params_in_es_core, sizeof(__pyx_k_Tabulated__set_params_in_es_core), 0, 0, 1, 1},
  {&__pyx_n_s_Tabulated_required_keys, __pyx_k_Tabulated_required_keys, sizeof(__pyx_k_Tabulated_required_keys), 0, 0, 1, 1},
  {&__pyx_n_s_Tabulated_set_default_params, __pyx_k_Tabulated_set_default_params, sizeof(__pyx_k_Tabulated_set_default_params), 0, 0, 1, 1},
  {&__pyx_n_s_Tabulated_type_name, __pyx_k_Tabulated_type_name, sizeof(__pyx_k_Tabulated_type_name), 0, 0, 1, 1},
  {&__pyx_n_s_Tabulated_type_number, __pyx_k_Tabulated_type_number, sizeof(__pyx_k_Tabulated_type_number), 0, 0, 1, 1},
  {&__pyx_n_s_Tabulated_valid_keys, __pyx_k_Tabulated_valid_keys, sizeof(__pyx_k_Tabulated_valid_keys), 0, 0, 1, 1},
  {&__pyx_kp_s_The_bond_with_this_id_is_not_def, __pyx_k_The_bond_with_this_id_is_not_def, sizeof(__pyx_k_The_bond_with_this_id_is_not_def), 0, 0, 1, 0},
  {&__pyx_kp_s_The_bonded_interaction_with_the, __pyx_k_The_bonded_interaction_with_the, sizeof(__pyx_k_The_bonded_interaction_with_the), 0, 0, 1, 0},
  {&__pyx_kp_s_The_constructor_has_to_be_called, __pyx_k_The_constructor_has_to_be_called, sizeof(__pyx_k_The_constructor_has_to_be_called), 0, 0, 1, 0},
  {&__pyx_kp_s_The_constructor_has_to_be_called_2, __pyx_k_The_constructor_has_to_be_called_2, sizeof(__pyx_k_The_constructor_has_to_be_called_2), 0, 0, 1, 0},
  {&__pyx_kp_s_The_particle_types_have_to_be_of, __pyx_k_The_particle_types_have_to_be_of, sizeof(__pyx_k_The_particle_types_have_to_be_of), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_k_Users_bindgens2_Documents_espre, sizeof(__pyx_k_Users_bindgens2_Documents_espre), 0, 0, 1, 0},
  {&__pyx_n_s_V0, __pyx_k_V0, sizeof(__pyx_k_V0), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_Virtual, __pyx_k_Virtual, sizeof(__pyx_k_Virtual), 0, 0, 1, 1},
  {&__pyx_kp_s__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 1, 0},
  {&__pyx_kp_s__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 1, 0},
  {&__pyx_kp_s__34, __pyx_k__34, sizeof(__pyx_k__34), 0, 0, 1, 0},
  {&__pyx_n_s__75, __pyx_k__75, sizeof(__pyx_k__75), 0, 0, 1, 1},
  {&__pyx_n_s_add, __pyx_k_add, sizeof(__pyx_k_add), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_auto, __pyx_k_auto, sizeof(__pyx_k_auto), 0, 0, 1, 1},
  {&__pyx_n_s_bend, __pyx_k_bend, sizeof(__pyx_k_bend), 0, 0, 1, 1},
  {&__pyx_n_s_bond_class, __pyx_k_bond_class, sizeof(__pyx_k_bond_class), 0, 0, 1, 1},
  {&__pyx_n_s_bond_id, __pyx_k_bond_id, sizeof(__pyx_k_bond_id), 0, 0, 1, 1},
  {&__pyx_kp_s_bond_in_the_Espresso_core, __pyx_k_bond_in_the_Espresso_core, sizeof(__pyx_k_bond_in_the_Espresso_core), 0, 0, 1, 0},
  {&__pyx_n_s_bond_type, __pyx_k_bond_type, sizeof(__pyx_k_bond_type), 0, 0, 1, 1},
  {&__pyx_n_s_bonded_ia, __pyx_k_bonded_ia, sizeof(__pyx_k_bonded_ia), 0, 0, 1, 1},
  {&__pyx_n_s_bonded_instance, __pyx_k_bonded_instance, sizeof(__pyx_k_bonded_instance), 0, 0, 1, 1},
  {&__pyx_n_s_bonded_interaction_classes, __pyx_k_bonded_interaction_classes, sizeof(__pyx_k_bonded_interaction_classes), 0, 0, 1, 1},
  {&__pyx_n_s_call, __pyx_k_call, sizeof(__pyx_k_call), 0, 0, 1, 1},
  {&__pyx_n_s_cap, __pyx_k_cap, sizeof(__pyx_k_cap), 0, 0, 1, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_cutoff, __pyx_k_cutoff, sizeof(__pyx_k_cutoff), 0, 0, 1, 1},
  {&__pyx_n_s_d_r_max, __pyx_k_d_r_max, sizeof(__pyx_k_d_r_max), 0, 0, 1, 1},
  {&__pyx_n_s_default_params, __pyx_k_default_params, sizeof(__pyx_k_default_params), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_epsilon, __pyx_k_epsilon, sizeof(__pyx_k_epsilon), 0, 0, 1, 1},
  {&__pyx_n_s_espressomd_interactions, __pyx_k_espressomd_interactions, sizeof(__pyx_k_espressomd_interactions), 0, 0, 1, 1},
  {&__pyx_n_s_force_cap, __pyx_k_force_cap, sizeof(__pyx_k_force_cap), 0, 0, 1, 1},
  {&__pyx_n_s_generic_lennard_jones, __pyx_k_generic_lennard_jones, sizeof(__pyx_k_generic_lennard_jones), 0, 0, 1, 1},
  {&__pyx_n_s_get_force_cap, __pyx_k_get_force_cap, sizeof(__pyx_k_get_force_cap), 0, 0, 1, 1},
  {&__pyx_n_s_get_params, __pyx_k_get_params, sizeof(__pyx_k_get_params), 0, 0, 1, 1},
  {&__pyx_n_s_get_params_from_es_core, __pyx_k_get_params_from_es_core, sizeof(__pyx_k_get_params_from_es_core), 0, 0, 1, 1},
  {&__pyx_n_s_getattribute, __pyx_k_getattribute, sizeof(__pyx_k_getattribute), 0, 0, 1, 1},
  {&__pyx_n_s_getattribute___locals_sync_par, __pyx_k_getattribute___locals_sync_par, sizeof(__pyx_k_getattribute___locals_sync_par), 0, 0, 1, 1},
  {&__pyx_n_s_getitem, __pyx_k_getitem, sizeof(__pyx_k_getitem), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_inactive, __pyx_k_inactive, sizeof(__pyx_k_inactive), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_is_active, __pyx_k_is_active, sizeof(__pyx_k_is_active), 0, 0, 1, 1},
  {&__pyx_kp_s_is_not_yet_defined, __pyx_k_is_not_yet_defined, sizeof(__pyx_k_is_not_yet_defined), 0, 0, 1, 0},
  {&__pyx_n_s_iter, __pyx_k_iter, sizeof(__pyx_k_iter), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_kp_s_k_2, __pyx_k_k_2, sizeof(__pyx_k_k_2), 0, 0, 1, 0},
  {&__pyx_n_s_ka_g, __pyx_k_ka_g, sizeof(__pyx_k_ka_g), 0, 0, 1, 1},
  {&__pyx_n_s_kal, __pyx_k_kal, sizeof(__pyx_k_kal), 0, 0, 1, 1},
  {&__pyx_n_s_kb, __pyx_k_kb, sizeof(__pyx_k_kb), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_s_ks, __pyx_k_ks, sizeof(__pyx_k_ks), 0, 0, 1, 1},
  {&__pyx_n_s_kslin, __pyx_k_kslin, sizeof(__pyx_k_kslin), 0, 0, 1, 1},
  {&__pyx_n_s_kv, __pyx_k_kv, sizeof(__pyx_k_kv), 0, 0, 1, 1},
  {&__pyx_n_s_kwargs, __pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 0, 1, 1},
  {&__pyx_n_s_lennard_jones, __pyx_k_lennard_jones, sizeof(__pyx_k_lennard_jones), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_min, __pyx_k_min, sizeof(__pyx_k_min), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_mult, __pyx_k_mult, sizeof(__pyx_k_mult), 0, 0, 1, 1},
  {&__pyx_kp_s_mult_2, __pyx_k_mult_2, sizeof(__pyx_k_mult_2), 0, 0, 1, 0},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_kp_s_not_compiled_into_Espresso_core, __pyx_k_not_compiled_into_Espresso_core, sizeof(__pyx_k_not_compiled_into_Espresso_core), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
  {&__pyx_n_s_offset, __pyx_k_offset, sizeof(__pyx_k_offset), 0, 0, 1, 1},
  {&__pyx_kp_s_only_supported, __pyx_k_only_supported, sizeof(__pyx_k_only_supported), 0, 0, 1, 0},
  {&__pyx_n_s_params, __pyx_k_params, sizeof(__pyx_k_params), 0, 0, 1, 1},
  {&__pyx_n_s_params_2, __pyx_k_params_2, sizeof(__pyx_k_params_2), 0, 0, 1, 1},
  {&__pyx_n_s_phase, __pyx_k_phase, sizeof(__pyx_k_phase), 0, 0, 1, 1},
  {&__pyx_n_s_phi0, __pyx_k_phi0, sizeof(__pyx_k_phi0), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_n_s_r0, __pyx_k_r0, sizeof(__pyx_k_r0), 0, 0, 1, 1},
  {&__pyx_n_s_r_0, __pyx_k_r_0, sizeof(__pyx_k_r_0), 0, 0, 1, 1},
  {&__pyx_n_s_r_cut, __pyx_k_r_cut, sizeof(__pyx_k_r_cut), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_required_keys, __pyx_k_required_keys, sizeof(__pyx_k_required_keys), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_kp_s_s_has_to_be_defined_in_myconfig, __pyx_k_s_has_to_be_defined_in_myconfig, sizeof(__pyx_k_s_has_to_be_defined_in_myconfig), 0, 0, 1, 0},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_set_default_params, __pyx_k_set_default_params, sizeof(__pyx_k_set_default_params), 0, 0, 1, 1},
  {&__pyx_n_s_set_force_cap, __pyx_k_set_force_cap, sizeof(__pyx_k_set_force_cap), 0, 0, 1, 1},
  {&__pyx_n_s_set_params, __pyx_k_set_params, sizeof(__pyx_k_set_params), 0, 0, 1, 1},
  {&__pyx_n_s_set_params_in_es_core, __pyx_k_set_params_in_es_core, sizeof(__pyx_k_set_params_in_es_core), 0, 0, 1, 1},
  {&__pyx_n_s_setitem, __pyx_k_setitem, sizeof(__pyx_k_setitem), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_shift, __pyx_k_shift, sizeof(__pyx_k_shift), 0, 0, 1, 1},
  {&__pyx_n_s_sigma, __pyx_k_sigma, sizeof(__pyx_k_sigma), 0, 0, 1, 1},
  {&__pyx_n_s_str, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_s_sync_params, __pyx_k_sync_params, sizeof(__pyx_k_sync_params), 0, 0, 1, 1},
  {&__pyx_n_s_tabulated, __pyx_k_tabulated, sizeof(__pyx_k_tabulated), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_type1, __pyx_k_type1, sizeof(__pyx_k_type1), 0, 0, 1, 1},
  {&__pyx_n_s_type1_2, __pyx_k_type1_2, sizeof(__pyx_k_type1_2), 0, 0, 1, 1},
  {&__pyx_n_s_type2, __pyx_k_type2, sizeof(__pyx_k_type2), 0, 0, 1, 1},
  {&__pyx_n_s_type2_2, __pyx_k_type2_2, sizeof(__pyx_k_type2_2), 0, 0, 1, 1},
  {&__pyx_n_s_type_name, __pyx_k_type_name, sizeof(__pyx_k_type_name), 0, 0, 1, 1},
  {&__pyx_n_s_type_number, __pyx_k_type_number, sizeof(__pyx_k_type_number), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_user_interactions, __pyx_k_user_interactions, sizeof(__pyx_k_user_interactions), 0, 0, 1, 1},
  {&__pyx_n_s_utils, __pyx_k_utils, sizeof(__pyx_k_utils), 0, 0, 1, 1},
  {&__pyx_n_s_valid_keys, __pyx_k_valid_keys, sizeof(__pyx_k_valid_keys), 0, 0, 1, 1},
  {&__pyx_n_s_validate_params, __pyx_k_validate_params, sizeof(__pyx_k_validate_params), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_object = __Pyx_GetBuiltinName(__pyx_n_s_object); if (!__pyx_builtin_object) __PYX_ERR(0, 395, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 55, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 229, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 411, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 1409, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 1419, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(1, 799, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(1, 989, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "espressomd/interactions.pyx":64
 * 
 *         else:
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 "The constructor has to be called either with two particle type ids (as interger), or with a set of keyword arguments describing a new interaction")
 * 
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_The_constructor_has_to_be_called); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "espressomd/interactions.pyx":137
 *         attr = object.__getattribute__(self, name)
 *         if hasattr(attr, '__call__') and attr.__name__ == "_set_params_in_es_core":
 *             def sync_params(*args, **kwargs):             # <<<<<<<<<<<<<<
 *                 result = attr(*args, **kwargs)
 *                 self._params.update(self._get_params_from_es_core())
 */
  __pyx_tuple__4 = PyTuple_Pack(3, __pyx_n_s_args, __pyx_n_s_kwargs, __pyx_n_s_result); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);
  __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(0, 0, 3, 0, CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__4, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_sync_params, 137, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) __PYX_ERR(0, 137, __pyx_L1_error)

  /* "espressomd/interactions.pyx":147
 * 
 *     def _get_params_from_es_core(self):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             "Subclasses of NonBondedInteraction must define the _get_params_from_es_core() method.")
 * 
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_Subclasses_of_NonBondedInteracti); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "espressomd/interactions.pyx":151
 * 
 *     def _set_params_in_es_core(self):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             "Subclasses of NonBondedInteraction must define the _set_params_in_es_core() method.")
 * 
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_Subclasses_of_NonBondedInteracti_2); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "espressomd/interactions.pyx":155
 * 
 *     def default_params(self):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             "Subclasses of NonBondedInteraction must define the default_params() method.")
 * 
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_Subclasses_of_NonBondedInteracti_3); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "espressomd/interactions.pyx":163
 *         if self._part_types[0] >= 0 and self._part_types[1] >= 0:
 *             self._params = self._get_params_from_es_core()
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             "Subclasses of NonBondedInteraction must define the is_active() method.")
 * 
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_Subclasses_of_NonBondedInteracti_4); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "espressomd/interactions.pyx":167
 * 
 *     def type_name(self):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             "Subclasses of NonBondedInteraction must define the type_name() method.")
 * 
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_Subclasses_of_NonBondedInteracti_5); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "espressomd/interactions.pyx":171
 * 
 *     def valid_keys(self):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             "Subclasses of NonBondedInteraction must define the valid_keys() method.")
 * 
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_Subclasses_of_NonBondedInteracti_6); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "espressomd/interactions.pyx":175
 * 
 *     def required_keys(self):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             "Subclasses of NonBondedInteraction must define the required_keys() method.")
 * 
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_Subclasses_of_NonBondedInteracti_7); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "espressomd/interactions.pyx":185
 *         def validate_params(self):
 *             if self._params["epsilon"] < 0:
 *                 raise ValueError("Lennard-Jones eps has to be >=0")             # <<<<<<<<<<<<<<
 *             if self._params["sigma"] < 0:
 *                 raise ValueError("Lennard-Jones sigma has to be >=0")
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_Lennard_Jones_eps_has_to_be_0); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "espressomd/interactions.pyx":187
 *                 raise ValueError("Lennard-Jones eps has to be >=0")
 *             if self._params["sigma"] < 0:
 *                 raise ValueError("Lennard-Jones sigma has to be >=0")             # <<<<<<<<<<<<<<
 *             if self._params["cutoff"] < 0:
 *                 raise ValueError("Lennard-Jones cutoff has to be >=0")
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_Lennard_Jones_sigma_has_to_be_0); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "espressomd/interactions.pyx":189
 *                 raise ValueError("Lennard-Jones sigma has to be >=0")
 *             if self._params["cutoff"] < 0:
 *                 raise ValueError("Lennard-Jones cutoff has to be >=0")             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_Lennard_Jones_cutoff_has_to_be_0); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "espressomd/interactions.pyx":246
 *                                         self._params["cap"],
 *                                         self._params["min"]):
 *                 raise Exception("Could not set Lennard Jones parameters")             # <<<<<<<<<<<<<<
 * 
 *         def default_params(self):
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_Could_not_set_Lennard_Jones_para); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "espressomd/interactions.pyx":262
 * 
 *         def valid_keys(self):
 *             return "epsilon", "sigma", "cutoff", "shift", "offset", "cap", "min"             # <<<<<<<<<<<<<<
 * 
 *         def required_keys(self):
 */
  __pyx_tuple__17 = PyTuple_Pack(7, __pyx_n_s_epsilon, __pyx_n_s_sigma, __pyx_n_s_cutoff, __pyx_n_s_shift, __pyx_n_s_offset, __pyx_n_s_cap, __pyx_n_s_min); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "espressomd/interactions.pyx":265
 * 
 *         def required_keys(self):
 *             return "epsilon", "sigma", "cutoff", "shift"             # <<<<<<<<<<<<<<
 * 
 * # Generic Lennard Jones
 */
  __pyx_tuple__18 = PyTuple_Pack(4, __pyx_n_s_epsilon, __pyx_n_s_sigma, __pyx_n_s_cutoff, __pyx_n_s_shift); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "espressomd/interactions.pyx":411
 *         """Takes two particle types as argument"""
 *         if not (isinstance(_type1, int) and isinstance(_type2, int)):
 *             raise TypeError("The particle types have to be of type integer.")             # <<<<<<<<<<<<<<
 *         self.type1 = _type1
 *         self.type2 = _type2
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_The_particle_types_have_to_be_of); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "espressomd/interactions.pyx":434
 *     def __getitem__(self, key):
 *         if not isinstance(key, tuple):
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 "NonBondedInteractions[] expects two particle types as indices.")
 *         if len(key) != 2 or (not isinstance(key[0], int)) or (not isinstance(key[1], int)):
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_NonBondedInteractions_expects_tw); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "espressomd/interactions.pyx":437
 *                 "NonBondedInteractions[] expects two particle types as indices.")
 *         if len(key) != 2 or (not isinstance(key[0], int)) or (not isinstance(key[1], int)):
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 "NonBondedInteractions[] expects two particle types as indices.")
 *         return NonBondedInteractionHandle(key[0], key[1])
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_NonBondedInteractions_expects_tw); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "espressomd/interactions.pyx":443
 *     def set_force_cap(self, cap):
 *         if forcecap_set_params(cap):
 *             raise Exception("Could not set forcecap")             # <<<<<<<<<<<<<<
 * 
 *     def get_force_cap(self):
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_Could_not_set_forcecap); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "espressomd/interactions.pyx":450
 *     def __getstate__(self):
 *         # contains info about ALL nonbonded interactions
 *         odict = NonBondedInteractionHandle(-1, -             # <<<<<<<<<<<<<<
 *                                            1).lennard_jones.user_interactions
 *         odict['force_cap'] = self.get_force_cap()
 */
  __pyx_tuple__23 = PyTuple_Pack(2, __pyx_int_neg_1, __pyx_int_neg_1); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "espressomd/interactions.pyx":517
 * 
 *         else:
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 "The constructor has to be called either with a bond id (as interger), or with a set of keyword arguments describing a new interaction")
 * 
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_The_constructor_has_to_be_called_2); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "espressomd/interactions.pyx":559
 *         attr = object.__getattribute__(self, name)
 *         if hasattr(attr, '__call__') and attr.__name__ == "_set_params_in_es_core":
 *             def sync_params(*args, **kwargs):             # <<<<<<<<<<<<<<
 *                 result = attr(*args, **kwargs)
 *                 self._params.update(self._get_params_from_es_core())
 */
  __pyx_tuple__25 = PyTuple_Pack(3, __pyx_n_s_args, __pyx_n_s_kwargs, __pyx_n_s_result); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(0, 0, 3, 0, CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_sync_params, 559, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(0, 559, __pyx_L1_error)

  /* "espressomd/interactions.pyx":569
 * 
 *     def _get_params_from_es_core(self):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             "Subclasses of BondedInteraction must define the _get_params_from_es_core() method.")
 * 
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_Subclasses_of_BondedInteraction); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "espressomd/interactions.pyx":573
 * 
 *     def _set_params_in_es_core(self):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             "Subclasses of BondedInteraction must define the _set_params_in_es_core() method.")
 * 
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_Subclasses_of_BondedInteraction_2); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "espressomd/interactions.pyx":580
 * 
 *     def set_default_params(self):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             "Subclasses of BondedInteraction must define the set_default_params() method.")
 * 
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_Subclasses_of_BondedInteraction_3); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "espressomd/interactions.pyx":584
 * 
 *     def type_number(self):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             "Subclasses of BondedInteraction must define the type_number() method.")
 * 
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_Subclasses_of_BondedInteraction_4); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "espressomd/interactions.pyx":588
 * 
 *     def type_name(self):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             "Subclasses of BondedInteraction must define the type_name() method.")
 * 
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_Subclasses_of_BondedInteraction_5); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "espressomd/interactions.pyx":592
 * 
 *     def valid_keys(self):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             "Subclasses of BondedInteraction must define the valid_keys() method.")
 * 
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_Subclasses_of_BondedInteraction_6); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "espressomd/interactions.pyx":596
 * 
 *     def required_keys(self):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             "Subclasses of BondedInteraction must define the required_keys() method.")
 * 
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_Subclasses_of_BondedInteraction_7); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "espressomd/interactions.pyx":609
 *     def __richcmp__(self, other, i):
 *         if i != 2:
 *             raise Exception("only == supported")             # <<<<<<<<<<<<<<
 *         if self.__class__ != other.__class__:
 *             return False
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_only_supported); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "espressomd/interactions.pyx":671
 * 
 *     def valid_keys(self):
 *         return "k", "d_r_max", "r_0"             # <<<<<<<<<<<<<<
 * 
 *     def required_keys(self):
 */
  __pyx_tuple__36 = PyTuple_Pack(3, __pyx_n_s_k, __pyx_n_s_d_r_max, __pyx_n_s_r_0); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "espressomd/interactions.pyx":674
 * 
 *     def required_keys(self):
 *         return "k", "d_r_max"             # <<<<<<<<<<<<<<
 * 
 *     def set_default_params(self):
 */
  __pyx_tuple__37 = PyTuple_Pack(2, __pyx_n_s_k, __pyx_n_s_d_r_max); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "espressomd/interactions.pyx":718
 * 
 *     def valid_keys(self):
 *         return "k", "r_0", "r_cut"             # <<<<<<<<<<<<<<
 * 
 *     def required_keys(self):
 */
  __pyx_tuple__38 = PyTuple_Pack(3, __pyx_n_s_k, __pyx_n_s_r_0, __pyx_n_s_r_cut); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "espressomd/interactions.pyx":721
 * 
 *     def required_keys(self):
 *         return "k", "r_0"             # <<<<<<<<<<<<<<
 * 
 *     def set_default_params(self):
 */
  __pyx_tuple__39 = PyTuple_Pack(2, __pyx_n_s_k, __pyx_n_s_r_0); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "espressomd/interactions.pyx":808
 *                     broken.
 *             """
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_s_HarmonicDumbbellBond_ROTATION_ha); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "espressomd/interactions.pyx":813
 * 
 *         def type_number(self):
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_HarmonicDumbbellBond_ROTATION_ha); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "espressomd/interactions.pyx":817
 * 
 *         def type_name(self):
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_s_HarmonicDumbbellBond_ROTATION_ha); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "espressomd/interactions.pyx":821
 * 
 *         def valid_keys(self):
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_s_HarmonicDumbbellBond_ROTATION_ha); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "espressomd/interactions.pyx":825
 * 
 *         def required_keys(self):
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_s_HarmonicDumbbellBond_ROTATION_ha); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "espressomd/interactions.pyx":829
 * 
 *         def set_default_params(self):
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_s_HarmonicDumbbellBond_ROTATION_ha); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "espressomd/interactions.pyx":833
 * 
 *         def _get_params_from_es_core(self):
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_kp_s_HarmonicDumbbellBond_ROTATION_ha); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "espressomd/interactions.pyx":837
 * 
 *         def _set_params_in_es_core(self):
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_kp_s_HarmonicDumbbellBond_ROTATION_ha); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "espressomd/interactions.pyx":899
 * 
 *     def valid_keys(self):
 *         return "mult", "bend", "phase"             # <<<<<<<<<<<<<<
 * 
 *     def required_keys(self):
 */
  __pyx_tuple__48 = PyTuple_Pack(3, __pyx_n_s_mult, __pyx_n_s_bend, __pyx_n_s_phase); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "espressomd/interactions.pyx":902
 * 
 *     def required_keys(self):
 *         return "mult", "bend", "phase"             # <<<<<<<<<<<<<<
 * 
 *     def set_default_params(self):
 */
  __pyx_tuple__49 = PyTuple_Pack(3, __pyx_n_s_mult, __pyx_n_s_bend, __pyx_n_s_phase); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "espressomd/interactions.pyx":1041
 * 
 *         def type_number(self):
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")             # <<<<<<<<<<<<<<
 * 
 *         def type_name(self):
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_kp_s_TABULATED_has_to_be_defined_in_m); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "espressomd/interactions.pyx":1044
 * 
 *         def type_name(self):
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")             # <<<<<<<<<<<<<<
 * 
 *         def valid_keys(self):
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_kp_s_TABULATED_has_to_be_defined_in_m); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "espressomd/interactions.pyx":1047
 * 
 *         def valid_keys(self):
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")             # <<<<<<<<<<<<<<
 * 
 *         def required_keys(self):
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_kp_s_TABULATED_has_to_be_defined_in_m); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 1047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "espressomd/interactions.pyx":1050
 * 
 *         def required_keys(self):
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")             # <<<<<<<<<<<<<<
 * 
 *         def set_default_params(self):
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_kp_s_TABULATED_has_to_be_defined_in_m); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 1050, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "espressomd/interactions.pyx":1053
 * 
 *         def set_default_params(self):
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")             # <<<<<<<<<<<<<<
 * 
 *         def _get_params_from_es_core(self):
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_kp_s_TABULATED_has_to_be_defined_in_m); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 1053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "espressomd/interactions.pyx":1056
 * 
 *         def _get_params_from_es_core(self):
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")             # <<<<<<<<<<<<<<
 * 
 *         def _set_params_in_es_core(self):
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_kp_s_TABULATED_has_to_be_defined_in_m); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 1056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "espressomd/interactions.pyx":1059
 * 
 *         def _set_params_in_es_core(self):
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__56 = PyTuple_Pack(1, __pyx_kp_s_TABULATED_has_to_be_defined_in_m); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 1059, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "espressomd/interactions.pyx":1072
 * 
 *         def valid_keys(self):
 *             return "r", "k"             # <<<<<<<<<<<<<<
 * 
 *         def required_keys(self):
 */
  __pyx_tuple__57 = PyTuple_Pack(2, __pyx_n_s_r, __pyx_n_s_k); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 1072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "espressomd/interactions.pyx":1075
 * 
 *         def required_keys(self):
 *             return "r", "k"             # <<<<<<<<<<<<<<
 * 
 *         def set_default_params(self):
 */
  __pyx_tuple__58 = PyTuple_Pack(2, __pyx_n_s_r, __pyx_n_s_k); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "espressomd/interactions.pyx":1288
 * 
 *     def valid_keys(self):
 *         return "A0_g", "ka_g", "V0", "kv"             # <<<<<<<<<<<<<<
 * 
 *     def required_keys(self):
 */
  __pyx_tuple__59 = PyTuple_Pack(4, __pyx_n_s_A0_g, __pyx_n_s_ka_g, __pyx_n_s_V0, __pyx_n_s_kv); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 1288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "espressomd/interactions.pyx":1291
 * 
 *     def required_keys(self):
 *         return "A0_g", "ka_g", "V0", "kv"             # <<<<<<<<<<<<<<
 * 
 *     def set_default_params(self):
 */
  __pyx_tuple__60 = PyTuple_Pack(4, __pyx_n_s_A0_g, __pyx_n_s_ka_g, __pyx_n_s_V0, __pyx_n_s_kv); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(0, 1291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "espressomd/interactions.pyx":1317
 * 
 *     def valid_keys(self):
 *         return "r0", "ks", "kslin", "phi0", "kb", "A01", "A02", "kal"             # <<<<<<<<<<<<<<
 * 
 *     def required_keys(self):
 */
  __pyx_tuple__61 = PyTuple_Pack(8, __pyx_n_s_r0, __pyx_n_s_ks, __pyx_n_s_kslin, __pyx_n_s_phi0, __pyx_n_s_kb, __pyx_n_s_A01, __pyx_n_s_A02, __pyx_n_s_kal); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 1317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "espressomd/interactions.pyx":1320
 * 
 *     def required_keys(self):
 *         return "r0", "ks", "kslin", "phi0", "kb", "A01", "A02", "kal"             # <<<<<<<<<<<<<<
 * 
 *     def set_default_params(self):
 */
  __pyx_tuple__62 = PyTuple_Pack(8, __pyx_n_s_r0, __pyx_n_s_ks, __pyx_n_s_kslin, __pyx_n_s_phi0, __pyx_n_s_kb, __pyx_n_s_A01, __pyx_n_s_A02, __pyx_n_s_kal); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 1320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "espressomd/interactions.pyx":1370
 *     def __getitem__(self, key):
 *         if not isinstance(key, int):
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 "Index to BondedInteractions[] hast to be an integer referring to a bond id")
 * 
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_kp_s_Index_to_BondedInteractions_hast); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 1370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "espressomd/interactions.pyx":1393
 *         # type of key must be int
 *         if not isinstance(key, int):
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 "Index to BondedInteractions[] has to ba an integer referring to a bond id")
 * 
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_kp_s_Index_to_BondedInteractions_has); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "espressomd/interactions.pyx":1398
 *         # Value must be subclass off BondedInteraction
 *         if not isinstance(value, BondedInteraction):
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 "Only subclasses of BondedInteraction can be assigned.")
 * 
 */
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_kp_s_Only_subclasses_of_BondedInterac); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(0, 1398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__66 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(1, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(1, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__68 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(1, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(1, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(1, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__71 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(1, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":989
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__72 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(1, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":995
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__73 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(1, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1001
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__74 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(1, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);

  /* "espressomd/interactions.pyx":408
 *     tabulated = None
 * 
 *     def __init__(self, _type1, _type2):             # <<<<<<<<<<<<<<
 *         """Takes two particle types as argument"""
 *         if not (isinstance(_type1, int) and isinstance(_type2, int)):
 */
  __pyx_tuple__76 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_type1, __pyx_n_s_type2); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_init, 408, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) __PYX_ERR(0, 408, __pyx_L1_error)

  /* "espressomd/interactions.pyx":619
 * class BondedInteractionNotDefined(object):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             self.__class__.__name__ + " not compiled into Espresso core")
 */
  __pyx_tuple__78 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_args, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_init, 619, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(0, 619, __pyx_L1_error)

  /* "espressomd/interactions.pyx":623
 *             self.__class__.__name__ + " not compiled into Espresso core")
 * 
 *     def type_number(self):             # <<<<<<<<<<<<<<
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 */
  __pyx_tuple__80 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_type_number, 623, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) __PYX_ERR(0, 623, __pyx_L1_error)

  /* "espressomd/interactions.pyx":626
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 */
  __pyx_tuple__82 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(0, 626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__82, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_type_name, 626, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) __PYX_ERR(0, 626, __pyx_L1_error)

  /* "espressomd/interactions.pyx":629
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 *     def valid_keys(self):             # <<<<<<<<<<<<<<
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 */
  __pyx_tuple__84 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__84, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_valid_keys, 629, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) __PYX_ERR(0, 629, __pyx_L1_error)

  /* "espressomd/interactions.pyx":632
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 *     def required_keys(self):             # <<<<<<<<<<<<<<
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 */
  __pyx_tuple__86 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(0, 632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__86, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_required_keys, 632, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(0, 632, __pyx_L1_error)

  /* "espressomd/interactions.pyx":635
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 *     def set_default_params(self):             # <<<<<<<<<<<<<<
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 */
  __pyx_tuple__88 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(0, 635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__88, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_set_default_params, 635, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) __PYX_ERR(0, 635, __pyx_L1_error)

  /* "espressomd/interactions.pyx":638
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 *     def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 */
  __pyx_tuple__90 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__90)) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__90, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_get_params_from_es_core, 638, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) __PYX_ERR(0, 638, __pyx_L1_error)

  /* "espressomd/interactions.pyx":641
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 *     def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 */
  __pyx_tuple__92 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__92)) __PYX_ERR(0, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__92, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_set_params_in_es_core, 641, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) __PYX_ERR(0, 641, __pyx_L1_error)

  /* "espressomd/interactions.pyx":647
 * class FeneBond(BondedInteraction):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         """
 *         FeneBond initialiser. Used to instatiate a FeneBond identifier
 */
  __pyx_tuple__94 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_args, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple__94)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);
  __pyx_codeobj__95 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__94, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_init, 647, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__95)) __PYX_ERR(0, 647, __pyx_L1_error)

  /* "espressomd/interactions.pyx":664
 *         super(FeneBond, self).__init__(*args, **kwargs)
 * 
 *     def type_number(self):             # <<<<<<<<<<<<<<
 *         return BONDED_IA_FENE
 * 
 */
  __pyx_tuple__96 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__96)) __PYX_ERR(0, 664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__96, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_type_number, 664, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(0, 664, __pyx_L1_error)

  /* "espressomd/interactions.pyx":667
 *         return BONDED_IA_FENE
 * 
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         return "FENE"
 * 
 */
  __pyx_tuple__98 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_type_name, 667, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(0, 667, __pyx_L1_error)

  /* "espressomd/interactions.pyx":670
 *         return "FENE"
 * 
 *     def valid_keys(self):             # <<<<<<<<<<<<<<
 *         return "k", "d_r_max", "r_0"
 * 
 */
  __pyx_tuple__100 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(0, 670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_valid_keys, 670, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) __PYX_ERR(0, 670, __pyx_L1_error)

  /* "espressomd/interactions.pyx":673
 *         return "k", "d_r_max", "r_0"
 * 
 *     def required_keys(self):             # <<<<<<<<<<<<<<
 *         return "k", "d_r_max"
 * 
 */
  __pyx_tuple__102 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__102, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_required_keys, 673, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) __PYX_ERR(0, 673, __pyx_L1_error)

  /* "espressomd/interactions.pyx":676
 *         return "k", "d_r_max"
 * 
 *     def set_default_params(self):             # <<<<<<<<<<<<<<
 *         self._params = {"r_0": 0.}
 *         # Everything else has to be supplied by the user, anyway
 */
  __pyx_tuple__104 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__104, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_set_default_params, 676, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) __PYX_ERR(0, 676, __pyx_L1_error)

  /* "espressomd/interactions.pyx":680
 *         # Everything else has to be supplied by the user, anyway
 * 
 *     def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *         return \
 *             {"k": bonded_ia_params[self._bond_id].p.fene.k,
 */
  __pyx_tuple__106 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__106)) __PYX_ERR(0, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);
  __pyx_codeobj__107 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_get_params_from_es_core, 680, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__107)) __PYX_ERR(0, 680, __pyx_L1_error)

  /* "espressomd/interactions.pyx":686
 *              "r_0": bonded_ia_params[self._bond_id].p.fene.r0}
 * 
 *     def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *         fene_set_params(
 *             self._bond_id, self._params["k"], self._params["d_r_max"], self._params["r_0"])
 */
  __pyx_tuple__108 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__108)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);
  __pyx_codeobj__109 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__108, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_set_params_in_es_core, 686, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__109)) __PYX_ERR(0, 686, __pyx_L1_error)

  /* "espressomd/interactions.pyx":693
 * class HarmonicBond(BondedInteraction):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         """
 *         HarmonicBond initialiser. Used to instatiate a HarmonicBond identifier
 */
  __pyx_tuple__110 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_args, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple__110)) __PYX_ERR(0, 693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);
  __pyx_codeobj__111 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__110, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_init, 693, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__111)) __PYX_ERR(0, 693, __pyx_L1_error)

  /* "espressomd/interactions.pyx":711
 * 
 * 
 *     def type_number(self):             # <<<<<<<<<<<<<<
 *         return BONDED_IA_HARMONIC
 * 
 */
  __pyx_tuple__112 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__112)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);
  __pyx_codeobj__113 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__112, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_type_number, 711, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__113)) __PYX_ERR(0, 711, __pyx_L1_error)

  /* "espressomd/interactions.pyx":714
 *         return BONDED_IA_HARMONIC
 * 
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         return "HARMONIC"
 * 
 */
  __pyx_tuple__114 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__114)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__114);
  __Pyx_GIVEREF(__pyx_tuple__114);
  __pyx_codeobj__115 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__114, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_type_name, 714, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__115)) __PYX_ERR(0, 714, __pyx_L1_error)

  /* "espressomd/interactions.pyx":717
 *         return "HARMONIC"
 * 
 *     def valid_keys(self):             # <<<<<<<<<<<<<<
 *         return "k", "r_0", "r_cut"
 * 
 */
  __pyx_tuple__116 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__116)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);
  __pyx_codeobj__117 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__116, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_valid_keys, 717, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__117)) __PYX_ERR(0, 717, __pyx_L1_error)

  /* "espressomd/interactions.pyx":720
 *         return "k", "r_0", "r_cut"
 * 
 *     def required_keys(self):             # <<<<<<<<<<<<<<
 *         return "k", "r_0"
 * 
 */
  __pyx_tuple__118 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__118)) __PYX_ERR(0, 720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);
  __pyx_codeobj__119 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__118, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_required_keys, 720, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__119)) __PYX_ERR(0, 720, __pyx_L1_error)

  /* "espressomd/interactions.pyx":723
 *         return "k", "r_0"
 * 
 *     def set_default_params(self):             # <<<<<<<<<<<<<<
 *         self._params = {"k'": 0., "r_0": 0., "r_cut": 0.}
 * 
 */
  __pyx_tuple__120 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__120)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);
  __pyx_codeobj__121 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_set_default_params, 723, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__121)) __PYX_ERR(0, 723, __pyx_L1_error)

  /* "espressomd/interactions.pyx":726
 *         self._params = {"k'": 0., "r_0": 0., "r_cut": 0.}
 * 
 *     def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *         return \
 *             {"k": bonded_ia_params[self._bond_id].p.harmonic.k,
 */
  __pyx_tuple__122 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__122)) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);
  __pyx_codeobj__123 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__122, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_get_params_from_es_core, 726, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__123)) __PYX_ERR(0, 726, __pyx_L1_error)

  /* "espressomd/interactions.pyx":732
 *              "r_cut": bonded_ia_params[self._bond_id].p.harmonic.r_cut}
 * 
 *     def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *         harmonic_set_params(
 *             self._bond_id, self._params["k"], self._params["r_0"], self._params["r_cut"])
 */
  __pyx_tuple__124 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__124)) __PYX_ERR(0, 732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);
  __pyx_codeobj__125 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__124, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_set_params_in_es_core, 732, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__125)) __PYX_ERR(0, 732, __pyx_L1_error)

  /* "espressomd/interactions.pyx":791
 *     class HarmonicDumbbellBond(BondedInteraction):
 * 
 *         def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *             """
 *             HarmonicDumbbellBond initialiser. Used to instatiate a
 */
  __pyx_tuple__126 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_args, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple__126)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__126);
  __Pyx_GIVEREF(__pyx_tuple__126);
  __pyx_codeobj__127 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__126, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_init, 791, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__127)) __PYX_ERR(0, 791, __pyx_L1_error)

  /* "espressomd/interactions.pyx":812
 * 
 * 
 *         def type_number(self):             # <<<<<<<<<<<<<<
 *             raise Exception(
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 */
  __pyx_tuple__128 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__128)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);
  __pyx_codeobj__129 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__128, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_type_number, 812, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__129)) __PYX_ERR(0, 812, __pyx_L1_error)

  /* "espressomd/interactions.pyx":816
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 *         def type_name(self):             # <<<<<<<<<<<<<<
 *             raise Exception(
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 */
  __pyx_tuple__130 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__130)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);
  __pyx_codeobj__131 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__130, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_type_name, 816, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__131)) __PYX_ERR(0, 816, __pyx_L1_error)

  /* "espressomd/interactions.pyx":820
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 *         def valid_keys(self):             # <<<<<<<<<<<<<<
 *             raise Exception(
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 */
  __pyx_tuple__132 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__132)) __PYX_ERR(0, 820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__132);
  __Pyx_GIVEREF(__pyx_tuple__132);
  __pyx_codeobj__133 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__132, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_valid_keys, 820, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__133)) __PYX_ERR(0, 820, __pyx_L1_error)

  /* "espressomd/interactions.pyx":824
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 *         def required_keys(self):             # <<<<<<<<<<<<<<
 *             raise Exception(
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 */
  __pyx_tuple__134 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__134)) __PYX_ERR(0, 824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__134);
  __Pyx_GIVEREF(__pyx_tuple__134);
  __pyx_codeobj__135 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__134, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_required_keys, 824, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__135)) __PYX_ERR(0, 824, __pyx_L1_error)

  /* "espressomd/interactions.pyx":828
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 *         def set_default_params(self):             # <<<<<<<<<<<<<<
 *             raise Exception(
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 */
  __pyx_tuple__136 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__136)) __PYX_ERR(0, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__136);
  __Pyx_GIVEREF(__pyx_tuple__136);
  __pyx_codeobj__137 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__136, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_set_default_params, 828, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__137)) __PYX_ERR(0, 828, __pyx_L1_error)

  /* "espressomd/interactions.pyx":832
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 *         def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *             raise Exception(
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 */
  __pyx_tuple__138 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__138)) __PYX_ERR(0, 832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__138);
  __Pyx_GIVEREF(__pyx_tuple__138);
  __pyx_codeobj__139 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__138, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_get_params_from_es_core, 832, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__139)) __PYX_ERR(0, 832, __pyx_L1_error)

  /* "espressomd/interactions.pyx":836
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 *         def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *             raise Exception(
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 */
  __pyx_tuple__140 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__140)) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__140);
  __Pyx_GIVEREF(__pyx_tuple__140);
  __pyx_codeobj__141 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__140, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_set_params_in_es_core, 836, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__141)) __PYX_ERR(0, 836, __pyx_L1_error)

  /* "espressomd/interactions.pyx":892
 * class Dihedral(BondedInteraction):
 * 
 *     def type_number(self):             # <<<<<<<<<<<<<<
 *         return BONDED_IA_DIHEDRAL
 * 
 */
  __pyx_tuple__142 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__142)) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__142);
  __Pyx_GIVEREF(__pyx_tuple__142);
  __pyx_codeobj__143 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__142, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_type_number, 892, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__143)) __PYX_ERR(0, 892, __pyx_L1_error)

  /* "espressomd/interactions.pyx":895
 *         return BONDED_IA_DIHEDRAL
 * 
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         return "DIHEDRAL"
 * 
 */
  __pyx_tuple__144 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__144)) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__144);
  __Pyx_GIVEREF(__pyx_tuple__144);
  __pyx_codeobj__145 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__144, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_type_name, 895, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__145)) __PYX_ERR(0, 895, __pyx_L1_error)

  /* "espressomd/interactions.pyx":898
 *         return "DIHEDRAL"
 * 
 *     def valid_keys(self):             # <<<<<<<<<<<<<<
 *         return "mult", "bend", "phase"
 * 
 */
  __pyx_tuple__146 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__146)) __PYX_ERR(0, 898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__146);
  __Pyx_GIVEREF(__pyx_tuple__146);
  __pyx_codeobj__147 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__146, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_valid_keys, 898, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__147)) __PYX_ERR(0, 898, __pyx_L1_error)

  /* "espressomd/interactions.pyx":901
 *         return "mult", "bend", "phase"
 * 
 *     def required_keys(self):             # <<<<<<<<<<<<<<
 *         return "mult", "bend", "phase"
 * 
 */
  __pyx_tuple__148 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__148)) __PYX_ERR(0, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__148);
  __Pyx_GIVEREF(__pyx_tuple__148);
  __pyx_codeobj__149 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__148, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_required_keys, 901, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__149)) __PYX_ERR(0, 901, __pyx_L1_error)

  /* "espressomd/interactions.pyx":904
 *         return "mult", "bend", "phase"
 * 
 *     def set_default_params(self):             # <<<<<<<<<<<<<<
 *         self._params = {"mult'": 1., "bend": 0., "phase": 0.}
 * 
 */
  __pyx_tuple__150 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__150)) __PYX_ERR(0, 904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__150);
  __Pyx_GIVEREF(__pyx_tuple__150);
  __pyx_codeobj__151 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__150, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_set_default_params, 904, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__151)) __PYX_ERR(0, 904, __pyx_L1_error)

  /* "espressomd/interactions.pyx":907
 *         self._params = {"mult'": 1., "bend": 0., "phase": 0.}
 * 
 *     def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *         return \
 *             {"mult": bonded_ia_params[self._bond_id].p.dihedral.mult,
 */
  __pyx_tuple__152 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__152)) __PYX_ERR(0, 907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__152);
  __Pyx_GIVEREF(__pyx_tuple__152);
  __pyx_codeobj__153 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__152, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_get_params_from_es_core, 907, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__153)) __PYX_ERR(0, 907, __pyx_L1_error)

  /* "espressomd/interactions.pyx":913
 *              "phase": bonded_ia_params[self._bond_id].p.dihedral.phase}
 * 
 *     def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *         dihedral_set_params(
 *             self._bond_id, self._params["mult"], self._params["bend"], self._params["phase"])
 */
  __pyx_tuple__154 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__154)) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__154);
  __Pyx_GIVEREF(__pyx_tuple__154);
  __pyx_codeobj__155 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__154, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_set_params_in_es_core, 913, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__155)) __PYX_ERR(0, 913, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1040
 *     class Tabulated(BondedInteraction):
 * 
 *         def type_number(self):             # <<<<<<<<<<<<<<
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_tuple__156 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__156)) __PYX_ERR(0, 1040, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__156);
  __Pyx_GIVEREF(__pyx_tuple__156);
  __pyx_codeobj__157 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__156, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_type_number, 1040, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__157)) __PYX_ERR(0, 1040, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1043
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 *         def type_name(self):             # <<<<<<<<<<<<<<
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_tuple__158 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__158)) __PYX_ERR(0, 1043, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__158);
  __Pyx_GIVEREF(__pyx_tuple__158);
  __pyx_codeobj__159 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__158, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_type_name, 1043, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__159)) __PYX_ERR(0, 1043, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1046
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 *         def valid_keys(self):             # <<<<<<<<<<<<<<
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_tuple__160 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__160)) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__160);
  __Pyx_GIVEREF(__pyx_tuple__160);
  __pyx_codeobj__161 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__160, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_valid_keys, 1046, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__161)) __PYX_ERR(0, 1046, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1049
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 *         def required_keys(self):             # <<<<<<<<<<<<<<
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_tuple__162 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__162)) __PYX_ERR(0, 1049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__162);
  __Pyx_GIVEREF(__pyx_tuple__162);
  __pyx_codeobj__163 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__162, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_required_keys, 1049, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__163)) __PYX_ERR(0, 1049, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1052
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 *         def set_default_params(self):             # <<<<<<<<<<<<<<
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_tuple__164 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__164)) __PYX_ERR(0, 1052, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__164);
  __Pyx_GIVEREF(__pyx_tuple__164);
  __pyx_codeobj__165 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__164, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_set_default_params, 1052, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__165)) __PYX_ERR(0, 1052, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1055
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 *         def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_tuple__166 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__166)) __PYX_ERR(0, 1055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__166);
  __Pyx_GIVEREF(__pyx_tuple__166);
  __pyx_codeobj__167 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__166, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_get_params_from_es_core, 1055, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__167)) __PYX_ERR(0, 1055, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1058
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 *         def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_tuple__168 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__168)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__168);
  __Pyx_GIVEREF(__pyx_tuple__168);
  __pyx_codeobj__169 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__168, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_set_params_in_es_core, 1058, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__169)) __PYX_ERR(0, 1058, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1065
 *     class Subt_Lj(BondedInteraction):
 * 
 *         def type_number(self):             # <<<<<<<<<<<<<<
 *             return BONDED_IA_SUBT_LJ
 * 
 */
  __pyx_tuple__170 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__170)) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__170);
  __Pyx_GIVEREF(__pyx_tuple__170);
  __pyx_codeobj__171 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__170, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_type_number, 1065, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__171)) __PYX_ERR(0, 1065, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1068
 *             return BONDED_IA_SUBT_LJ
 * 
 *         def type_name(self):             # <<<<<<<<<<<<<<
 *             return "SUBT_LJ"
 * 
 */
  __pyx_tuple__172 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__172)) __PYX_ERR(0, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__172);
  __Pyx_GIVEREF(__pyx_tuple__172);
  __pyx_codeobj__173 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__172, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_type_name, 1068, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__173)) __PYX_ERR(0, 1068, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1071
 *             return "SUBT_LJ"
 * 
 *         def valid_keys(self):             # <<<<<<<<<<<<<<
 *             return "r", "k"
 * 
 */
  __pyx_tuple__174 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__174)) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__174);
  __Pyx_GIVEREF(__pyx_tuple__174);
  __pyx_codeobj__175 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__174, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_valid_keys, 1071, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__175)) __PYX_ERR(0, 1071, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1074
 *             return "r", "k"
 * 
 *         def required_keys(self):             # <<<<<<<<<<<<<<
 *             return "r", "k"
 * 
 */
  __pyx_tuple__176 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__176)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__176);
  __Pyx_GIVEREF(__pyx_tuple__176);
  __pyx_codeobj__177 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__176, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_required_keys, 1074, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__177)) __PYX_ERR(0, 1074, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1077
 *             return "r", "k"
 * 
 *         def set_default_params(self):             # <<<<<<<<<<<<<<
 *             self._params = {"k": 0, "r": 0}
 * 
 */
  __pyx_tuple__178 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__178)) __PYX_ERR(0, 1077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__178);
  __Pyx_GIVEREF(__pyx_tuple__178);
  __pyx_codeobj__179 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__178, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_set_default_params, 1077, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__179)) __PYX_ERR(0, 1077, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1080
 *             self._params = {"k": 0, "r": 0}
 * 
 *         def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *             return \
 *                 {"k": bonded_ia_params[self._bond_id].p.subt_lj.k,
 */
  __pyx_tuple__180 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__180)) __PYX_ERR(0, 1080, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__180);
  __Pyx_GIVEREF(__pyx_tuple__180);
  __pyx_codeobj__181 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__180, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_get_params_from_es_core, 1080, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__181)) __PYX_ERR(0, 1080, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1085
 *                  "r": bonded_ia_params[self._bond_id].p.subt_lj.r}
 * 
 *         def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *             subt_lj_set_params(
 *                 self._bond_id, self._params["k"], self._params["r"])
 */
  __pyx_tuple__182 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__182)) __PYX_ERR(0, 1085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__182);
  __Pyx_GIVEREF(__pyx_tuple__182);
  __pyx_codeobj__183 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__182, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_set_params_in_es_core, 1085, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__183)) __PYX_ERR(0, 1085, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1281
 * class Oif_Global_Forces(BondedInteraction):
 * 
 *     def type_number(self):             # <<<<<<<<<<<<<<
 *         return BONDED_IA_OIF_GLOBAL_FORCES
 * 
 */
  __pyx_tuple__184 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__184)) __PYX_ERR(0, 1281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__184);
  __Pyx_GIVEREF(__pyx_tuple__184);
  __pyx_codeobj__185 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__184, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_type_number, 1281, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__185)) __PYX_ERR(0, 1281, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1284
 *         return BONDED_IA_OIF_GLOBAL_FORCES
 * 
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         return "OIF_GLOBAL_FORCES"
 * 
 */
  __pyx_tuple__186 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__186)) __PYX_ERR(0, 1284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__186);
  __Pyx_GIVEREF(__pyx_tuple__186);
  __pyx_codeobj__187 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__186, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_type_name, 1284, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__187)) __PYX_ERR(0, 1284, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1287
 *         return "OIF_GLOBAL_FORCES"
 * 
 *     def valid_keys(self):             # <<<<<<<<<<<<<<
 *         return "A0_g", "ka_g", "V0", "kv"
 * 
 */
  __pyx_tuple__188 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__188)) __PYX_ERR(0, 1287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__188);
  __Pyx_GIVEREF(__pyx_tuple__188);
  __pyx_codeobj__189 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__188, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_valid_keys, 1287, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__189)) __PYX_ERR(0, 1287, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1290
 *         return "A0_g", "ka_g", "V0", "kv"
 * 
 *     def required_keys(self):             # <<<<<<<<<<<<<<
 *         return "A0_g", "ka_g", "V0", "kv"
 * 
 */
  __pyx_tuple__190 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__190)) __PYX_ERR(0, 1290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__190);
  __Pyx_GIVEREF(__pyx_tuple__190);
  __pyx_codeobj__191 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__190, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_required_keys, 1290, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__191)) __PYX_ERR(0, 1290, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1293
 *         return "A0_g", "ka_g", "V0", "kv"
 * 
 *     def set_default_params(self):             # <<<<<<<<<<<<<<
 *         self._params = {"A0_g": 1., "ka_g": 0., "V0": 1., "kv": 0.}
 * 
 */
  __pyx_tuple__192 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__192)) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__192);
  __Pyx_GIVEREF(__pyx_tuple__192);
  __pyx_codeobj__193 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__192, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_set_default_params, 1293, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__193)) __PYX_ERR(0, 1293, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1296
 *         self._params = {"A0_g": 1., "ka_g": 0., "V0": 1., "kv": 0.}
 * 
 *     def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *         return \
 *             {"A0_g": bonded_ia_params[self._bond_id].p.oif_global_forces.A0_g,
 */
  __pyx_tuple__194 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__194)) __PYX_ERR(0, 1296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__194);
  __Pyx_GIVEREF(__pyx_tuple__194);
  __pyx_codeobj__195 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__194, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_get_params_from_es_core, 1296, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__195)) __PYX_ERR(0, 1296, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1303
 *              "kv": bonded_ia_params[self._bond_id].p.oif_global_forces.kv}
 * 
 *     def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *         oif_global_forces_set_params(
 *             self._bond_id, self._params["A0_g"], self._params["ka_g"], self._params["V0"], self._params["kv"])
 */
  __pyx_tuple__196 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__196)) __PYX_ERR(0, 1303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__196);
  __Pyx_GIVEREF(__pyx_tuple__196);
  __pyx_codeobj__197 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__196, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_set_params_in_es_core, 1303, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__197)) __PYX_ERR(0, 1303, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1310
 * class Oif_Local_Forces(BondedInteraction):
 * 
 *     def type_number(self):             # <<<<<<<<<<<<<<
 *         return BONDED_IA_OIF_LOCAL_FORCES
 * 
 */
  __pyx_tuple__198 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__198)) __PYX_ERR(0, 1310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__198);
  __Pyx_GIVEREF(__pyx_tuple__198);
  __pyx_codeobj__199 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__198, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_type_number, 1310, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__199)) __PYX_ERR(0, 1310, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1313
 *         return BONDED_IA_OIF_LOCAL_FORCES
 * 
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         return "OIF_LOCAL_FORCES"
 * 
 */
  __pyx_tuple__200 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__200)) __PYX_ERR(0, 1313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__200);
  __Pyx_GIVEREF(__pyx_tuple__200);
  __pyx_codeobj__201 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__200, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_type_name, 1313, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__201)) __PYX_ERR(0, 1313, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1316
 *         return "OIF_LOCAL_FORCES"
 * 
 *     def valid_keys(self):             # <<<<<<<<<<<<<<
 *         return "r0", "ks", "kslin", "phi0", "kb", "A01", "A02", "kal"
 * 
 */
  __pyx_tuple__202 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__202)) __PYX_ERR(0, 1316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__202);
  __Pyx_GIVEREF(__pyx_tuple__202);
  __pyx_codeobj__203 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__202, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_valid_keys, 1316, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__203)) __PYX_ERR(0, 1316, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1319
 *         return "r0", "ks", "kslin", "phi0", "kb", "A01", "A02", "kal"
 * 
 *     def required_keys(self):             # <<<<<<<<<<<<<<
 *         return "r0", "ks", "kslin", "phi0", "kb", "A01", "A02", "kal"
 * 
 */
  __pyx_tuple__204 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__204)) __PYX_ERR(0, 1319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__204);
  __Pyx_GIVEREF(__pyx_tuple__204);
  __pyx_codeobj__205 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__204, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_required_keys, 1319, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__205)) __PYX_ERR(0, 1319, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1322
 *         return "r0", "ks", "kslin", "phi0", "kb", "A01", "A02", "kal"
 * 
 *     def set_default_params(self):             # <<<<<<<<<<<<<<
 *         self._params = {"r0": 1., "ks": 0., "kslin": 0.,
 *                         "phi0": 0., "kb": 0., "A01": 0., "A02": 0., "kal": 0.}
 */
  __pyx_tuple__206 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__206)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__206);
  __Pyx_GIVEREF(__pyx_tuple__206);
  __pyx_codeobj__207 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__206, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_set_default_params, 1322, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__207)) __PYX_ERR(0, 1322, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1326
 *                         "phi0": 0., "kb": 0., "A01": 0., "A02": 0., "kal": 0.}
 * 
 *     def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *         return \
 *             {"r0": bonded_ia_params[self._bond_id].p.oif_local_forces.r0,
 */
  __pyx_tuple__208 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__208)) __PYX_ERR(0, 1326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__208);
  __Pyx_GIVEREF(__pyx_tuple__208);
  __pyx_codeobj__209 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__208, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_get_params_from_es_core, 1326, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__209)) __PYX_ERR(0, 1326, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1337
 *              "kal": bonded_ia_params[self._bond_id].p.oif_local_forces.kal}
 * 
 *     def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *         oif_local_forces_set_params(
 *             self._bond_id, self._params["r0"], self._params["ks"], self._params["kslin"], self._params["phi0"], self._params["kb"], self._params["A01"], self._params["A02"], self._params["kal"])
 */
  __pyx_tuple__210 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__210)) __PYX_ERR(0, 1337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__210);
  __Pyx_GIVEREF(__pyx_tuple__210);
  __pyx_codeobj__211 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__210, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_set_params_in_es_core, 1337, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__211)) __PYX_ERR(0, 1337, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1368
 *     from bonded_interaction_classes"""
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         if not isinstance(key, int):
 *             raise ValueError(
 */
  __pyx_tuple__212 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_bond_type, __pyx_n_s_bond_class); if (unlikely(!__pyx_tuple__212)) __PYX_ERR(0, 1368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__212);
  __Pyx_GIVEREF(__pyx_tuple__212);
  __pyx_codeobj__213 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__212, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_getitem, 1368, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__213)) __PYX_ERR(0, 1368, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1388
 *         return bond_class(key)
 * 
 *     def __setitem__(self, key, value):             # <<<<<<<<<<<<<<
 *         # Validate arguments
 * 
 */
  __pyx_tuple__214 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_value); if (unlikely(!__pyx_tuple__214)) __PYX_ERR(0, 1388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__214);
  __Pyx_GIVEREF(__pyx_tuple__214);
  __pyx_codeobj__215 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__214, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_setitem, 1388, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__215)) __PYX_ERR(0, 1388, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1408
 * 
 *     # Support iteration over active bonded interactions
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         for i in range(n_bonded_ia):
 *             if bonded_ia_params[i].type != -1:
 */
  __pyx_tuple__216 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_i); if (unlikely(!__pyx_tuple__216)) __PYX_ERR(0, 1408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__216);
  __Pyx_GIVEREF(__pyx_tuple__216);
  __pyx_codeobj__217 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__216, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_iter, 1408, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__217)) __PYX_ERR(0, 1408, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1413
 *                 yield self[i]
 * 
 *     def add(self, bonded_ia):             # <<<<<<<<<<<<<<
 *         """Add a bonded ia to the simulation>"""
 *         self[n_bonded_ia] = bonded_ia
 */
  __pyx_tuple__218 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_bonded_ia); if (unlikely(!__pyx_tuple__218)) __PYX_ERR(0, 1413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__218);
  __Pyx_GIVEREF(__pyx_tuple__218);
  __pyx_codeobj__219 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__218, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_add, 1413, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__219)) __PYX_ERR(0, 1413, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1417
 *         self[n_bonded_ia] = bonded_ia
 * 
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         params = {}
 *         for i,bonded_instance in enumerate(self):
 */
  __pyx_tuple__220 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_params_2, __pyx_n_s_i, __pyx_n_s_bonded_instance); if (unlikely(!__pyx_tuple__220)) __PYX_ERR(0, 1417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__220);
  __Pyx_GIVEREF(__pyx_tuple__220);
  __pyx_codeobj__221 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__220, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_getstate, 1417, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__221)) __PYX_ERR(0, 1417, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1427
 *         return params
 * 
 *     def __setstate__(self, params):             # <<<<<<<<<<<<<<
 *         for i in params:
 *             if params[i] != None:
 */
  __pyx_tuple__222 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_params_2, __pyx_n_s_i, __pyx_n_s_bond_type); if (unlikely(!__pyx_tuple__222)) __PYX_ERR(0, 1427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__222);
  __Pyx_GIVEREF(__pyx_tuple__222);
  __pyx_codeobj__223 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__222, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_bindgens2_Documents_espre, __pyx_n_s_setstate, 1427, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__223)) __PYX_ERR(0, 1427, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_keys.type = (PyObject*)&PyDict_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_ = PyFloat_FromDouble(0.); if (unlikely(!__pyx_float_0_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_ = PyFloat_FromDouble(1.); if (unlikely(!__pyx_float_1_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_12 = PyInt_FromLong(12); if (unlikely(!__pyx_int_12)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initinteractions(void); /*proto*/
PyMODINIT_FUNC initinteractions(void)
#else
PyMODINIT_FUNC PyInit_interactions(void); /*proto*/
PyMODINIT_FUNC PyInit_interactions(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_interactions(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("interactions", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_espressomd__interactions) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "espressomd.interactions")) {
      if (unlikely(PyDict_SetItemString(modules, "espressomd.interactions", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_10espressomd_12interactions_NonBondedInteraction) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __pyx_type_10espressomd_12interactions_NonBondedInteraction.tp_print = 0;
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_10espressomd_12interactions_NonBondedInteraction, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 24, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_10espressomd_12interactions_20NonBondedInteraction___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_10espressomd_12interactions_20NonBondedInteraction___init__.doc = __pyx_doc_10espressomd_12interactions_20NonBondedInteraction___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_10espressomd_12interactions_20NonBondedInteraction___init__;
    }
  }
  #endif
  if (PyObject_SetAttrString(__pyx_m, "NonBondedInteraction", (PyObject *)&__pyx_type_10espressomd_12interactions_NonBondedInteraction) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __pyx_ptype_10espressomd_12interactions_NonBondedInteraction = &__pyx_type_10espressomd_12interactions_NonBondedInteraction;
  __pyx_type_10espressomd_12interactions_LennardJonesInteraction.tp_base = __pyx_ptype_10espressomd_12interactions_NonBondedInteraction;
  if (PyType_Ready(&__pyx_type_10espressomd_12interactions_LennardJonesInteraction) < 0) __PYX_ERR(0, 181, __pyx_L1_error)
  __pyx_type_10espressomd_12interactions_LennardJonesInteraction.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "LennardJonesInteraction", (PyObject *)&__pyx_type_10espressomd_12interactions_LennardJonesInteraction) < 0) __PYX_ERR(0, 181, __pyx_L1_error)
  __pyx_ptype_10espressomd_12interactions_LennardJonesInteraction = &__pyx_type_10espressomd_12interactions_LennardJonesInteraction;
  if (PyType_Ready(&__pyx_type_10espressomd_12interactions_NonBondedInteractions) < 0) __PYX_ERR(0, 425, __pyx_L1_error)
  __pyx_type_10espressomd_12interactions_NonBondedInteractions.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "NonBondedInteractions", (PyObject *)&__pyx_type_10espressomd_12interactions_NonBondedInteractions) < 0) __PYX_ERR(0, 425, __pyx_L1_error)
  __pyx_ptype_10espressomd_12interactions_NonBondedInteractions = &__pyx_type_10espressomd_12interactions_NonBondedInteractions;
  if (PyType_Ready(&__pyx_type_10espressomd_12interactions_BondedInteraction) < 0) __PYX_ERR(0, 477, __pyx_L1_error)
  __pyx_type_10espressomd_12interactions_BondedInteraction.tp_print = 0;
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_10espressomd_12interactions_BondedInteraction, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 477, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_10espressomd_12interactions_17BondedInteraction___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_10espressomd_12interactions_17BondedInteraction___init__.doc = __pyx_doc_10espressomd_12interactions_17BondedInteraction___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_10espressomd_12interactions_17BondedInteraction___init__;
    }
  }
  #endif
  if (PyObject_SetAttrString(__pyx_m, "BondedInteraction", (PyObject *)&__pyx_type_10espressomd_12interactions_BondedInteraction) < 0) __PYX_ERR(0, 477, __pyx_L1_error)
  __pyx_ptype_10espressomd_12interactions_BondedInteraction = &__pyx_type_10espressomd_12interactions_BondedInteraction;
  if (PyType_Ready(&__pyx_type_10espressomd_12interactions___pyx_scope_struct____getattribute__) < 0) __PYX_ERR(0, 133, __pyx_L1_error)
  __pyx_type_10espressomd_12interactions___pyx_scope_struct____getattribute__.tp_print = 0;
  __pyx_ptype_10espressomd_12interactions___pyx_scope_struct____getattribute__ = &__pyx_type_10espressomd_12interactions___pyx_scope_struct____getattribute__;
  if (PyType_Ready(&__pyx_type_10espressomd_12interactions___pyx_scope_struct_1___getattribute__) < 0) __PYX_ERR(0, 555, __pyx_L1_error)
  __pyx_type_10espressomd_12interactions___pyx_scope_struct_1___getattribute__.tp_print = 0;
  __pyx_ptype_10espressomd_12interactions___pyx_scope_struct_1___getattribute__ = &__pyx_type_10espressomd_12interactions___pyx_scope_struct_1___getattribute__;
  if (PyType_Ready(&__pyx_type_10espressomd_12interactions___pyx_scope_struct_2___iter__) < 0) __PYX_ERR(0, 1408, __pyx_L1_error)
  __pyx_type_10espressomd_12interactions___pyx_scope_struct_2___iter__.tp_print = 0;
  __pyx_ptype_10espressomd_12interactions___pyx_scope_struct_2___iter__ = &__pyx_type_10espressomd_12interactions___pyx_scope_struct_2___iter__;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(2, 9, __pyx_L1_error)
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(1, 155, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(1, 168, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(1, 172, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(1, 181, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(1, 861, __pyx_L1_error)
  /*--- Variable import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("espressomd._system"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "skin_set", (void **)&__pyx_vp_10espressomd_7_system_skin_set, "bool") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "espressomd/interactions.pyx":21
 * from __future__ import print_function, absolute_import
 * include "myconfig.pxi"
 * from . import utils             # <<<<<<<<<<<<<<
 * # Non-bonded interactions
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_utils);
  __Pyx_GIVEREF(__pyx_n_s_utils);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_utils);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s__75, __pyx_t_2, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_utils); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_utils, __pyx_t_2) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "espressomd/interactions.pyx":31
 *     # init dict to access all user defined nonbonded-inters via
 *     # user_interactions[type1][type2][parameter]
 *     user_interactions = {}             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10espressomd_12interactions_NonBondedInteraction->tp_dict, __pyx_n_s_user_interactions, __pyx_t_3) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_10espressomd_12interactions_NonBondedInteraction);

  /* "espressomd/interactions.pyx":395
 * 
 * 
 * class NonBondedInteractionHandle(object):             # <<<<<<<<<<<<<<
 * 
 *     """Provides access to all Non-bonded interactions between
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_builtin_object);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_3, __pyx_n_s_NonBondedInteractionHandle, __pyx_n_s_NonBondedInteractionHandle, (PyObject *) NULL, __pyx_n_s_espressomd_interactions, __pyx_kp_s_Provides_access_to_all_Non_bonde); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "espressomd/interactions.pyx":400
 *     two particle types."""
 * 
 *     type1 = -1             # <<<<<<<<<<<<<<
 *     type2 = -1
 * 
 */
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_type1_2, __pyx_int_neg_1) < 0) __PYX_ERR(0, 400, __pyx_L1_error)

  /* "espressomd/interactions.pyx":401
 * 
 *     type1 = -1
 *     type2 = -1             # <<<<<<<<<<<<<<
 * 
 *     # Here, one line per non-bonded ia
 */
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_type2_2, __pyx_int_neg_1) < 0) __PYX_ERR(0, 401, __pyx_L1_error)

  /* "espressomd/interactions.pyx":404
 * 
 *     # Here, one line per non-bonded ia
 *     lennard_jones = None             # <<<<<<<<<<<<<<
 *     generic_lennard_jones = None
 *     tabulated = None
 */
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_lennard_jones, Py_None) < 0) __PYX_ERR(0, 404, __pyx_L1_error)

  /* "espressomd/interactions.pyx":405
 *     # Here, one line per non-bonded ia
 *     lennard_jones = None
 *     generic_lennard_jones = None             # <<<<<<<<<<<<<<
 *     tabulated = None
 * 
 */
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_generic_lennard_jones, Py_None) < 0) __PYX_ERR(0, 405, __pyx_L1_error)

  /* "espressomd/interactions.pyx":406
 *     lennard_jones = None
 *     generic_lennard_jones = None
 *     tabulated = None             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, _type1, _type2):
 */
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_tabulated, Py_None) < 0) __PYX_ERR(0, 406, __pyx_L1_error)

  /* "espressomd/interactions.pyx":408
 *     tabulated = None
 * 
 *     def __init__(self, _type1, _type2):             # <<<<<<<<<<<<<<
 *         """Takes two particle types as argument"""
 *         if not (isinstance(_type1, int) and isinstance(_type2, int)):
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_26NonBondedInteractionHandle_1__init__, 0, __pyx_n_s_NonBondedInteractionHandle___ini, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__77)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_init, __pyx_t_5) < 0) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":395
 * 
 * 
 * class NonBondedInteractionHandle(object):             # <<<<<<<<<<<<<<
 * 
 *     """Provides access to all Non-bonded interactions between
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_NonBondedInteractionHandle, __pyx_t_3, __pyx_t_4, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NonBondedInteractionHandle, __pyx_t_5) < 0) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "espressomd/interactions.pyx":480
 * 
 *     # This means, the instance does not yet represent a bond in the simulation
 *     _bond_id = -1             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10espressomd_12interactions_BondedInteraction->tp_dict, __pyx_n_s_bond_id, __pyx_int_neg_1) < 0) __PYX_ERR(0, 480, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10espressomd_12interactions_BondedInteraction);

  /* "espressomd/interactions.pyx":617
 * 
 * 
 * class BondedInteractionNotDefined(object):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_builtin_object);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_3, __pyx_n_s_BondedInteractionNotDefined, __pyx_n_s_BondedInteractionNotDefined, (PyObject *) NULL, __pyx_n_s_espressomd_interactions, (PyObject *) NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "espressomd/interactions.pyx":619
 * class BondedInteractionNotDefined(object):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             self.__class__.__name__ + " not compiled into Espresso core")
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_27BondedInteractionNotDefined_1__init__, 0, __pyx_n_s_BondedInteractionNotDefined___in, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__79)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_init, __pyx_t_5) < 0) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":623
 *             self.__class__.__name__ + " not compiled into Espresso core")
 * 
 *     def type_number(self):             # <<<<<<<<<<<<<<
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_27BondedInteractionNotDefined_3type_number, 0, __pyx_n_s_BondedInteractionNotDefined_type, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__81)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_type_number, __pyx_t_5) < 0) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":626
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_27BondedInteractionNotDefined_5type_name, 0, __pyx_n_s_BondedInteractionNotDefined_type_2, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__83)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_type_name, __pyx_t_5) < 0) __PYX_ERR(0, 626, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":629
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 *     def valid_keys(self):             # <<<<<<<<<<<<<<
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_27BondedInteractionNotDefined_7valid_keys, 0, __pyx_n_s_BondedInteractionNotDefined_vali, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__85)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_valid_keys, __pyx_t_5) < 0) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":632
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 *     def required_keys(self):             # <<<<<<<<<<<<<<
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_27BondedInteractionNotDefined_9required_keys, 0, __pyx_n_s_BondedInteractionNotDefined_requ, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__87)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_required_keys, __pyx_t_5) < 0) __PYX_ERR(0, 632, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":635
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 *     def set_default_params(self):             # <<<<<<<<<<<<<<
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_27BondedInteractionNotDefined_11set_default_params, 0, __pyx_n_s_BondedInteractionNotDefined_set, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__89)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_set_default_params, __pyx_t_5) < 0) __PYX_ERR(0, 635, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":638
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 *     def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_27BondedInteractionNotDefined_13_get_params_from_es_core, 0, __pyx_n_s_BondedInteractionNotDefined__get, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__91)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_get_params_from_es_core, __pyx_t_5) < 0) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":641
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 *     def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *         raise Exception(("%s has to be defined in myconfig.hpp.") % self.name)
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_27BondedInteractionNotDefined_15_set_params_in_es_core, 0, __pyx_n_s_BondedInteractionNotDefined__set, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__93)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_set_params_in_es_core, __pyx_t_5) < 0) __PYX_ERR(0, 641, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":617
 * 
 * 
 * class BondedInteractionNotDefined(object):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_BondedInteractionNotDefined, __pyx_t_3, __pyx_t_4, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BondedInteractionNotDefined, __pyx_t_5) < 0) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "espressomd/interactions.pyx":645
 * 
 * 
 * class FeneBond(BondedInteraction):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_10espressomd_12interactions_BondedInteraction));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_10espressomd_12interactions_BondedInteraction));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_ptype_10espressomd_12interactions_BondedInteraction));
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_3, __pyx_n_s_FeneBond, __pyx_n_s_FeneBond, (PyObject *) NULL, __pyx_n_s_espressomd_interactions, (PyObject *) NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "espressomd/interactions.pyx":647
 * class FeneBond(BondedInteraction):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         """
 *         FeneBond initialiser. Used to instatiate a FeneBond identifier
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_8FeneBond_1__init__, 0, __pyx_n_s_FeneBond___init, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__95)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_init, __pyx_t_5) < 0) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":664
 *         super(FeneBond, self).__init__(*args, **kwargs)
 * 
 *     def type_number(self):             # <<<<<<<<<<<<<<
 *         return BONDED_IA_FENE
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_8FeneBond_3type_number, 0, __pyx_n_s_FeneBond_type_number, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__97)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_type_number, __pyx_t_5) < 0) __PYX_ERR(0, 664, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":667
 *         return BONDED_IA_FENE
 * 
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         return "FENE"
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_8FeneBond_5type_name, 0, __pyx_n_s_FeneBond_type_name, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__99)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_type_name, __pyx_t_5) < 0) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":670
 *         return "FENE"
 * 
 *     def valid_keys(self):             # <<<<<<<<<<<<<<
 *         return "k", "d_r_max", "r_0"
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_8FeneBond_7valid_keys, 0, __pyx_n_s_FeneBond_valid_keys, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__101)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_valid_keys, __pyx_t_5) < 0) __PYX_ERR(0, 670, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":673
 *         return "k", "d_r_max", "r_0"
 * 
 *     def required_keys(self):             # <<<<<<<<<<<<<<
 *         return "k", "d_r_max"
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_8FeneBond_9required_keys, 0, __pyx_n_s_FeneBond_required_keys, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__103)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_required_keys, __pyx_t_5) < 0) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":676
 *         return "k", "d_r_max"
 * 
 *     def set_default_params(self):             # <<<<<<<<<<<<<<
 *         self._params = {"r_0": 0.}
 *         # Everything else has to be supplied by the user, anyway
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_8FeneBond_11set_default_params, 0, __pyx_n_s_FeneBond_set_default_params, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__105)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_set_default_params, __pyx_t_5) < 0) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":680
 *         # Everything else has to be supplied by the user, anyway
 * 
 *     def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *         return \
 *             {"k": bonded_ia_params[self._bond_id].p.fene.k,
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_8FeneBond_13_get_params_from_es_core, 0, __pyx_n_s_FeneBond__get_params_from_es_cor, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__107)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_get_params_from_es_core, __pyx_t_5) < 0) __PYX_ERR(0, 680, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":686
 *              "r_0": bonded_ia_params[self._bond_id].p.fene.r0}
 * 
 *     def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *         fene_set_params(
 *             self._bond_id, self._params["k"], self._params["d_r_max"], self._params["r_0"])
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_8FeneBond_15_set_params_in_es_core, 0, __pyx_n_s_FeneBond__set_params_in_es_core, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__109)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_set_params_in_es_core, __pyx_t_5) < 0) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":645
 * 
 * 
 * class FeneBond(BondedInteraction):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_FeneBond, __pyx_t_3, __pyx_t_4, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FeneBond, __pyx_t_5) < 0) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "espressomd/interactions.pyx":691
 * 
 * 
 * class HarmonicBond(BondedInteraction):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_10espressomd_12interactions_BondedInteraction));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_10espressomd_12interactions_BondedInteraction));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_ptype_10espressomd_12interactions_BondedInteraction));
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_3, __pyx_n_s_HarmonicBond, __pyx_n_s_HarmonicBond, (PyObject *) NULL, __pyx_n_s_espressomd_interactions, (PyObject *) NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "espressomd/interactions.pyx":693
 * class HarmonicBond(BondedInteraction):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         """
 *         HarmonicBond initialiser. Used to instatiate a HarmonicBond identifier
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_12HarmonicBond_1__init__, 0, __pyx_n_s_HarmonicBond___init, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__111)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_init, __pyx_t_5) < 0) __PYX_ERR(0, 693, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":711
 * 
 * 
 *     def type_number(self):             # <<<<<<<<<<<<<<
 *         return BONDED_IA_HARMONIC
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_12HarmonicBond_3type_number, 0, __pyx_n_s_HarmonicBond_type_number, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__113)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_type_number, __pyx_t_5) < 0) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":714
 *         return BONDED_IA_HARMONIC
 * 
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         return "HARMONIC"
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_12HarmonicBond_5type_name, 0, __pyx_n_s_HarmonicBond_type_name, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__115)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_type_name, __pyx_t_5) < 0) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":717
 *         return "HARMONIC"
 * 
 *     def valid_keys(self):             # <<<<<<<<<<<<<<
 *         return "k", "r_0", "r_cut"
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_12HarmonicBond_7valid_keys, 0, __pyx_n_s_HarmonicBond_valid_keys, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__117)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_valid_keys, __pyx_t_5) < 0) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":720
 *         return "k", "r_0", "r_cut"
 * 
 *     def required_keys(self):             # <<<<<<<<<<<<<<
 *         return "k", "r_0"
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_12HarmonicBond_9required_keys, 0, __pyx_n_s_HarmonicBond_required_keys, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__119)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_required_keys, __pyx_t_5) < 0) __PYX_ERR(0, 720, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":723
 *         return "k", "r_0"
 * 
 *     def set_default_params(self):             # <<<<<<<<<<<<<<
 *         self._params = {"k'": 0., "r_0": 0., "r_cut": 0.}
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_12HarmonicBond_11set_default_params, 0, __pyx_n_s_HarmonicBond_set_default_params, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__121)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_set_default_params, __pyx_t_5) < 0) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":726
 *         self._params = {"k'": 0., "r_0": 0., "r_cut": 0.}
 * 
 *     def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *         return \
 *             {"k": bonded_ia_params[self._bond_id].p.harmonic.k,
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_12HarmonicBond_13_get_params_from_es_core, 0, __pyx_n_s_HarmonicBond__get_params_from_es, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__123)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_get_params_from_es_core, __pyx_t_5) < 0) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":732
 *              "r_cut": bonded_ia_params[self._bond_id].p.harmonic.r_cut}
 * 
 *     def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *         harmonic_set_params(
 *             self._bond_id, self._params["k"], self._params["r_0"], self._params["r_cut"])
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_12HarmonicBond_15_set_params_in_es_core, 0, __pyx_n_s_HarmonicBond__set_params_in_es_c, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__125)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_set_params_in_es_core, __pyx_t_5) < 0) __PYX_ERR(0, 732, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":691
 * 
 * 
 * class HarmonicBond(BondedInteraction):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_HarmonicBond, __pyx_t_3, __pyx_t_4, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HarmonicBond, __pyx_t_5) < 0) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "espressomd/interactions.pyx":789
 * 
 * IF ROTATION != 1:
 *     class HarmonicDumbbellBond(BondedInteraction):             # <<<<<<<<<<<<<<
 * 
 *         def __init__(self, *args, **kwargs):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_10espressomd_12interactions_BondedInteraction));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_10espressomd_12interactions_BondedInteraction));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_ptype_10espressomd_12interactions_BondedInteraction));
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_3, __pyx_n_s_HarmonicDumbbellBond, __pyx_n_s_HarmonicDumbbellBond, (PyObject *) NULL, __pyx_n_s_espressomd_interactions, (PyObject *) NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "espressomd/interactions.pyx":791
 *     class HarmonicDumbbellBond(BondedInteraction):
 * 
 *         def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *             """
 *             HarmonicDumbbellBond initialiser. Used to instatiate a
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_20HarmonicDumbbellBond_1__init__, 0, __pyx_n_s_HarmonicDumbbellBond___init, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__127)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_init, __pyx_t_5) < 0) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":812
 * 
 * 
 *         def type_number(self):             # <<<<<<<<<<<<<<
 *             raise Exception(
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_20HarmonicDumbbellBond_3type_number, 0, __pyx_n_s_HarmonicDumbbellBond_type_number, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__129)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_type_number, __pyx_t_5) < 0) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":816
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 *         def type_name(self):             # <<<<<<<<<<<<<<
 *             raise Exception(
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_20HarmonicDumbbellBond_5type_name, 0, __pyx_n_s_HarmonicDumbbellBond_type_name, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__131)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_type_name, __pyx_t_5) < 0) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":820
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 *         def valid_keys(self):             # <<<<<<<<<<<<<<
 *             raise Exception(
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_20HarmonicDumbbellBond_7valid_keys, 0, __pyx_n_s_HarmonicDumbbellBond_valid_keys, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__133)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_valid_keys, __pyx_t_5) < 0) __PYX_ERR(0, 820, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":824
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 *         def required_keys(self):             # <<<<<<<<<<<<<<
 *             raise Exception(
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_20HarmonicDumbbellBond_9required_keys, 0, __pyx_n_s_HarmonicDumbbellBond_required_ke, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__135)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_required_keys, __pyx_t_5) < 0) __PYX_ERR(0, 824, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":828
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 *         def set_default_params(self):             # <<<<<<<<<<<<<<
 *             raise Exception(
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_20HarmonicDumbbellBond_11set_default_params, 0, __pyx_n_s_HarmonicDumbbellBond_set_default, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__137)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_set_default_params, __pyx_t_5) < 0) __PYX_ERR(0, 828, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":832
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 *         def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *             raise Exception(
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_20HarmonicDumbbellBond_13_get_params_from_es_core, 0, __pyx_n_s_HarmonicDumbbellBond__get_params, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__139)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_get_params_from_es_core, __pyx_t_5) < 0) __PYX_ERR(0, 832, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":836
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 * 
 *         def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *             raise Exception(
 *                 "HarmonicDumbbellBond: ROTATION has to be defined in myconfig.hpp.")
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_20HarmonicDumbbellBond_15_set_params_in_es_core, 0, __pyx_n_s_HarmonicDumbbellBond__set_params, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__141)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_set_params_in_es_core, __pyx_t_5) < 0) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":789
 * 
 * IF ROTATION != 1:
 *     class HarmonicDumbbellBond(BondedInteraction):             # <<<<<<<<<<<<<<
 * 
 *         def __init__(self, *args, **kwargs):
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_HarmonicDumbbellBond, __pyx_t_3, __pyx_t_4, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HarmonicDumbbellBond, __pyx_t_5) < 0) __PYX_ERR(0, 789, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "espressomd/interactions.pyx":886
 *                 self._bond_id, self._params["r"], self._params["ptol"], self._params["vtol"])
 * ELSE:
 *     class RigidBond(BondedInteractionNotDefined):             # <<<<<<<<<<<<<<
 *         name = "RIGID"
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_BondedInteractionNotDefined); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3MetaclassPrepare(__pyx_t_3, __pyx_t_2, __pyx_n_s_RigidBond, __pyx_n_s_RigidBond, (PyObject *) NULL, __pyx_n_s_espressomd_interactions, (PyObject *) NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "espressomd/interactions.pyx":887
 * ELSE:
 *     class RigidBond(BondedInteractionNotDefined):
 *         name = "RIGID"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_name_2, __pyx_n_s_RIGID) < 0) __PYX_ERR(0, 887, __pyx_L1_error)

  /* "espressomd/interactions.pyx":886
 *                 self._bond_id, self._params["r"], self._params["ptol"], self._params["vtol"])
 * ELSE:
 *     class RigidBond(BondedInteractionNotDefined):             # <<<<<<<<<<<<<<
 *         name = "RIGID"
 * 
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_3, __pyx_n_s_RigidBond, __pyx_t_2, __pyx_t_4, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RigidBond, __pyx_t_5) < 0) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":890
 * 
 * 
 * class Dihedral(BondedInteraction):             # <<<<<<<<<<<<<<
 * 
 *     def type_number(self):
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_10espressomd_12interactions_BondedInteraction));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_10espressomd_12interactions_BondedInteraction));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_10espressomd_12interactions_BondedInteraction));
  __pyx_t_3 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3MetaclassPrepare(__pyx_t_3, __pyx_t_2, __pyx_n_s_Dihedral, __pyx_n_s_Dihedral, (PyObject *) NULL, __pyx_n_s_espressomd_interactions, (PyObject *) NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "espressomd/interactions.pyx":892
 * class Dihedral(BondedInteraction):
 * 
 *     def type_number(self):             # <<<<<<<<<<<<<<
 *         return BONDED_IA_DIHEDRAL
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_8Dihedral_1type_number, 0, __pyx_n_s_Dihedral_type_number, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__143)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_type_number, __pyx_t_5) < 0) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":895
 *         return BONDED_IA_DIHEDRAL
 * 
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         return "DIHEDRAL"
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_8Dihedral_3type_name, 0, __pyx_n_s_Dihedral_type_name, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__145)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_type_name, __pyx_t_5) < 0) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":898
 *         return "DIHEDRAL"
 * 
 *     def valid_keys(self):             # <<<<<<<<<<<<<<
 *         return "mult", "bend", "phase"
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_8Dihedral_5valid_keys, 0, __pyx_n_s_Dihedral_valid_keys, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__147)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_valid_keys, __pyx_t_5) < 0) __PYX_ERR(0, 898, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":901
 *         return "mult", "bend", "phase"
 * 
 *     def required_keys(self):             # <<<<<<<<<<<<<<
 *         return "mult", "bend", "phase"
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_8Dihedral_7required_keys, 0, __pyx_n_s_Dihedral_required_keys, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__149)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_required_keys, __pyx_t_5) < 0) __PYX_ERR(0, 901, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":904
 *         return "mult", "bend", "phase"
 * 
 *     def set_default_params(self):             # <<<<<<<<<<<<<<
 *         self._params = {"mult'": 1., "bend": 0., "phase": 0.}
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_8Dihedral_9set_default_params, 0, __pyx_n_s_Dihedral_set_default_params, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__151)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_set_default_params, __pyx_t_5) < 0) __PYX_ERR(0, 904, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":907
 *         self._params = {"mult'": 1., "bend": 0., "phase": 0.}
 * 
 *     def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *         return \
 *             {"mult": bonded_ia_params[self._bond_id].p.dihedral.mult,
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_8Dihedral_11_get_params_from_es_core, 0, __pyx_n_s_Dihedral__get_params_from_es_cor, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__153)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_get_params_from_es_core, __pyx_t_5) < 0) __PYX_ERR(0, 907, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":913
 *              "phase": bonded_ia_params[self._bond_id].p.dihedral.phase}
 * 
 *     def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *         dihedral_set_params(
 *             self._bond_id, self._params["mult"], self._params["bend"], self._params["phase"])
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_8Dihedral_13_set_params_in_es_core, 0, __pyx_n_s_Dihedral__set_params_in_es_core, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__155)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_set_params_in_es_core, __pyx_t_5) < 0) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":890
 * 
 * 
 * class Dihedral(BondedInteraction):             # <<<<<<<<<<<<<<
 * 
 *     def type_number(self):
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_3, __pyx_n_s_Dihedral, __pyx_t_2, __pyx_t_4, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Dihedral, __pyx_t_5) < 0) __PYX_ERR(0, 890, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":1038
 * 
 * IF TABULATED != 1:
 *     class Tabulated(BondedInteraction):             # <<<<<<<<<<<<<<
 * 
 *         def type_number(self):
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_10espressomd_12interactions_BondedInteraction));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_10espressomd_12interactions_BondedInteraction));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_10espressomd_12interactions_BondedInteraction));
  __pyx_t_3 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3MetaclassPrepare(__pyx_t_3, __pyx_t_2, __pyx_n_s_Tabulated, __pyx_n_s_Tabulated, (PyObject *) NULL, __pyx_n_s_espressomd_interactions, (PyObject *) NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "espressomd/interactions.pyx":1040
 *     class Tabulated(BondedInteraction):
 * 
 *         def type_number(self):             # <<<<<<<<<<<<<<
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_9Tabulated_1type_number, 0, __pyx_n_s_Tabulated_type_number, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__157)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1040, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_type_number, __pyx_t_5) < 0) __PYX_ERR(0, 1040, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1043
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 *         def type_name(self):             # <<<<<<<<<<<<<<
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_9Tabulated_3type_name, 0, __pyx_n_s_Tabulated_type_name, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__159)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1043, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_type_name, __pyx_t_5) < 0) __PYX_ERR(0, 1043, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1046
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 *         def valid_keys(self):             # <<<<<<<<<<<<<<
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_9Tabulated_5valid_keys, 0, __pyx_n_s_Tabulated_valid_keys, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__161)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_valid_keys, __pyx_t_5) < 0) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1049
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 *         def required_keys(self):             # <<<<<<<<<<<<<<
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_9Tabulated_7required_keys, 0, __pyx_n_s_Tabulated_required_keys, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__163)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_required_keys, __pyx_t_5) < 0) __PYX_ERR(0, 1049, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1052
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 *         def set_default_params(self):             # <<<<<<<<<<<<<<
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_9Tabulated_9set_default_params, 0, __pyx_n_s_Tabulated_set_default_params, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__165)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1052, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_set_default_params, __pyx_t_5) < 0) __PYX_ERR(0, 1052, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1055
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 *         def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_9Tabulated_11_get_params_from_es_core, 0, __pyx_n_s_Tabulated__get_params_from_es_co, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__167)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_get_params_from_es_core, __pyx_t_5) < 0) __PYX_ERR(0, 1055, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1058
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 *         def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *             raise Exception("TABULATED has to be defined in myconfig.hpp.")
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_9Tabulated_13_set_params_in_es_core, 0, __pyx_n_s_Tabulated__set_params_in_es_core, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__169)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_set_params_in_es_core, __pyx_t_5) < 0) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1038
 * 
 * IF TABULATED != 1:
 *     class Tabulated(BondedInteraction):             # <<<<<<<<<<<<<<
 * 
 *         def type_number(self):
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_3, __pyx_n_s_Tabulated, __pyx_t_2, __pyx_t_4, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Tabulated, __pyx_t_5) < 0) __PYX_ERR(0, 1038, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":1063
 * 
 * IF LENNARD_JONES == 1:
 *     class Subt_Lj(BondedInteraction):             # <<<<<<<<<<<<<<
 * 
 *         def type_number(self):
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_10espressomd_12interactions_BondedInteraction));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_10espressomd_12interactions_BondedInteraction));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_10espressomd_12interactions_BondedInteraction));
  __pyx_t_3 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3MetaclassPrepare(__pyx_t_3, __pyx_t_2, __pyx_n_s_Subt_Lj, __pyx_n_s_Subt_Lj, (PyObject *) NULL, __pyx_n_s_espressomd_interactions, (PyObject *) NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "espressomd/interactions.pyx":1065
 *     class Subt_Lj(BondedInteraction):
 * 
 *         def type_number(self):             # <<<<<<<<<<<<<<
 *             return BONDED_IA_SUBT_LJ
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_7Subt_Lj_1type_number, 0, __pyx_n_s_Subt_Lj_type_number, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__171)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_type_number, __pyx_t_5) < 0) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1068
 *             return BONDED_IA_SUBT_LJ
 * 
 *         def type_name(self):             # <<<<<<<<<<<<<<
 *             return "SUBT_LJ"
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_7Subt_Lj_3type_name, 0, __pyx_n_s_Subt_Lj_type_name, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__173)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_type_name, __pyx_t_5) < 0) __PYX_ERR(0, 1068, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1071
 *             return "SUBT_LJ"
 * 
 *         def valid_keys(self):             # <<<<<<<<<<<<<<
 *             return "r", "k"
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_7Subt_Lj_5valid_keys, 0, __pyx_n_s_Subt_Lj_valid_keys, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__175)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_valid_keys, __pyx_t_5) < 0) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1074
 *             return "r", "k"
 * 
 *         def required_keys(self):             # <<<<<<<<<<<<<<
 *             return "r", "k"
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_7Subt_Lj_7required_keys, 0, __pyx_n_s_Subt_Lj_required_keys, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__177)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_required_keys, __pyx_t_5) < 0) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1077
 *             return "r", "k"
 * 
 *         def set_default_params(self):             # <<<<<<<<<<<<<<
 *             self._params = {"k": 0, "r": 0}
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_7Subt_Lj_9set_default_params, 0, __pyx_n_s_Subt_Lj_set_default_params, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__179)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_set_default_params, __pyx_t_5) < 0) __PYX_ERR(0, 1077, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1080
 *             self._params = {"k": 0, "r": 0}
 * 
 *         def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *             return \
 *                 {"k": bonded_ia_params[self._bond_id].p.subt_lj.k,
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_7Subt_Lj_11_get_params_from_es_core, 0, __pyx_n_s_Subt_Lj__get_params_from_es_core, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__181)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1080, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_get_params_from_es_core, __pyx_t_5) < 0) __PYX_ERR(0, 1080, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1085
 *                  "r": bonded_ia_params[self._bond_id].p.subt_lj.r}
 * 
 *         def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *             subt_lj_set_params(
 *                 self._bond_id, self._params["k"], self._params["r"])
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_7Subt_Lj_13_set_params_in_es_core, 0, __pyx_n_s_Subt_Lj__set_params_in_es_core, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__183)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_set_params_in_es_core, __pyx_t_5) < 0) __PYX_ERR(0, 1085, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1063
 * 
 * IF LENNARD_JONES == 1:
 *     class Subt_Lj(BondedInteraction):             # <<<<<<<<<<<<<<
 * 
 *         def type_number(self):
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_3, __pyx_n_s_Subt_Lj, __pyx_t_2, __pyx_t_4, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Subt_Lj, __pyx_t_5) < 0) __PYX_ERR(0, 1063, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":1120
 * 
 * ELSE:
 *     class Virtual(BondedInteractionNotDefined):             # <<<<<<<<<<<<<<
 *         name = "BOND_VIRTUAL"
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_BondedInteractionNotDefined); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_3, __pyx_n_s_Virtual, __pyx_n_s_Virtual, (PyObject *) NULL, __pyx_n_s_espressomd_interactions, (PyObject *) NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "espressomd/interactions.pyx":1121
 * ELSE:
 *     class Virtual(BondedInteractionNotDefined):
 *         name = "BOND_VIRTUAL"             # <<<<<<<<<<<<<<
 * 
 * IF BOND_ENDANGLEDIST == 1:
 */
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_name_2, __pyx_n_s_BOND_VIRTUAL) < 0) __PYX_ERR(0, 1121, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1120
 * 
 * ELSE:
 *     class Virtual(BondedInteractionNotDefined):             # <<<<<<<<<<<<<<
 *         name = "BOND_VIRTUAL"
 * 
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_Virtual, __pyx_t_3, __pyx_t_4, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Virtual, __pyx_t_5) < 0) __PYX_ERR(0, 1120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "espressomd/interactions.pyx":1153
 * 
 * ELSE:
 *     class Endangledist(BondedInteractionNotDefined):             # <<<<<<<<<<<<<<
 *         name = "BOND_ENDANGLEDIST"
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_BondedInteractionNotDefined); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3MetaclassPrepare(__pyx_t_3, __pyx_t_2, __pyx_n_s_Endangledist, __pyx_n_s_Endangledist, (PyObject *) NULL, __pyx_n_s_espressomd_interactions, (PyObject *) NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "espressomd/interactions.pyx":1154
 * ELSE:
 *     class Endangledist(BondedInteractionNotDefined):
 *         name = "BOND_ENDANGLEDIST"             # <<<<<<<<<<<<<<
 * 
 * IF OVERLAPPED == 1:
 */
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_name_2, __pyx_n_s_BOND_ENDANGLEDIST) < 0) __PYX_ERR(0, 1154, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1153
 * 
 * ELSE:
 *     class Endangledist(BondedInteractionNotDefined):             # <<<<<<<<<<<<<<
 *         name = "BOND_ENDANGLEDIST"
 * 
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_3, __pyx_n_s_Endangledist, __pyx_t_2, __pyx_t_4, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Endangledist, __pyx_t_5) < 0) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":1185
 * 
 * ELSE:
 *     class Overlapped(BondedInteractionNotDefined):             # <<<<<<<<<<<<<<
 *         name = "OVERLAPPED"
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_BondedInteractionNotDefined); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_3, __pyx_n_s_Overlapped, __pyx_n_s_Overlapped, (PyObject *) NULL, __pyx_n_s_espressomd_interactions, (PyObject *) NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "espressomd/interactions.pyx":1186
 * ELSE:
 *     class Overlapped(BondedInteractionNotDefined):
 *         name = "OVERLAPPED"             # <<<<<<<<<<<<<<
 * 
 * IF BOND_ANGLE == 1:
 */
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_name_2, __pyx_n_s_OVERLAPPED) < 0) __PYX_ERR(0, 1186, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1185
 * 
 * ELSE:
 *     class Overlapped(BondedInteractionNotDefined):             # <<<<<<<<<<<<<<
 *         name = "OVERLAPPED"
 * 
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_Overlapped, __pyx_t_3, __pyx_t_4, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Overlapped, __pyx_t_5) < 0) __PYX_ERR(0, 1185, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "espressomd/interactions.pyx":1215
 *                 self._bond_id, self._params["bend"], self._params["phi0"])
 * ELSE:
 *     class Angle_Harmonic(BondedInteractionNotDefined):             # <<<<<<<<<<<<<<
 *         name = "BOND_ANGLE"
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_BondedInteractionNotDefined); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3MetaclassPrepare(__pyx_t_3, __pyx_t_2, __pyx_n_s_Angle_Harmonic, __pyx_n_s_Angle_Harmonic, (PyObject *) NULL, __pyx_n_s_espressomd_interactions, (PyObject *) NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "espressomd/interactions.pyx":1216
 * ELSE:
 *     class Angle_Harmonic(BondedInteractionNotDefined):
 *         name = "BOND_ANGLE"             # <<<<<<<<<<<<<<
 * 
 * IF BOND_ANGLE == 1:
 */
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_name_2, __pyx_n_s_BOND_ANGLE) < 0) __PYX_ERR(0, 1216, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1215
 *                 self._bond_id, self._params["bend"], self._params["phi0"])
 * ELSE:
 *     class Angle_Harmonic(BondedInteractionNotDefined):             # <<<<<<<<<<<<<<
 *         name = "BOND_ANGLE"
 * 
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_3, __pyx_n_s_Angle_Harmonic, __pyx_t_2, __pyx_t_4, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Angle_Harmonic, __pyx_t_5) < 0) __PYX_ERR(0, 1215, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":1245
 *                 self._bond_id, self._params["bend"], self._params["phi0"])
 * ELSE:
 *     class Angle_Cosine(BondedInteractionNotDefined):             # <<<<<<<<<<<<<<
 *         name = "BOND_ANGLE"
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_BondedInteractionNotDefined); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_3, __pyx_n_s_Angle_Cosine, __pyx_n_s_Angle_Cosine, (PyObject *) NULL, __pyx_n_s_espressomd_interactions, (PyObject *) NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "espressomd/interactions.pyx":1246
 * ELSE:
 *     class Angle_Cosine(BondedInteractionNotDefined):
 *         name = "BOND_ANGLE"             # <<<<<<<<<<<<<<
 * 
 * IF BOND_ANGLE == 1:
 */
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_name_2, __pyx_n_s_BOND_ANGLE) < 0) __PYX_ERR(0, 1246, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1245
 *                 self._bond_id, self._params["bend"], self._params["phi0"])
 * ELSE:
 *     class Angle_Cosine(BondedInteractionNotDefined):             # <<<<<<<<<<<<<<
 *         name = "BOND_ANGLE"
 * 
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_Angle_Cosine, __pyx_t_3, __pyx_t_4, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Angle_Cosine, __pyx_t_5) < 0) __PYX_ERR(0, 1245, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "espressomd/interactions.pyx":1275
 *                 self._bond_id, self._params["bend"], self._params["phi0"])
 * ELSE:
 *     class Angle_Cossquare(BondedInteractionNotDefined):             # <<<<<<<<<<<<<<
 *         name = "BOND_ANGLE"
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_BondedInteractionNotDefined); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3MetaclassPrepare(__pyx_t_3, __pyx_t_2, __pyx_n_s_Angle_Cossquare, __pyx_n_s_Angle_Cossquare, (PyObject *) NULL, __pyx_n_s_espressomd_interactions, (PyObject *) NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "espressomd/interactions.pyx":1276
 * ELSE:
 *     class Angle_Cossquare(BondedInteractionNotDefined):
 *         name = "BOND_ANGLE"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_name_2, __pyx_n_s_BOND_ANGLE) < 0) __PYX_ERR(0, 1276, __pyx_L1_error)

  /* "espressomd/interactions.pyx":1275
 *                 self._bond_id, self._params["bend"], self._params["phi0"])
 * ELSE:
 *     class Angle_Cossquare(BondedInteractionNotDefined):             # <<<<<<<<<<<<<<
 *         name = "BOND_ANGLE"
 * 
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_3, __pyx_n_s_Angle_Cossquare, __pyx_t_2, __pyx_t_4, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Angle_Cossquare, __pyx_t_5) < 0) __PYX_ERR(0, 1275, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":1279
 * 
 * 
 * class Oif_Global_Forces(BondedInteraction):             # <<<<<<<<<<<<<<
 * 
 *     def type_number(self):
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_10espressomd_12interactions_BondedInteraction));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_10espressomd_12interactions_BondedInteraction));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_10espressomd_12interactions_BondedInteraction));
  __pyx_t_3 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3MetaclassPrepare(__pyx_t_3, __pyx_t_2, __pyx_n_s_Oif_Global_Forces, __pyx_n_s_Oif_Global_Forces, (PyObject *) NULL, __pyx_n_s_espressomd_interactions, (PyObject *) NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "espressomd/interactions.pyx":1281
 * class Oif_Global_Forces(BondedInteraction):
 * 
 *     def type_number(self):             # <<<<<<<<<<<<<<
 *         return BONDED_IA_OIF_GLOBAL_FORCES
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_17Oif_Global_Forces_1type_number, 0, __pyx_n_s_Oif_Global_Forces_type_number, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__185)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_type_number, __pyx_t_5) < 0) __PYX_ERR(0, 1281, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1284
 *         return BONDED_IA_OIF_GLOBAL_FORCES
 * 
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         return "OIF_GLOBAL_FORCES"
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_17Oif_Global_Forces_3type_name, 0, __pyx_n_s_Oif_Global_Forces_type_name, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__187)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_type_name, __pyx_t_5) < 0) __PYX_ERR(0, 1284, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1287
 *         return "OIF_GLOBAL_FORCES"
 * 
 *     def valid_keys(self):             # <<<<<<<<<<<<<<
 *         return "A0_g", "ka_g", "V0", "kv"
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_17Oif_Global_Forces_5valid_keys, 0, __pyx_n_s_Oif_Global_Forces_valid_keys, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__189)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_valid_keys, __pyx_t_5) < 0) __PYX_ERR(0, 1287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1290
 *         return "A0_g", "ka_g", "V0", "kv"
 * 
 *     def required_keys(self):             # <<<<<<<<<<<<<<
 *         return "A0_g", "ka_g", "V0", "kv"
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_17Oif_Global_Forces_7required_keys, 0, __pyx_n_s_Oif_Global_Forces_required_keys, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__191)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_required_keys, __pyx_t_5) < 0) __PYX_ERR(0, 1290, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1293
 *         return "A0_g", "ka_g", "V0", "kv"
 * 
 *     def set_default_params(self):             # <<<<<<<<<<<<<<
 *         self._params = {"A0_g": 1., "ka_g": 0., "V0": 1., "kv": 0.}
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_17Oif_Global_Forces_9set_default_params, 0, __pyx_n_s_Oif_Global_Forces_set_default_pa, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__193)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_set_default_params, __pyx_t_5) < 0) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1296
 *         self._params = {"A0_g": 1., "ka_g": 0., "V0": 1., "kv": 0.}
 * 
 *     def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *         return \
 *             {"A0_g": bonded_ia_params[self._bond_id].p.oif_global_forces.A0_g,
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_17Oif_Global_Forces_11_get_params_from_es_core, 0, __pyx_n_s_Oif_Global_Forces__get_params_fr, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__195)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_get_params_from_es_core, __pyx_t_5) < 0) __PYX_ERR(0, 1296, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1303
 *              "kv": bonded_ia_params[self._bond_id].p.oif_global_forces.kv}
 * 
 *     def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *         oif_global_forces_set_params(
 *             self._bond_id, self._params["A0_g"], self._params["ka_g"], self._params["V0"], self._params["kv"])
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_17Oif_Global_Forces_13_set_params_in_es_core, 0, __pyx_n_s_Oif_Global_Forces__set_params_in, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__197)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_set_params_in_es_core, __pyx_t_5) < 0) __PYX_ERR(0, 1303, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1279
 * 
 * 
 * class Oif_Global_Forces(BondedInteraction):             # <<<<<<<<<<<<<<
 * 
 *     def type_number(self):
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_3, __pyx_n_s_Oif_Global_Forces, __pyx_t_2, __pyx_t_4, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Oif_Global_Forces, __pyx_t_5) < 0) __PYX_ERR(0, 1279, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":1308
 * 
 * 
 * class Oif_Local_Forces(BondedInteraction):             # <<<<<<<<<<<<<<
 * 
 *     def type_number(self):
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_10espressomd_12interactions_BondedInteraction));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_10espressomd_12interactions_BondedInteraction));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_10espressomd_12interactions_BondedInteraction));
  __pyx_t_3 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3MetaclassPrepare(__pyx_t_3, __pyx_t_2, __pyx_n_s_Oif_Local_Forces, __pyx_n_s_Oif_Local_Forces, (PyObject *) NULL, __pyx_n_s_espressomd_interactions, (PyObject *) NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "espressomd/interactions.pyx":1310
 * class Oif_Local_Forces(BondedInteraction):
 * 
 *     def type_number(self):             # <<<<<<<<<<<<<<
 *         return BONDED_IA_OIF_LOCAL_FORCES
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_16Oif_Local_Forces_1type_number, 0, __pyx_n_s_Oif_Local_Forces_type_number, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__199)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_type_number, __pyx_t_5) < 0) __PYX_ERR(0, 1310, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1313
 *         return BONDED_IA_OIF_LOCAL_FORCES
 * 
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         return "OIF_LOCAL_FORCES"
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_16Oif_Local_Forces_3type_name, 0, __pyx_n_s_Oif_Local_Forces_type_name, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__201)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_type_name, __pyx_t_5) < 0) __PYX_ERR(0, 1313, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1316
 *         return "OIF_LOCAL_FORCES"
 * 
 *     def valid_keys(self):             # <<<<<<<<<<<<<<
 *         return "r0", "ks", "kslin", "phi0", "kb", "A01", "A02", "kal"
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_16Oif_Local_Forces_5valid_keys, 0, __pyx_n_s_Oif_Local_Forces_valid_keys, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__203)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_valid_keys, __pyx_t_5) < 0) __PYX_ERR(0, 1316, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1319
 *         return "r0", "ks", "kslin", "phi0", "kb", "A01", "A02", "kal"
 * 
 *     def required_keys(self):             # <<<<<<<<<<<<<<
 *         return "r0", "ks", "kslin", "phi0", "kb", "A01", "A02", "kal"
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_16Oif_Local_Forces_7required_keys, 0, __pyx_n_s_Oif_Local_Forces_required_keys, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__205)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_required_keys, __pyx_t_5) < 0) __PYX_ERR(0, 1319, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1322
 *         return "r0", "ks", "kslin", "phi0", "kb", "A01", "A02", "kal"
 * 
 *     def set_default_params(self):             # <<<<<<<<<<<<<<
 *         self._params = {"r0": 1., "ks": 0., "kslin": 0.,
 *                         "phi0": 0., "kb": 0., "A01": 0., "A02": 0., "kal": 0.}
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_16Oif_Local_Forces_9set_default_params, 0, __pyx_n_s_Oif_Local_Forces_set_default_par, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__207)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_set_default_params, __pyx_t_5) < 0) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1326
 *                         "phi0": 0., "kb": 0., "A01": 0., "A02": 0., "kal": 0.}
 * 
 *     def _get_params_from_es_core(self):             # <<<<<<<<<<<<<<
 *         return \
 *             {"r0": bonded_ia_params[self._bond_id].p.oif_local_forces.r0,
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_16Oif_Local_Forces_11_get_params_from_es_core, 0, __pyx_n_s_Oif_Local_Forces__get_params_fro, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__209)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_get_params_from_es_core, __pyx_t_5) < 0) __PYX_ERR(0, 1326, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1337
 *              "kal": bonded_ia_params[self._bond_id].p.oif_local_forces.kal}
 * 
 *     def _set_params_in_es_core(self):             # <<<<<<<<<<<<<<
 *         oif_local_forces_set_params(
 *             self._bond_id, self._params["r0"], self._params["ks"], self._params["kslin"], self._params["phi0"], self._params["kb"], self._params["A01"], self._params["A02"], self._params["kal"])
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_16Oif_Local_Forces_13_set_params_in_es_core, 0, __pyx_n_s_Oif_Local_Forces__set_params_in, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__211)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_4, __pyx_n_s_set_params_in_es_core, __pyx_t_5) < 0) __PYX_ERR(0, 1337, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1308
 * 
 * 
 * class Oif_Local_Forces(BondedInteraction):             # <<<<<<<<<<<<<<
 * 
 *     def type_number(self):
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_3, __pyx_n_s_Oif_Local_Forces, __pyx_t_2, __pyx_t_4, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Oif_Local_Forces, __pyx_t_5) < 0) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":1343
 * 
 * bonded_interaction_classes = {
 *     int(BONDED_IA_FENE): FeneBond,             # <<<<<<<<<<<<<<
 *     int(BONDED_IA_HARMONIC): HarmonicBond,
 *     int(BONDED_IA_HARMONIC_DUMBBELL): HarmonicDumbbellBond,
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_enum__BondedInteraction(BONDED_IA_FENE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_FeneBond); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_t_3, __pyx_t_4) < 0) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "espressomd/interactions.pyx":1344
 * bonded_interaction_classes = {
 *     int(BONDED_IA_FENE): FeneBond,
 *     int(BONDED_IA_HARMONIC): HarmonicBond,             # <<<<<<<<<<<<<<
 *     int(BONDED_IA_HARMONIC_DUMBBELL): HarmonicDumbbellBond,
 *     int(BONDED_IA_RIGID_BOND): RigidBond,
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum__BondedInteraction(BONDED_IA_HARMONIC); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_HarmonicBond); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_t_4, __pyx_t_3) < 0) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "espressomd/interactions.pyx":1345
 *     int(BONDED_IA_FENE): FeneBond,
 *     int(BONDED_IA_HARMONIC): HarmonicBond,
 *     int(BONDED_IA_HARMONIC_DUMBBELL): HarmonicDumbbellBond,             # <<<<<<<<<<<<<<
 *     int(BONDED_IA_RIGID_BOND): RigidBond,
 *     int(BONDED_IA_DIHEDRAL): Dihedral,
 */
  __pyx_t_3 = __Pyx_PyInt_From_enum__BondedInteraction(BONDED_IA_HARMONIC_DUMBBELL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_HarmonicDumbbellBond); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_t_3, __pyx_t_4) < 0) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "espressomd/interactions.pyx":1346
 *     int(BONDED_IA_HARMONIC): HarmonicBond,
 *     int(BONDED_IA_HARMONIC_DUMBBELL): HarmonicDumbbellBond,
 *     int(BONDED_IA_RIGID_BOND): RigidBond,             # <<<<<<<<<<<<<<
 *     int(BONDED_IA_DIHEDRAL): Dihedral,
 *     int(BONDED_IA_TABULATED): Tabulated,
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum__BondedInteraction(BONDED_IA_RIGID_BOND); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_RigidBond); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_t_4, __pyx_t_3) < 0) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "espressomd/interactions.pyx":1347
 *     int(BONDED_IA_HARMONIC_DUMBBELL): HarmonicDumbbellBond,
 *     int(BONDED_IA_RIGID_BOND): RigidBond,
 *     int(BONDED_IA_DIHEDRAL): Dihedral,             # <<<<<<<<<<<<<<
 *     int(BONDED_IA_TABULATED): Tabulated,
 *     int(BONDED_IA_VIRTUAL_BOND): Virtual,
 */
  __pyx_t_3 = __Pyx_PyInt_From_enum__BondedInteraction(BONDED_IA_DIHEDRAL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_Dihedral); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_t_3, __pyx_t_4) < 0) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "espressomd/interactions.pyx":1348
 *     int(BONDED_IA_RIGID_BOND): RigidBond,
 *     int(BONDED_IA_DIHEDRAL): Dihedral,
 *     int(BONDED_IA_TABULATED): Tabulated,             # <<<<<<<<<<<<<<
 *     int(BONDED_IA_VIRTUAL_BOND): Virtual,
 *     int(BONDED_IA_ENDANGLEDIST): Endangledist,
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum__BondedInteraction(BONDED_IA_TABULATED); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_Tabulated); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_t_4, __pyx_t_3) < 0) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "espressomd/interactions.pyx":1349
 *     int(BONDED_IA_DIHEDRAL): Dihedral,
 *     int(BONDED_IA_TABULATED): Tabulated,
 *     int(BONDED_IA_VIRTUAL_BOND): Virtual,             # <<<<<<<<<<<<<<
 *     int(BONDED_IA_ENDANGLEDIST): Endangledist,
 *     int(BONDED_IA_OVERLAPPED): Overlapped,
 */
  __pyx_t_3 = __Pyx_PyInt_From_enum__BondedInteraction(BONDED_IA_VIRTUAL_BOND); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_Virtual); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_t_3, __pyx_t_4) < 0) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "espressomd/interactions.pyx":1350
 *     int(BONDED_IA_TABULATED): Tabulated,
 *     int(BONDED_IA_VIRTUAL_BOND): Virtual,
 *     int(BONDED_IA_ENDANGLEDIST): Endangledist,             # <<<<<<<<<<<<<<
 *     int(BONDED_IA_OVERLAPPED): Overlapped,
 *     int(BONDED_IA_ANGLE_HARMONIC): Angle_Harmonic,
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum__BondedInteraction(BONDED_IA_ENDANGLEDIST); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_Endangledist); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_t_4, __pyx_t_3) < 0) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "espressomd/interactions.pyx":1351
 *     int(BONDED_IA_VIRTUAL_BOND): Virtual,
 *     int(BONDED_IA_ENDANGLEDIST): Endangledist,
 *     int(BONDED_IA_OVERLAPPED): Overlapped,             # <<<<<<<<<<<<<<
 *     int(BONDED_IA_ANGLE_HARMONIC): Angle_Harmonic,
 *     int(BONDED_IA_ANGLE_COSINE): Angle_Cosine,
 */
  __pyx_t_3 = __Pyx_PyInt_From_enum__BondedInteraction(BONDED_IA_OVERLAPPED); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_Overlapped); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_t_3, __pyx_t_4) < 0) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "espressomd/interactions.pyx":1352
 *     int(BONDED_IA_ENDANGLEDIST): Endangledist,
 *     int(BONDED_IA_OVERLAPPED): Overlapped,
 *     int(BONDED_IA_ANGLE_HARMONIC): Angle_Harmonic,             # <<<<<<<<<<<<<<
 *     int(BONDED_IA_ANGLE_COSINE): Angle_Cosine,
 *     int(BONDED_IA_ANGLE_COSSQUARE): Angle_Cossquare,
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum__BondedInteraction(BONDED_IA_ANGLE_HARMONIC); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_Angle_Harmonic); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_t_4, __pyx_t_3) < 0) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "espressomd/interactions.pyx":1353
 *     int(BONDED_IA_OVERLAPPED): Overlapped,
 *     int(BONDED_IA_ANGLE_HARMONIC): Angle_Harmonic,
 *     int(BONDED_IA_ANGLE_COSINE): Angle_Cosine,             # <<<<<<<<<<<<<<
 *     int(BONDED_IA_ANGLE_COSSQUARE): Angle_Cossquare,
 *     int(BONDED_IA_OIF_GLOBAL_FORCES): Oif_Global_Forces,
 */
  __pyx_t_3 = __Pyx_PyInt_From_enum__BondedInteraction(BONDED_IA_ANGLE_COSINE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_Angle_Cosine); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_t_3, __pyx_t_4) < 0) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "espressomd/interactions.pyx":1354
 *     int(BONDED_IA_ANGLE_HARMONIC): Angle_Harmonic,
 *     int(BONDED_IA_ANGLE_COSINE): Angle_Cosine,
 *     int(BONDED_IA_ANGLE_COSSQUARE): Angle_Cossquare,             # <<<<<<<<<<<<<<
 *     int(BONDED_IA_OIF_GLOBAL_FORCES): Oif_Global_Forces,
 *     int(BONDED_IA_OIF_LOCAL_FORCES): Oif_Local_Forces,
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum__BondedInteraction(BONDED_IA_ANGLE_COSSQUARE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_Angle_Cossquare); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_t_4, __pyx_t_3) < 0) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "espressomd/interactions.pyx":1355
 *     int(BONDED_IA_ANGLE_COSINE): Angle_Cosine,
 *     int(BONDED_IA_ANGLE_COSSQUARE): Angle_Cossquare,
 *     int(BONDED_IA_OIF_GLOBAL_FORCES): Oif_Global_Forces,             # <<<<<<<<<<<<<<
 *     int(BONDED_IA_OIF_LOCAL_FORCES): Oif_Local_Forces,
 * }
 */
  __pyx_t_3 = __Pyx_PyInt_From_enum__BondedInteraction(BONDED_IA_OIF_GLOBAL_FORCES); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_Oif_Global_Forces); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_t_3, __pyx_t_4) < 0) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "espressomd/interactions.pyx":1356
 *     int(BONDED_IA_ANGLE_COSSQUARE): Angle_Cossquare,
 *     int(BONDED_IA_OIF_GLOBAL_FORCES): Oif_Global_Forces,
 *     int(BONDED_IA_OIF_LOCAL_FORCES): Oif_Local_Forces,             # <<<<<<<<<<<<<<
 * }
 * IF LENNARD_JONES:
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum__BondedInteraction(BONDED_IA_OIF_LOCAL_FORCES); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_Oif_Local_Forces); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_t_4, __pyx_t_3) < 0) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_bonded_interaction_classes, __pyx_t_2) < 0) __PYX_ERR(0, 1342, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":1359
 * }
 * IF LENNARD_JONES:
 *     bonded_interaction_classes[int(BONDED_IA_SUBT_LJ)] = Subt_Lj             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Subt_Lj); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_bonded_interaction_classes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_enum__BondedInteraction(BONDED_IA_SUBT_LJ); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(PyObject_SetItem(__pyx_t_3, __pyx_t_4, __pyx_t_2) < 0)) __PYX_ERR(0, 1359, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":1362
 * 
 * 
 * class BondedInteractions(object):             # <<<<<<<<<<<<<<
 * 
 *     """Represents the bonded interactions. Individual interactions can be accessed using
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_builtin_object);
  __pyx_t_4 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_4, __pyx_t_2, __pyx_n_s_BondedInteractions, __pyx_n_s_BondedInteractions, (PyObject *) NULL, __pyx_n_s_espressomd_interactions, __pyx_kp_s_Represents_the_bonded_interactio); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "espressomd/interactions.pyx":1368
 *     from bonded_interaction_classes"""
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         if not isinstance(key, int):
 *             raise ValueError(
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_18BondedInteractions_1__getitem__, 0, __pyx_n_s_BondedInteractions___getitem, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__213)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_getitem, __pyx_t_5) < 0) __PYX_ERR(0, 1368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1388
 *         return bond_class(key)
 * 
 *     def __setitem__(self, key, value):             # <<<<<<<<<<<<<<
 *         # Validate arguments
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_18BondedInteractions_3__setitem__, 0, __pyx_n_s_BondedInteractions___setitem, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__215)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_setitem, __pyx_t_5) < 0) __PYX_ERR(0, 1388, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1408
 * 
 *     # Support iteration over active bonded interactions
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         for i in range(n_bonded_ia):
 *             if bonded_ia_params[i].type != -1:
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_18BondedInteractions_5__iter__, 0, __pyx_n_s_BondedInteractions___iter, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__217)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_iter, __pyx_t_5) < 0) __PYX_ERR(0, 1408, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1413
 *                 yield self[i]
 * 
 *     def add(self, bonded_ia):             # <<<<<<<<<<<<<<
 *         """Add a bonded ia to the simulation>"""
 *         self[n_bonded_ia] = bonded_ia
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_18BondedInteractions_8add, 0, __pyx_n_s_BondedInteractions_add, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__219)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_add, __pyx_t_5) < 0) __PYX_ERR(0, 1413, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1417
 *         self[n_bonded_ia] = bonded_ia
 * 
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         params = {}
 *         for i,bonded_instance in enumerate(self):
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_18BondedInteractions_10__getstate__, 0, __pyx_n_s_BondedInteractions___getstate, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__221)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_getstate, __pyx_t_5) < 0) __PYX_ERR(0, 1417, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1427
 *         return params
 * 
 *     def __setstate__(self, params):             # <<<<<<<<<<<<<<
 *         for i in params:
 *             if params[i] != None:
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10espressomd_12interactions_18BondedInteractions_12__setstate__, 0, __pyx_n_s_BondedInteractions___setstate, NULL, __pyx_n_s_espressomd_interactions, __pyx_d, ((PyObject *)__pyx_codeobj__223)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_setstate, __pyx_t_5) < 0) __PYX_ERR(0, 1427, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "espressomd/interactions.pyx":1362
 * 
 * 
 * class BondedInteractions(object):             # <<<<<<<<<<<<<<
 * 
 *     """Represents the bonded interactions. Individual interactions can be accessed using
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_4, __pyx_n_s_BondedInteractions, __pyx_t_2, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BondedInteractions, __pyx_t_5) < 0) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/interactions.pyx":1
 * #             # <<<<<<<<<<<<<<
 * # Copyright (C) 2013,2014,2015,2016 The ESPResSo project
 * #
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":997
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init espressomd.interactions", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init espressomd.interactions");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* KeywordStringCheck */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* GetItemInt */
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs, NULL);
}
#endif  // CYTHON_FAST_PYCCALL

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = PyThreadState_GET();
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif  // CPython < 3.6
#endif  // CYTHON_FAST_PYCALL

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyErrFetchRestore */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
    #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseArgTupleInvalid */
      static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* UnpackUnboundCMethod */
      static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(PyObject_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST);
    }
#endif
    return 0;
}

/* CallUnboundCMethod0 */
      static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* py_dict_keys */
      static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_keys, d);
    else
        return PyDict_Keys(d);
}

/* None */
      static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* BytesEquals */
      static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
      static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* FetchCommonType */
      static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
      static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0 = PySequence_ITEM(arg, 0);
                if (unlikely(!arg0)) return NULL;
                result = (*meth)(self, arg0);
                Py_DECREF(arg0);
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* RaiseDoubleKeywords */
          static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
          static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* GetModuleGlobalName */
          static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* GetAttr */
            static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_COMPILING_IN_CPYTHON
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
            static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError))
            goto bad;
        PyErr_Clear();
        r = d;
        Py_INCREF(d);
    }
    return r;
bad:
    return NULL;
}

/* None */
            static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* PyIntBinop */
            #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) {
            Py_RETURN_TRUE;
        } else {
            Py_RETURN_FALSE;
        }
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                #if PyLong_SHIFT < 30 && PyLong_SHIFT != 15
                default: return PyLong_Type.tp_richcompare(op1, op2, Py_EQ);
                #else
                default: Py_RETURN_FALSE;
                #endif
            }
        }
            if (a == b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            if ((double)a == (double)b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    return PyObject_RichCompare(op1, op2, Py_EQ);
}
#endif

/* SetItemInt */
            static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* PyIntBinop */
              #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* RaiseTooManyValuesToUnpack */
              static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
              static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
              static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* ExtTypeTest */
              static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* SaveResetException */
              #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
              #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    return PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
              #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* Import */
                static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
                static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CalculateMetaclass */
                static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
                static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CodeObjectCache */
                static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
                #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
                static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
                static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__BondedInteraction(enum BondedInteraction value) {
    const enum BondedInteraction neg_one = (enum BondedInteraction) -1, const_zero = (enum BondedInteraction) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum BondedInteraction) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum BondedInteraction) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum BondedInteraction) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum BondedInteraction) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum BondedInteraction) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum BondedInteraction),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
                static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
                #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Declarations */
                #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
                #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0, -1);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
                #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
                #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0, -1);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
                static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
                static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
                static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* SwapException */
                #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectCallMethod1 */
                static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto done;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
done:
    Py_XDECREF(method);
    return result;
}

/* CoroutineBase */
                #include <structmember.h>
#include <frameobject.h>
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
#endif
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__pyx_CoroutineObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
static CYTHON_INLINE
int __Pyx_Coroutine_CheckRunning(__pyx_CoroutineObject *gen) {
    if (unlikely(gen->is_running)) {
        PyErr_SetString(PyExc_ValueError,
                        "generator already executing");
        return 1;
    }
    return 0;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value) {
    PyObject *retval;
    __Pyx_PyThreadState_declare
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            PyErr_SetString(PyExc_TypeError,
                            "can't send non-None value to a "
                            "just-started generator");
            return NULL;
        }
    }
    if (unlikely(self->resume_label == -1)) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    __Pyx_PyThreadState_assign
    if (value) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(__pyx_tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = __pyx_tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, value);
    self->is_running = 0;
    if (retval) {
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_CLEAR(f->f_back);
        }
#endif
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(PyObject *retval) {
    if (unlikely(!retval && !PyErr_Occurred())) {
        PyErr_SetNone(PyExc_StopIteration);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen_FetchStopIterationValue(&val);
    ret = __Pyx_Coroutine_SendEx(gen, val);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value);
    }
    return __Pyx_Coroutine_MethodReturn(retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL);
    if (retval) {
        Py_DECREF(retval);
        PyErr_SetString(PyExc_RuntimeError,
                        "generator ignored GeneratorExit");
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (!raised_exception
        || raised_exception == PyExc_StopIteration
        || raised_exception == PyExc_GeneratorExit
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_GeneratorExit)
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_StopIteration))
    {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *typ;
    PyObject *tb = NULL;
    PyObject *val = NULL;
    PyObject *yf = gen->yieldfrom;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit)) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
            goto throw_here;
        }
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            ret = PyObject_CallObject(meth, args);
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
}
static int __Pyx_Coroutine_traverse(PyObject *self, visitproc visit, void *arg) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label > 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *res;
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label <= 0)
        return ;
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
    res = __Pyx_Coroutine_Close(self);
    if (res == NULL)
        PyErr_WriteUnraisable(self);
    else
        Py_DECREF(res);
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (gen == NULL)
        return NULL;
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
                    static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
                    #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (!abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_VERSION_HEX >= 0x03030000) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_VERSION_HEX >= 0x03030000) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if (0) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
                    static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if PY_VERSION_HEX >= 0x030400a1
    __Pyx_Coroutine_del,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = PyObject_GenericGetAttr;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
                    static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
                    #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
                    #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* VoidPtrImport */
                    #ifndef __PYX_HAVE_RT_ImportVoidPtr
#define __PYX_HAVE_RT_ImportVoidPtr
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, name);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C variable %.200s",
                PyModule_GetName(module), name);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    *p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, desc);
        goto bad;
    }
    *p = PyCObject_AsVoidPtr(cobj);}
#endif
    if (!(*p))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
                    static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
